// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ProfileQuestion is an object representing the database table.
type ProfileQuestion struct {
	ID         string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Question   string     `boil:"question" json:"question" toml:"question" yaml:"question"`
	AnswerType int        `boil:"answer_type" json:"answer_type" toml:"answer_type" yaml:"answer_type"`
	Options    types.JSON `boil:"options" json:"options" toml:"options" yaml:"options"`
	Weight     float64    `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	CreatedAt  null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *profileQuestionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileQuestionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileQuestionColumns = struct {
	ID         string
	Question   string
	AnswerType string
	Options    string
	Weight     string
	CreatedAt  string
}{
	ID:         "id",
	Question:   "question",
	AnswerType: "answer_type",
	Options:    "options",
	Weight:     "weight",
	CreatedAt:  "created_at",
}

var ProfileQuestionTableColumns = struct {
	ID         string
	Question   string
	AnswerType string
	Options    string
	Weight     string
	CreatedAt  string
}{
	ID:         "profile_questions.id",
	Question:   "profile_questions.question",
	AnswerType: "profile_questions.answer_type",
	Options:    "profile_questions.options",
	Weight:     "profile_questions.weight",
	CreatedAt:  "profile_questions.created_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ProfileQuestionWhere = struct {
	ID         whereHelperstring
	Question   whereHelperstring
	AnswerType whereHelperint
	Options    whereHelpertypes_JSON
	Weight     whereHelperfloat64
	CreatedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"profile_questions\".\"id\""},
	Question:   whereHelperstring{field: "\"profile_questions\".\"question\""},
	AnswerType: whereHelperint{field: "\"profile_questions\".\"answer_type\""},
	Options:    whereHelpertypes_JSON{field: "\"profile_questions\".\"options\""},
	Weight:     whereHelperfloat64{field: "\"profile_questions\".\"weight\""},
	CreatedAt:  whereHelpernull_Time{field: "\"profile_questions\".\"created_at\""},
}

// ProfileQuestionRels is where relationship names are stored.
var ProfileQuestionRels = struct {
	EventPQMatchScores   string
	UserProfileQuestions string
}{
	EventPQMatchScores:   "EventPQMatchScores",
	UserProfileQuestions: "UserProfileQuestions",
}

// profileQuestionR is where relationships are stored.
type profileQuestionR struct {
	EventPQMatchScores   EventPQMatchScoreSlice   `boil:"EventPQMatchScores" json:"EventPQMatchScores" toml:"EventPQMatchScores" yaml:"EventPQMatchScores"`
	UserProfileQuestions UserProfileQuestionSlice `boil:"UserProfileQuestions" json:"UserProfileQuestions" toml:"UserProfileQuestions" yaml:"UserProfileQuestions"`
}

// NewStruct creates a new relationship struct
func (*profileQuestionR) NewStruct() *profileQuestionR {
	return &profileQuestionR{}
}

// profileQuestionL is where Load methods for each relationship are stored.
type profileQuestionL struct{}

var (
	profileQuestionAllColumns            = []string{"id", "question", "answer_type", "options", "weight", "created_at"}
	profileQuestionColumnsWithoutDefault = []string{"id", "question", "answer_type"}
	profileQuestionColumnsWithDefault    = []string{"options", "weight", "created_at"}
	profileQuestionPrimaryKeyColumns     = []string{"id"}
)

type (
	// ProfileQuestionSlice is an alias for a slice of pointers to ProfileQuestion.
	// This should almost always be used instead of []ProfileQuestion.
	ProfileQuestionSlice []*ProfileQuestion
	// ProfileQuestionHook is the signature for custom ProfileQuestion hook methods
	ProfileQuestionHook func(context.Context, boil.ContextExecutor, *ProfileQuestion) error

	profileQuestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileQuestionType                 = reflect.TypeOf(&ProfileQuestion{})
	profileQuestionMapping              = queries.MakeStructMapping(profileQuestionType)
	profileQuestionPrimaryKeyMapping, _ = queries.BindMapping(profileQuestionType, profileQuestionMapping, profileQuestionPrimaryKeyColumns)
	profileQuestionInsertCacheMut       sync.RWMutex
	profileQuestionInsertCache          = make(map[string]insertCache)
	profileQuestionUpdateCacheMut       sync.RWMutex
	profileQuestionUpdateCache          = make(map[string]updateCache)
	profileQuestionUpsertCacheMut       sync.RWMutex
	profileQuestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var profileQuestionBeforeInsertHooks []ProfileQuestionHook
var profileQuestionBeforeUpdateHooks []ProfileQuestionHook
var profileQuestionBeforeDeleteHooks []ProfileQuestionHook
var profileQuestionBeforeUpsertHooks []ProfileQuestionHook

var profileQuestionAfterInsertHooks []ProfileQuestionHook
var profileQuestionAfterSelectHooks []ProfileQuestionHook
var profileQuestionAfterUpdateHooks []ProfileQuestionHook
var profileQuestionAfterDeleteHooks []ProfileQuestionHook
var profileQuestionAfterUpsertHooks []ProfileQuestionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProfileQuestion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProfileQuestion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProfileQuestion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProfileQuestion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProfileQuestion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProfileQuestion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProfileQuestion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProfileQuestion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProfileQuestion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileQuestionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProfileQuestionHook registers your hook function for all future operations.
func AddProfileQuestionHook(hookPoint boil.HookPoint, profileQuestionHook ProfileQuestionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		profileQuestionBeforeInsertHooks = append(profileQuestionBeforeInsertHooks, profileQuestionHook)
	case boil.BeforeUpdateHook:
		profileQuestionBeforeUpdateHooks = append(profileQuestionBeforeUpdateHooks, profileQuestionHook)
	case boil.BeforeDeleteHook:
		profileQuestionBeforeDeleteHooks = append(profileQuestionBeforeDeleteHooks, profileQuestionHook)
	case boil.BeforeUpsertHook:
		profileQuestionBeforeUpsertHooks = append(profileQuestionBeforeUpsertHooks, profileQuestionHook)
	case boil.AfterInsertHook:
		profileQuestionAfterInsertHooks = append(profileQuestionAfterInsertHooks, profileQuestionHook)
	case boil.AfterSelectHook:
		profileQuestionAfterSelectHooks = append(profileQuestionAfterSelectHooks, profileQuestionHook)
	case boil.AfterUpdateHook:
		profileQuestionAfterUpdateHooks = append(profileQuestionAfterUpdateHooks, profileQuestionHook)
	case boil.AfterDeleteHook:
		profileQuestionAfterDeleteHooks = append(profileQuestionAfterDeleteHooks, profileQuestionHook)
	case boil.AfterUpsertHook:
		profileQuestionAfterUpsertHooks = append(profileQuestionAfterUpsertHooks, profileQuestionHook)
	}
}

// OneG returns a single profileQuestion record from the query using the global executor.
func (q profileQuestionQuery) OneG(ctx context.Context) (*ProfileQuestion, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single profileQuestion record from the query.
func (q profileQuestionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProfileQuestion, error) {
	o := &ProfileQuestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for profile_questions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ProfileQuestion records from the query using the global executor.
func (q profileQuestionQuery) AllG(ctx context.Context) (ProfileQuestionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ProfileQuestion records from the query.
func (q profileQuestionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProfileQuestionSlice, error) {
	var o []*ProfileQuestion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProfileQuestion slice")
	}

	if len(profileQuestionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ProfileQuestion records in the query, and panics on error.
func (q profileQuestionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ProfileQuestion records in the query.
func (q profileQuestionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count profile_questions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q profileQuestionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q profileQuestionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if profile_questions exists")
	}

	return count > 0, nil
}

// EventPQMatchScores retrieves all the event_pq_match_score's EventPQMatchScores with an executor.
func (o *ProfileQuestion) EventPQMatchScores(mods ...qm.QueryMod) eventPQMatchScoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"event_pq_match_scores\".\"profile_question_id\"=?", o.ID),
	)

	query := EventPQMatchScores(queryMods...)
	queries.SetFrom(query.Query, "\"event_pq_match_scores\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"event_pq_match_scores\".*"})
	}

	return query
}

// UserProfileQuestions retrieves all the user_profile_question's UserProfileQuestions with an executor.
func (o *ProfileQuestion) UserProfileQuestions(mods ...qm.QueryMod) userProfileQuestionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_profile_questions\".\"profile_question_id\"=?", o.ID),
	)

	query := UserProfileQuestions(queryMods...)
	queries.SetFrom(query.Query, "\"user_profile_questions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_profile_questions\".*"})
	}

	return query
}

// LoadEventPQMatchScores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileQuestionL) LoadEventPQMatchScores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfileQuestion interface{}, mods queries.Applicator) error {
	var slice []*ProfileQuestion
	var object *ProfileQuestion

	if singular {
		object = maybeProfileQuestion.(*ProfileQuestion)
	} else {
		slice = *maybeProfileQuestion.(*[]*ProfileQuestion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileQuestionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileQuestionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`event_pq_match_scores`),
		qm.WhereIn(`event_pq_match_scores.profile_question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load event_pq_match_scores")
	}

	var resultSlice []*EventPQMatchScore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice event_pq_match_scores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on event_pq_match_scores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for event_pq_match_scores")
	}

	if len(eventPQMatchScoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventPQMatchScores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventPQMatchScoreR{}
			}
			foreign.R.ProfileQuestion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProfileQuestionID {
				local.R.EventPQMatchScores = append(local.R.EventPQMatchScores, foreign)
				if foreign.R == nil {
					foreign.R = &eventPQMatchScoreR{}
				}
				foreign.R.ProfileQuestion = local
				break
			}
		}
	}

	return nil
}

// LoadUserProfileQuestions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileQuestionL) LoadUserProfileQuestions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfileQuestion interface{}, mods queries.Applicator) error {
	var slice []*ProfileQuestion
	var object *ProfileQuestion

	if singular {
		object = maybeProfileQuestion.(*ProfileQuestion)
	} else {
		slice = *maybeProfileQuestion.(*[]*ProfileQuestion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileQuestionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileQuestionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_profile_questions`),
		qm.WhereIn(`user_profile_questions.profile_question_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_profile_questions")
	}

	var resultSlice []*UserProfileQuestion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_profile_questions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_profile_questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profile_questions")
	}

	if len(userProfileQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserProfileQuestions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userProfileQuestionR{}
			}
			foreign.R.ProfileQuestion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProfileQuestionID {
				local.R.UserProfileQuestions = append(local.R.UserProfileQuestions, foreign)
				if foreign.R == nil {
					foreign.R = &userProfileQuestionR{}
				}
				foreign.R.ProfileQuestion = local
				break
			}
		}
	}

	return nil
}

// AddEventPQMatchScoresG adds the given related objects to the existing relationships
// of the profile_question, optionally inserting them as new records.
// Appends related to o.R.EventPQMatchScores.
// Sets related.R.ProfileQuestion appropriately.
// Uses the global database handle.
func (o *ProfileQuestion) AddEventPQMatchScoresG(ctx context.Context, insert bool, related ...*EventPQMatchScore) error {
	return o.AddEventPQMatchScores(ctx, boil.GetContextDB(), insert, related...)
}

// AddEventPQMatchScores adds the given related objects to the existing relationships
// of the profile_question, optionally inserting them as new records.
// Appends related to o.R.EventPQMatchScores.
// Sets related.R.ProfileQuestion appropriately.
func (o *ProfileQuestion) AddEventPQMatchScores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EventPQMatchScore) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProfileQuestionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"event_pq_match_scores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"profile_question_id"}),
				strmangle.WhereClause("\"", "\"", 2, eventPQMatchScorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.EventID, rel.ProfileQuestionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProfileQuestionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileQuestionR{
			EventPQMatchScores: related,
		}
	} else {
		o.R.EventPQMatchScores = append(o.R.EventPQMatchScores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventPQMatchScoreR{
				ProfileQuestion: o,
			}
		} else {
			rel.R.ProfileQuestion = o
		}
	}
	return nil
}

// AddUserProfileQuestionsG adds the given related objects to the existing relationships
// of the profile_question, optionally inserting them as new records.
// Appends related to o.R.UserProfileQuestions.
// Sets related.R.ProfileQuestion appropriately.
// Uses the global database handle.
func (o *ProfileQuestion) AddUserProfileQuestionsG(ctx context.Context, insert bool, related ...*UserProfileQuestion) error {
	return o.AddUserProfileQuestions(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserProfileQuestions adds the given related objects to the existing relationships
// of the profile_question, optionally inserting them as new records.
// Appends related to o.R.UserProfileQuestions.
// Sets related.R.ProfileQuestion appropriately.
func (o *ProfileQuestion) AddUserProfileQuestions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserProfileQuestion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProfileQuestionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_profile_questions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"profile_question_id"}),
				strmangle.WhereClause("\"", "\"", 2, userProfileQuestionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.ProfileQuestionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProfileQuestionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileQuestionR{
			UserProfileQuestions: related,
		}
	} else {
		o.R.UserProfileQuestions = append(o.R.UserProfileQuestions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userProfileQuestionR{
				ProfileQuestion: o,
			}
		} else {
			rel.R.ProfileQuestion = o
		}
	}
	return nil
}

// ProfileQuestions retrieves all the records using an executor.
func ProfileQuestions(mods ...qm.QueryMod) profileQuestionQuery {
	mods = append(mods, qm.From("\"profile_questions\""))
	return profileQuestionQuery{NewQuery(mods...)}
}

// FindProfileQuestionG retrieves a single record by ID.
func FindProfileQuestionG(ctx context.Context, iD string, selectCols ...string) (*ProfileQuestion, error) {
	return FindProfileQuestion(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindProfileQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfileQuestion(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProfileQuestion, error) {
	profileQuestionObj := &ProfileQuestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"profile_questions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, profileQuestionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from profile_questions")
	}

	if err = profileQuestionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return profileQuestionObj, err
	}

	return profileQuestionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ProfileQuestion) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProfileQuestion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profile_questions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileQuestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileQuestionInsertCacheMut.RLock()
	cache, cached := profileQuestionInsertCache[key]
	profileQuestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileQuestionAllColumns,
			profileQuestionColumnsWithDefault,
			profileQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileQuestionType, profileQuestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileQuestionType, profileQuestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"profile_questions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"profile_questions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into profile_questions")
	}

	if !cached {
		profileQuestionInsertCacheMut.Lock()
		profileQuestionInsertCache[key] = cache
		profileQuestionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ProfileQuestion record using the global executor.
// See Update for more documentation.
func (o *ProfileQuestion) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ProfileQuestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProfileQuestion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	profileQuestionUpdateCacheMut.RLock()
	cache, cached := profileQuestionUpdateCache[key]
	profileQuestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileQuestionAllColumns,
			profileQuestionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update profile_questions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"profile_questions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, profileQuestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileQuestionType, profileQuestionMapping, append(wl, profileQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update profile_questions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for profile_questions")
	}

	if !cached {
		profileQuestionUpdateCacheMut.Lock()
		profileQuestionUpdateCache[key] = cache
		profileQuestionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q profileQuestionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q profileQuestionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for profile_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for profile_questions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ProfileQuestionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileQuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"profile_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profileQuestionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in profileQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all profileQuestion")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ProfileQuestion) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProfileQuestion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profile_questions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileQuestionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileQuestionUpsertCacheMut.RLock()
	cache, cached := profileQuestionUpsertCache[key]
	profileQuestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			profileQuestionAllColumns,
			profileQuestionColumnsWithDefault,
			profileQuestionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			profileQuestionAllColumns,
			profileQuestionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert profile_questions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(profileQuestionPrimaryKeyColumns))
			copy(conflict, profileQuestionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"profile_questions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(profileQuestionType, profileQuestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileQuestionType, profileQuestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert profile_questions")
	}

	if !cached {
		profileQuestionUpsertCacheMut.Lock()
		profileQuestionUpsertCache[key] = cache
		profileQuestionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ProfileQuestion record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ProfileQuestion) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ProfileQuestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProfileQuestion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProfileQuestion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profileQuestionPrimaryKeyMapping)
	sql := "DELETE FROM \"profile_questions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from profile_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for profile_questions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q profileQuestionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q profileQuestionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no profileQuestionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profile_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profile_questions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ProfileQuestionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileQuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(profileQuestionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"profile_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileQuestionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profileQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profile_questions")
	}

	if len(profileQuestionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ProfileQuestion) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ProfileQuestion provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProfileQuestion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProfileQuestion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileQuestionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ProfileQuestionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileQuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileQuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"profile_questions\".* FROM \"profile_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileQuestionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProfileQuestionSlice")
	}

	*o = slice

	return nil
}

// ProfileQuestionExistsG checks if the ProfileQuestion row exists.
func ProfileQuestionExistsG(ctx context.Context, iD string) (bool, error) {
	return ProfileQuestionExists(ctx, boil.GetContextDB(), iD)
}

// ProfileQuestionExists checks if the ProfileQuestion row exists.
func ProfileQuestionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"profile_questions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if profile_questions exists")
	}

	return exists, nil
}
