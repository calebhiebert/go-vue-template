// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Invite is an object representing the database table.
type Invite struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID       null.String `boil:"event_id" json:"event_id,omitempty" toml:"event_id" yaml:"event_id,omitempty"`
	GroupID       null.String `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`
	SuggestedName null.String `boil:"suggested_name" json:"suggested_name,omitempty" toml:"suggested_name" yaml:"suggested_name,omitempty"`
	Phone         null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	Email         null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *inviteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inviteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InviteColumns = struct {
	ID            string
	EventID       string
	GroupID       string
	SuggestedName string
	Phone         string
	Email         string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	EventID:       "event_id",
	GroupID:       "group_id",
	SuggestedName: "suggested_name",
	Phone:         "phone",
	Email:         "email",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var InviteTableColumns = struct {
	ID            string
	EventID       string
	GroupID       string
	SuggestedName string
	Phone         string
	Email         string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "invites.id",
	EventID:       "invites.event_id",
	GroupID:       "invites.group_id",
	SuggestedName: "invites.suggested_name",
	Phone:         "invites.phone",
	Email:         "invites.email",
	CreatedAt:     "invites.created_at",
	UpdatedAt:     "invites.updated_at",
	DeletedAt:     "invites.deleted_at",
}

// Generated where

var InviteWhere = struct {
	ID            whereHelperstring
	EventID       whereHelpernull_String
	GroupID       whereHelpernull_String
	SuggestedName whereHelpernull_String
	Phone         whereHelpernull_String
	Email         whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"invites\".\"id\""},
	EventID:       whereHelpernull_String{field: "\"invites\".\"event_id\""},
	GroupID:       whereHelpernull_String{field: "\"invites\".\"group_id\""},
	SuggestedName: whereHelpernull_String{field: "\"invites\".\"suggested_name\""},
	Phone:         whereHelpernull_String{field: "\"invites\".\"phone\""},
	Email:         whereHelpernull_String{field: "\"invites\".\"email\""},
	CreatedAt:     whereHelpertime_Time{field: "\"invites\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"invites\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"invites\".\"deleted_at\""},
}

// InviteRels is where relationship names are stored.
var InviteRels = struct {
	Event            string
	Group            string
	InviteShortcodes string
}{
	Event:            "Event",
	Group:            "Group",
	InviteShortcodes: "InviteShortcodes",
}

// inviteR is where relationships are stored.
type inviteR struct {
	Event            *Event               `boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
	Group            *Group               `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	InviteShortcodes InviteShortcodeSlice `boil:"InviteShortcodes" json:"InviteShortcodes" toml:"InviteShortcodes" yaml:"InviteShortcodes"`
}

// NewStruct creates a new relationship struct
func (*inviteR) NewStruct() *inviteR {
	return &inviteR{}
}

// inviteL is where Load methods for each relationship are stored.
type inviteL struct{}

var (
	inviteAllColumns            = []string{"id", "event_id", "group_id", "suggested_name", "phone", "email", "created_at", "updated_at", "deleted_at"}
	inviteColumnsWithoutDefault = []string{"id", "event_id", "group_id", "suggested_name", "phone", "email", "deleted_at"}
	inviteColumnsWithDefault    = []string{"created_at", "updated_at"}
	invitePrimaryKeyColumns     = []string{"id"}
)

type (
	// InviteSlice is an alias for a slice of pointers to Invite.
	// This should almost always be used instead of []Invite.
	InviteSlice []*Invite
	// InviteHook is the signature for custom Invite hook methods
	InviteHook func(context.Context, boil.ContextExecutor, *Invite) error

	inviteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inviteType                 = reflect.TypeOf(&Invite{})
	inviteMapping              = queries.MakeStructMapping(inviteType)
	invitePrimaryKeyMapping, _ = queries.BindMapping(inviteType, inviteMapping, invitePrimaryKeyColumns)
	inviteInsertCacheMut       sync.RWMutex
	inviteInsertCache          = make(map[string]insertCache)
	inviteUpdateCacheMut       sync.RWMutex
	inviteUpdateCache          = make(map[string]updateCache)
	inviteUpsertCacheMut       sync.RWMutex
	inviteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inviteBeforeInsertHooks []InviteHook
var inviteBeforeUpdateHooks []InviteHook
var inviteBeforeDeleteHooks []InviteHook
var inviteBeforeUpsertHooks []InviteHook

var inviteAfterInsertHooks []InviteHook
var inviteAfterSelectHooks []InviteHook
var inviteAfterUpdateHooks []InviteHook
var inviteAfterDeleteHooks []InviteHook
var inviteAfterUpsertHooks []InviteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Invite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Invite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Invite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Invite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Invite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Invite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Invite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Invite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Invite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInviteHook registers your hook function for all future operations.
func AddInviteHook(hookPoint boil.HookPoint, inviteHook InviteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inviteBeforeInsertHooks = append(inviteBeforeInsertHooks, inviteHook)
	case boil.BeforeUpdateHook:
		inviteBeforeUpdateHooks = append(inviteBeforeUpdateHooks, inviteHook)
	case boil.BeforeDeleteHook:
		inviteBeforeDeleteHooks = append(inviteBeforeDeleteHooks, inviteHook)
	case boil.BeforeUpsertHook:
		inviteBeforeUpsertHooks = append(inviteBeforeUpsertHooks, inviteHook)
	case boil.AfterInsertHook:
		inviteAfterInsertHooks = append(inviteAfterInsertHooks, inviteHook)
	case boil.AfterSelectHook:
		inviteAfterSelectHooks = append(inviteAfterSelectHooks, inviteHook)
	case boil.AfterUpdateHook:
		inviteAfterUpdateHooks = append(inviteAfterUpdateHooks, inviteHook)
	case boil.AfterDeleteHook:
		inviteAfterDeleteHooks = append(inviteAfterDeleteHooks, inviteHook)
	case boil.AfterUpsertHook:
		inviteAfterUpsertHooks = append(inviteAfterUpsertHooks, inviteHook)
	}
}

// OneG returns a single invite record from the query using the global executor.
func (q inviteQuery) OneG(ctx context.Context) (*Invite, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single invite record from the query.
func (q inviteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Invite, error) {
	o := &Invite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invites")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Invite records from the query using the global executor.
func (q inviteQuery) AllG(ctx context.Context) (InviteSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Invite records from the query.
func (q inviteQuery) All(ctx context.Context, exec boil.ContextExecutor) (InviteSlice, error) {
	var o []*Invite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Invite slice")
	}

	if len(inviteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Invite records in the query, and panics on error.
func (q inviteQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Invite records in the query.
func (q inviteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invites rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q inviteQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q inviteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invites exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *Invite) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EventID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	return query
}

// Group pointed to by the foreign key.
func (o *Invite) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"groups\"")

	return query
}

// InviteShortcodes retrieves all the invite_shortcode's InviteShortcodes with an executor.
func (o *Invite) InviteShortcodes(mods ...qm.QueryMod) inviteShortcodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invite_shortcodes\".\"invite_id\"=?", o.ID),
	)

	query := InviteShortcodes(queryMods...)
	queries.SetFrom(query.Query, "\"invite_shortcodes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"invite_shortcodes\".*"})
	}

	return query
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inviteL) LoadEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvite interface{}, mods queries.Applicator) error {
	var slice []*Invite
	var object *Invite

	if singular {
		object = maybeInvite.(*Invite)
	} else {
		slice = *maybeInvite.(*[]*Invite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inviteR{}
		}
		if !queries.IsNil(object.EventID) {
			args = append(args, object.EventID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inviteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EventID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EventID) {
				args = append(args, obj.EventID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.id in ?`, args...),
		qmhelper.WhereIsNull(`events.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(inviteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.Invites = append(foreign.R.Invites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EventID, foreign.ID) {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.Invites = append(foreign.R.Invites, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inviteL) LoadGroup(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvite interface{}, mods queries.Applicator) error {
	var slice []*Invite
	var object *Invite

	if singular {
		object = maybeInvite.(*Invite)
	} else {
		slice = *maybeInvite.(*[]*Invite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inviteR{}
		}
		if !queries.IsNil(object.GroupID) {
			args = append(args, object.GroupID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inviteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GroupID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GroupID) {
				args = append(args, obj.GroupID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
		qmhelper.WhereIsNull(`groups.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(inviteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.Invites = append(foreign.R.Invites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GroupID, foreign.ID) {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Invites = append(foreign.R.Invites, local)
				break
			}
		}
	}

	return nil
}

// LoadInviteShortcodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (inviteL) LoadInviteShortcodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvite interface{}, mods queries.Applicator) error {
	var slice []*Invite
	var object *Invite

	if singular {
		object = maybeInvite.(*Invite)
	} else {
		slice = *maybeInvite.(*[]*Invite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inviteR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inviteR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invite_shortcodes`),
		qm.WhereIn(`invite_shortcodes.invite_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invite_shortcodes")
	}

	var resultSlice []*InviteShortcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invite_shortcodes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invite_shortcodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invite_shortcodes")
	}

	if len(inviteShortcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InviteShortcodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inviteShortcodeR{}
			}
			foreign.R.Invite = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.InviteID {
				local.R.InviteShortcodes = append(local.R.InviteShortcodes, foreign)
				if foreign.R == nil {
					foreign.R = &inviteShortcodeR{}
				}
				foreign.R.Invite = local
				break
			}
		}
	}

	return nil
}

// SetEventG of the invite to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.Invites.
// Uses the global database handle.
func (o *Invite) SetEventG(ctx context.Context, insert bool, related *Event) error {
	return o.SetEvent(ctx, boil.GetContextDB(), insert, related)
}

// SetEvent of the invite to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.Invites.
func (o *Invite) SetEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, invitePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EventID, related.ID)
	if o.R == nil {
		o.R = &inviteR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			Invites: InviteSlice{o},
		}
	} else {
		related.R.Invites = append(related.R.Invites, o)
	}

	return nil
}

// RemoveEventG relationship.
// Sets o.R.Event to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Invite) RemoveEventG(ctx context.Context, related *Event) error {
	return o.RemoveEvent(ctx, boil.GetContextDB(), related)
}

// RemoveEvent relationship.
// Sets o.R.Event to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Invite) RemoveEvent(ctx context.Context, exec boil.ContextExecutor, related *Event) error {
	var err error

	queries.SetScanner(&o.EventID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("event_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Event = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Invites {
		if queries.Equal(o.EventID, ri.EventID) {
			continue
		}

		ln := len(related.R.Invites)
		if ln > 1 && i < ln-1 {
			related.R.Invites[i] = related.R.Invites[ln-1]
		}
		related.R.Invites = related.R.Invites[:ln-1]
		break
	}
	return nil
}

// SetGroupG of the invite to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.Invites.
// Uses the global database handle.
func (o *Invite) SetGroupG(ctx context.Context, insert bool, related *Group) error {
	return o.SetGroup(ctx, boil.GetContextDB(), insert, related)
}

// SetGroup of the invite to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.Invites.
func (o *Invite) SetGroup(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, invitePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GroupID, related.ID)
	if o.R == nil {
		o.R = &inviteR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			Invites: InviteSlice{o},
		}
	} else {
		related.R.Invites = append(related.R.Invites, o)
	}

	return nil
}

// RemoveGroupG relationship.
// Sets o.R.Group to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Invite) RemoveGroupG(ctx context.Context, related *Group) error {
	return o.RemoveGroup(ctx, boil.GetContextDB(), related)
}

// RemoveGroup relationship.
// Sets o.R.Group to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Invite) RemoveGroup(ctx context.Context, exec boil.ContextExecutor, related *Group) error {
	var err error

	queries.SetScanner(&o.GroupID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("group_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Group = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Invites {
		if queries.Equal(o.GroupID, ri.GroupID) {
			continue
		}

		ln := len(related.R.Invites)
		if ln > 1 && i < ln-1 {
			related.R.Invites[i] = related.R.Invites[ln-1]
		}
		related.R.Invites = related.R.Invites[:ln-1]
		break
	}
	return nil
}

// AddInviteShortcodesG adds the given related objects to the existing relationships
// of the invite, optionally inserting them as new records.
// Appends related to o.R.InviteShortcodes.
// Sets related.R.Invite appropriately.
// Uses the global database handle.
func (o *Invite) AddInviteShortcodesG(ctx context.Context, insert bool, related ...*InviteShortcode) error {
	return o.AddInviteShortcodes(ctx, boil.GetContextDB(), insert, related...)
}

// AddInviteShortcodes adds the given related objects to the existing relationships
// of the invite, optionally inserting them as new records.
// Appends related to o.R.InviteShortcodes.
// Sets related.R.Invite appropriately.
func (o *Invite) AddInviteShortcodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InviteShortcode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InviteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invite_shortcodes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"invite_id"}),
				strmangle.WhereClause("\"", "\"", 2, inviteShortcodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InviteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &inviteR{
			InviteShortcodes: related,
		}
	} else {
		o.R.InviteShortcodes = append(o.R.InviteShortcodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inviteShortcodeR{
				Invite: o,
			}
		} else {
			rel.R.Invite = o
		}
	}
	return nil
}

// Invites retrieves all the records using an executor.
func Invites(mods ...qm.QueryMod) inviteQuery {
	mods = append(mods, qm.From("\"invites\""), qmhelper.WhereIsNull("\"invites\".\"deleted_at\""))
	return inviteQuery{NewQuery(mods...)}
}

// FindInviteG retrieves a single record by ID.
func FindInviteG(ctx context.Context, iD string, selectCols ...string) (*Invite, error) {
	return FindInvite(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindInvite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvite(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Invite, error) {
	inviteObj := &Invite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invites\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inviteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invites")
	}

	if err = inviteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inviteObj, err
	}

	return inviteObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Invite) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Invite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invites provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inviteInsertCacheMut.RLock()
	cache, cached := inviteInsertCache[key]
	inviteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inviteAllColumns,
			inviteColumnsWithDefault,
			inviteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inviteType, inviteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inviteType, inviteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invites\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invites\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invites")
	}

	if !cached {
		inviteInsertCacheMut.Lock()
		inviteInsertCache[key] = cache
		inviteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Invite record using the global executor.
// See Update for more documentation.
func (o *Invite) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Invite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Invite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inviteUpdateCacheMut.RLock()
	cache, cached := inviteUpdateCache[key]
	inviteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inviteAllColumns,
			invitePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invites, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invites\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invitePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inviteType, inviteMapping, append(wl, invitePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invites row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invites")
	}

	if !cached {
		inviteUpdateCacheMut.Lock()
		inviteUpdateCache[key] = cache
		inviteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q inviteQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q inviteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invites")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InviteSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InviteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invites\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invitePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invite")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Invite) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Invite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invites provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inviteUpsertCacheMut.RLock()
	cache, cached := inviteUpsertCache[key]
	inviteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inviteAllColumns,
			inviteColumnsWithDefault,
			inviteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inviteAllColumns,
			invitePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invites, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(invitePrimaryKeyColumns))
			copy(conflict, invitePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invites\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(inviteType, inviteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inviteType, inviteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invites")
	}

	if !cached {
		inviteUpsertCacheMut.Lock()
		inviteUpsertCache[key] = cache
		inviteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Invite record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Invite) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single Invite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Invite) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Invite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invitePrimaryKeyMapping)
		sql = "DELETE FROM \"invites\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"invites\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(inviteType, inviteMapping, append(wl, invitePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invites")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q inviteQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q inviteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inviteQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invites")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invites")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o InviteSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InviteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inviteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"invites\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invitePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"invites\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, invitePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invites")
	}

	if len(inviteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Invite) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Invite provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Invite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvite(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InviteSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty InviteSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InviteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InviteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invites\".* FROM \"invites\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invitePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InviteSlice")
	}

	*o = slice

	return nil
}

// InviteExistsG checks if the Invite row exists.
func InviteExistsG(ctx context.Context, iD string) (bool, error) {
	return InviteExists(ctx, boil.GetContextDB(), iD)
}

// InviteExists checks if the Invite row exists.
func InviteExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invites\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invites exists")
	}

	return exists, nil
}
