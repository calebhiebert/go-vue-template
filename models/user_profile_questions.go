// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserProfileQuestion is an object representing the database table.
type UserProfileQuestion struct {
	UserID            string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProfileQuestionID string      `boil:"profile_question_id" json:"profile_question_id" toml:"profile_question_id" yaml:"profile_question_id"`
	ANumber           null.Int    `boil:"a_number" json:"a_number,omitempty" toml:"a_number" yaml:"a_number,omitempty"`
	ARating           null.Int    `boil:"a_rating" json:"a_rating,omitempty" toml:"a_rating" yaml:"a_rating,omitempty"`
	ADays             null.String `boil:"a_days" json:"a_days,omitempty" toml:"a_days" yaml:"a_days,omitempty"`
	AText             null.String `boil:"a_text" json:"a_text,omitempty" toml:"a_text" yaml:"a_text,omitempty"`

	R *userProfileQuestionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userProfileQuestionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserProfileQuestionColumns = struct {
	UserID            string
	ProfileQuestionID string
	ANumber           string
	ARating           string
	ADays             string
	AText             string
}{
	UserID:            "user_id",
	ProfileQuestionID: "profile_question_id",
	ANumber:           "a_number",
	ARating:           "a_rating",
	ADays:             "a_days",
	AText:             "a_text",
}

var UserProfileQuestionTableColumns = struct {
	UserID            string
	ProfileQuestionID string
	ANumber           string
	ARating           string
	ADays             string
	AText             string
}{
	UserID:            "user_profile_questions.user_id",
	ProfileQuestionID: "user_profile_questions.profile_question_id",
	ANumber:           "user_profile_questions.a_number",
	ARating:           "user_profile_questions.a_rating",
	ADays:             "user_profile_questions.a_days",
	AText:             "user_profile_questions.a_text",
}

// Generated where

var UserProfileQuestionWhere = struct {
	UserID            whereHelperstring
	ProfileQuestionID whereHelperstring
	ANumber           whereHelpernull_Int
	ARating           whereHelpernull_Int
	ADays             whereHelpernull_String
	AText             whereHelpernull_String
}{
	UserID:            whereHelperstring{field: "\"user_profile_questions\".\"user_id\""},
	ProfileQuestionID: whereHelperstring{field: "\"user_profile_questions\".\"profile_question_id\""},
	ANumber:           whereHelpernull_Int{field: "\"user_profile_questions\".\"a_number\""},
	ARating:           whereHelpernull_Int{field: "\"user_profile_questions\".\"a_rating\""},
	ADays:             whereHelpernull_String{field: "\"user_profile_questions\".\"a_days\""},
	AText:             whereHelpernull_String{field: "\"user_profile_questions\".\"a_text\""},
}

// UserProfileQuestionRels is where relationship names are stored.
var UserProfileQuestionRels = struct {
	ProfileQuestion string
	User            string
}{
	ProfileQuestion: "ProfileQuestion",
	User:            "User",
}

// userProfileQuestionR is where relationships are stored.
type userProfileQuestionR struct {
	ProfileQuestion *ProfileQuestion `boil:"ProfileQuestion" json:"ProfileQuestion" toml:"ProfileQuestion" yaml:"ProfileQuestion"`
	User            *User            `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userProfileQuestionR) NewStruct() *userProfileQuestionR {
	return &userProfileQuestionR{}
}

// userProfileQuestionL is where Load methods for each relationship are stored.
type userProfileQuestionL struct{}

var (
	userProfileQuestionAllColumns            = []string{"user_id", "profile_question_id", "a_number", "a_rating", "a_days", "a_text"}
	userProfileQuestionColumnsWithoutDefault = []string{"user_id", "profile_question_id", "a_number", "a_rating", "a_days", "a_text"}
	userProfileQuestionColumnsWithDefault    = []string{}
	userProfileQuestionPrimaryKeyColumns     = []string{"user_id", "profile_question_id"}
)

type (
	// UserProfileQuestionSlice is an alias for a slice of pointers to UserProfileQuestion.
	// This should almost always be used instead of []UserProfileQuestion.
	UserProfileQuestionSlice []*UserProfileQuestion
	// UserProfileQuestionHook is the signature for custom UserProfileQuestion hook methods
	UserProfileQuestionHook func(context.Context, boil.ContextExecutor, *UserProfileQuestion) error

	userProfileQuestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userProfileQuestionType                 = reflect.TypeOf(&UserProfileQuestion{})
	userProfileQuestionMapping              = queries.MakeStructMapping(userProfileQuestionType)
	userProfileQuestionPrimaryKeyMapping, _ = queries.BindMapping(userProfileQuestionType, userProfileQuestionMapping, userProfileQuestionPrimaryKeyColumns)
	userProfileQuestionInsertCacheMut       sync.RWMutex
	userProfileQuestionInsertCache          = make(map[string]insertCache)
	userProfileQuestionUpdateCacheMut       sync.RWMutex
	userProfileQuestionUpdateCache          = make(map[string]updateCache)
	userProfileQuestionUpsertCacheMut       sync.RWMutex
	userProfileQuestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userProfileQuestionBeforeInsertHooks []UserProfileQuestionHook
var userProfileQuestionBeforeUpdateHooks []UserProfileQuestionHook
var userProfileQuestionBeforeDeleteHooks []UserProfileQuestionHook
var userProfileQuestionBeforeUpsertHooks []UserProfileQuestionHook

var userProfileQuestionAfterInsertHooks []UserProfileQuestionHook
var userProfileQuestionAfterSelectHooks []UserProfileQuestionHook
var userProfileQuestionAfterUpdateHooks []UserProfileQuestionHook
var userProfileQuestionAfterDeleteHooks []UserProfileQuestionHook
var userProfileQuestionAfterUpsertHooks []UserProfileQuestionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserProfileQuestion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserProfileQuestion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserProfileQuestion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserProfileQuestion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserProfileQuestion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserProfileQuestion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserProfileQuestion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserProfileQuestion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserProfileQuestion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileQuestionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserProfileQuestionHook registers your hook function for all future operations.
func AddUserProfileQuestionHook(hookPoint boil.HookPoint, userProfileQuestionHook UserProfileQuestionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userProfileQuestionBeforeInsertHooks = append(userProfileQuestionBeforeInsertHooks, userProfileQuestionHook)
	case boil.BeforeUpdateHook:
		userProfileQuestionBeforeUpdateHooks = append(userProfileQuestionBeforeUpdateHooks, userProfileQuestionHook)
	case boil.BeforeDeleteHook:
		userProfileQuestionBeforeDeleteHooks = append(userProfileQuestionBeforeDeleteHooks, userProfileQuestionHook)
	case boil.BeforeUpsertHook:
		userProfileQuestionBeforeUpsertHooks = append(userProfileQuestionBeforeUpsertHooks, userProfileQuestionHook)
	case boil.AfterInsertHook:
		userProfileQuestionAfterInsertHooks = append(userProfileQuestionAfterInsertHooks, userProfileQuestionHook)
	case boil.AfterSelectHook:
		userProfileQuestionAfterSelectHooks = append(userProfileQuestionAfterSelectHooks, userProfileQuestionHook)
	case boil.AfterUpdateHook:
		userProfileQuestionAfterUpdateHooks = append(userProfileQuestionAfterUpdateHooks, userProfileQuestionHook)
	case boil.AfterDeleteHook:
		userProfileQuestionAfterDeleteHooks = append(userProfileQuestionAfterDeleteHooks, userProfileQuestionHook)
	case boil.AfterUpsertHook:
		userProfileQuestionAfterUpsertHooks = append(userProfileQuestionAfterUpsertHooks, userProfileQuestionHook)
	}
}

// OneG returns a single userProfileQuestion record from the query using the global executor.
func (q userProfileQuestionQuery) OneG(ctx context.Context) (*UserProfileQuestion, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userProfileQuestion record from the query.
func (q userProfileQuestionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserProfileQuestion, error) {
	o := &UserProfileQuestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_profile_questions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserProfileQuestion records from the query using the global executor.
func (q userProfileQuestionQuery) AllG(ctx context.Context) (UserProfileQuestionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserProfileQuestion records from the query.
func (q userProfileQuestionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserProfileQuestionSlice, error) {
	var o []*UserProfileQuestion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserProfileQuestion slice")
	}

	if len(userProfileQuestionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserProfileQuestion records in the query, and panics on error.
func (q userProfileQuestionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserProfileQuestion records in the query.
func (q userProfileQuestionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_profile_questions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userProfileQuestionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userProfileQuestionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_profile_questions exists")
	}

	return count > 0, nil
}

// ProfileQuestion pointed to by the foreign key.
func (o *UserProfileQuestion) ProfileQuestion(mods ...qm.QueryMod) profileQuestionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProfileQuestionID),
	}

	queryMods = append(queryMods, mods...)

	query := ProfileQuestions(queryMods...)
	queries.SetFrom(query.Query, "\"profile_questions\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserProfileQuestion) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadProfileQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userProfileQuestionL) LoadProfileQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserProfileQuestion interface{}, mods queries.Applicator) error {
	var slice []*UserProfileQuestion
	var object *UserProfileQuestion

	if singular {
		object = maybeUserProfileQuestion.(*UserProfileQuestion)
	} else {
		slice = *maybeUserProfileQuestion.(*[]*UserProfileQuestion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileQuestionR{}
		}
		args = append(args, object.ProfileQuestionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileQuestionR{}
			}

			for _, a := range args {
				if a == obj.ProfileQuestionID {
					continue Outer
				}
			}

			args = append(args, obj.ProfileQuestionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_questions`),
		qm.WhereIn(`profile_questions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProfileQuestion")
	}

	var resultSlice []*ProfileQuestion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProfileQuestion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profile_questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_questions")
	}

	if len(userProfileQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProfileQuestion = foreign
		if foreign.R == nil {
			foreign.R = &profileQuestionR{}
		}
		foreign.R.UserProfileQuestions = append(foreign.R.UserProfileQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProfileQuestionID == foreign.ID {
				local.R.ProfileQuestion = foreign
				if foreign.R == nil {
					foreign.R = &profileQuestionR{}
				}
				foreign.R.UserProfileQuestions = append(foreign.R.UserProfileQuestions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userProfileQuestionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserProfileQuestion interface{}, mods queries.Applicator) error {
	var slice []*UserProfileQuestion
	var object *UserProfileQuestion

	if singular {
		object = maybeUserProfileQuestion.(*UserProfileQuestion)
	} else {
		slice = *maybeUserProfileQuestion.(*[]*UserProfileQuestion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileQuestionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileQuestionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userProfileQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserProfileQuestions = append(foreign.R.UserProfileQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserProfileQuestions = append(foreign.R.UserProfileQuestions, local)
				break
			}
		}
	}

	return nil
}

// SetProfileQuestionG of the userProfileQuestion to the related item.
// Sets o.R.ProfileQuestion to related.
// Adds o to related.R.UserProfileQuestions.
// Uses the global database handle.
func (o *UserProfileQuestion) SetProfileQuestionG(ctx context.Context, insert bool, related *ProfileQuestion) error {
	return o.SetProfileQuestion(ctx, boil.GetContextDB(), insert, related)
}

// SetProfileQuestion of the userProfileQuestion to the related item.
// Sets o.R.ProfileQuestion to related.
// Adds o to related.R.UserProfileQuestions.
func (o *UserProfileQuestion) SetProfileQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProfileQuestion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_profile_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"profile_question_id"}),
		strmangle.WhereClause("\"", "\"", 2, userProfileQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ProfileQuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProfileQuestionID = related.ID
	if o.R == nil {
		o.R = &userProfileQuestionR{
			ProfileQuestion: related,
		}
	} else {
		o.R.ProfileQuestion = related
	}

	if related.R == nil {
		related.R = &profileQuestionR{
			UserProfileQuestions: UserProfileQuestionSlice{o},
		}
	} else {
		related.R.UserProfileQuestions = append(related.R.UserProfileQuestions, o)
	}

	return nil
}

// SetUserG of the userProfileQuestion to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserProfileQuestions.
// Uses the global database handle.
func (o *UserProfileQuestion) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the userProfileQuestion to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserProfileQuestions.
func (o *UserProfileQuestion) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_profile_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userProfileQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ProfileQuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userProfileQuestionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserProfileQuestions: UserProfileQuestionSlice{o},
		}
	} else {
		related.R.UserProfileQuestions = append(related.R.UserProfileQuestions, o)
	}

	return nil
}

// UserProfileQuestions retrieves all the records using an executor.
func UserProfileQuestions(mods ...qm.QueryMod) userProfileQuestionQuery {
	mods = append(mods, qm.From("\"user_profile_questions\""))
	return userProfileQuestionQuery{NewQuery(mods...)}
}

// FindUserProfileQuestionG retrieves a single record by ID.
func FindUserProfileQuestionG(ctx context.Context, userID string, profileQuestionID string, selectCols ...string) (*UserProfileQuestion, error) {
	return FindUserProfileQuestion(ctx, boil.GetContextDB(), userID, profileQuestionID, selectCols...)
}

// FindUserProfileQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserProfileQuestion(ctx context.Context, exec boil.ContextExecutor, userID string, profileQuestionID string, selectCols ...string) (*UserProfileQuestion, error) {
	userProfileQuestionObj := &UserProfileQuestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_profile_questions\" where \"user_id\"=$1 AND \"profile_question_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, profileQuestionID)

	err := q.Bind(ctx, exec, userProfileQuestionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_profile_questions")
	}

	if err = userProfileQuestionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userProfileQuestionObj, err
	}

	return userProfileQuestionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserProfileQuestion) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserProfileQuestion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_profile_questions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileQuestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userProfileQuestionInsertCacheMut.RLock()
	cache, cached := userProfileQuestionInsertCache[key]
	userProfileQuestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userProfileQuestionAllColumns,
			userProfileQuestionColumnsWithDefault,
			userProfileQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userProfileQuestionType, userProfileQuestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userProfileQuestionType, userProfileQuestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_profile_questions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_profile_questions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_profile_questions")
	}

	if !cached {
		userProfileQuestionInsertCacheMut.Lock()
		userProfileQuestionInsertCache[key] = cache
		userProfileQuestionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserProfileQuestion record using the global executor.
// See Update for more documentation.
func (o *UserProfileQuestion) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserProfileQuestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserProfileQuestion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userProfileQuestionUpdateCacheMut.RLock()
	cache, cached := userProfileQuestionUpdateCache[key]
	userProfileQuestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userProfileQuestionAllColumns,
			userProfileQuestionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_profile_questions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_profile_questions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userProfileQuestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userProfileQuestionType, userProfileQuestionMapping, append(wl, userProfileQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_profile_questions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_profile_questions")
	}

	if !cached {
		userProfileQuestionUpdateCacheMut.Lock()
		userProfileQuestionUpdateCache[key] = cache
		userProfileQuestionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userProfileQuestionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userProfileQuestionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_profile_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_profile_questions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserProfileQuestionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserProfileQuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfileQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_profile_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userProfileQuestionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userProfileQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userProfileQuestion")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserProfileQuestion) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserProfileQuestion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_profile_questions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileQuestionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userProfileQuestionUpsertCacheMut.RLock()
	cache, cached := userProfileQuestionUpsertCache[key]
	userProfileQuestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userProfileQuestionAllColumns,
			userProfileQuestionColumnsWithDefault,
			userProfileQuestionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userProfileQuestionAllColumns,
			userProfileQuestionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_profile_questions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userProfileQuestionPrimaryKeyColumns))
			copy(conflict, userProfileQuestionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_profile_questions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userProfileQuestionType, userProfileQuestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userProfileQuestionType, userProfileQuestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_profile_questions")
	}

	if !cached {
		userProfileQuestionUpsertCacheMut.Lock()
		userProfileQuestionUpsertCache[key] = cache
		userProfileQuestionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserProfileQuestion record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserProfileQuestion) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UserProfileQuestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserProfileQuestion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserProfileQuestion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userProfileQuestionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_profile_questions\" WHERE \"user_id\"=$1 AND \"profile_question_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_profile_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_profile_questions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userProfileQuestionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q userProfileQuestionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userProfileQuestionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_profile_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_profile_questions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserProfileQuestionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserProfileQuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userProfileQuestionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfileQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_profile_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfileQuestionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userProfileQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_profile_questions")
	}

	if len(userProfileQuestionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserProfileQuestion) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserProfileQuestion provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserProfileQuestion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserProfileQuestion(ctx, exec, o.UserID, o.ProfileQuestionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileQuestionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserProfileQuestionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileQuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserProfileQuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfileQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_profile_questions\".* FROM \"user_profile_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfileQuestionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserProfileQuestionSlice")
	}

	*o = slice

	return nil
}

// UserProfileQuestionExistsG checks if the UserProfileQuestion row exists.
func UserProfileQuestionExistsG(ctx context.Context, userID string, profileQuestionID string) (bool, error) {
	return UserProfileQuestionExists(ctx, boil.GetContextDB(), userID, profileQuestionID)
}

// UserProfileQuestionExists checks if the UserProfileQuestion row exists.
func UserProfileQuestionExists(ctx context.Context, exec boil.ContextExecutor, userID string, profileQuestionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_profile_questions\" where \"user_id\"=$1 AND \"profile_question_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, profileQuestionID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, profileQuestionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_profile_questions exists")
	}

	return exists, nil
}
