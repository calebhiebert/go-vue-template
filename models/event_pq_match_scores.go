// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EventPQMatchScore is an object representing the database table.
type EventPQMatchScore struct {
	EventID           string       `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	ProfileQuestionID string       `boil:"profile_question_id" json:"profile_question_id" toml:"profile_question_id" yaml:"profile_question_id"`
	RatingAvg         null.Int     `boil:"rating_avg" json:"rating_avg,omitempty" toml:"rating_avg" yaml:"rating_avg,omitempty"`
	NumAvg            null.Float64 `boil:"num_avg" json:"num_avg,omitempty" toml:"num_avg" yaml:"num_avg,omitempty"`

	R *eventPQMatchScoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventPQMatchScoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventPQMatchScoreColumns = struct {
	EventID           string
	ProfileQuestionID string
	RatingAvg         string
	NumAvg            string
}{
	EventID:           "event_id",
	ProfileQuestionID: "profile_question_id",
	RatingAvg:         "rating_avg",
	NumAvg:            "num_avg",
}

var EventPQMatchScoreTableColumns = struct {
	EventID           string
	ProfileQuestionID string
	RatingAvg         string
	NumAvg            string
}{
	EventID:           "event_pq_match_scores.event_id",
	ProfileQuestionID: "event_pq_match_scores.profile_question_id",
	RatingAvg:         "event_pq_match_scores.rating_avg",
	NumAvg:            "event_pq_match_scores.num_avg",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var EventPQMatchScoreWhere = struct {
	EventID           whereHelperstring
	ProfileQuestionID whereHelperstring
	RatingAvg         whereHelpernull_Int
	NumAvg            whereHelpernull_Float64
}{
	EventID:           whereHelperstring{field: "\"event_pq_match_scores\".\"event_id\""},
	ProfileQuestionID: whereHelperstring{field: "\"event_pq_match_scores\".\"profile_question_id\""},
	RatingAvg:         whereHelpernull_Int{field: "\"event_pq_match_scores\".\"rating_avg\""},
	NumAvg:            whereHelpernull_Float64{field: "\"event_pq_match_scores\".\"num_avg\""},
}

// EventPQMatchScoreRels is where relationship names are stored.
var EventPQMatchScoreRels = struct {
	Event           string
	ProfileQuestion string
}{
	Event:           "Event",
	ProfileQuestion: "ProfileQuestion",
}

// eventPQMatchScoreR is where relationships are stored.
type eventPQMatchScoreR struct {
	Event           *Event           `boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
	ProfileQuestion *ProfileQuestion `boil:"ProfileQuestion" json:"ProfileQuestion" toml:"ProfileQuestion" yaml:"ProfileQuestion"`
}

// NewStruct creates a new relationship struct
func (*eventPQMatchScoreR) NewStruct() *eventPQMatchScoreR {
	return &eventPQMatchScoreR{}
}

// eventPQMatchScoreL is where Load methods for each relationship are stored.
type eventPQMatchScoreL struct{}

var (
	eventPQMatchScoreAllColumns            = []string{"event_id", "profile_question_id", "rating_avg", "num_avg"}
	eventPQMatchScoreColumnsWithoutDefault = []string{"event_id", "profile_question_id", "rating_avg", "num_avg"}
	eventPQMatchScoreColumnsWithDefault    = []string{}
	eventPQMatchScorePrimaryKeyColumns     = []string{"event_id", "profile_question_id"}
)

type (
	// EventPQMatchScoreSlice is an alias for a slice of pointers to EventPQMatchScore.
	// This should almost always be used instead of []EventPQMatchScore.
	EventPQMatchScoreSlice []*EventPQMatchScore
	// EventPQMatchScoreHook is the signature for custom EventPQMatchScore hook methods
	EventPQMatchScoreHook func(context.Context, boil.ContextExecutor, *EventPQMatchScore) error

	eventPQMatchScoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventPQMatchScoreType                 = reflect.TypeOf(&EventPQMatchScore{})
	eventPQMatchScoreMapping              = queries.MakeStructMapping(eventPQMatchScoreType)
	eventPQMatchScorePrimaryKeyMapping, _ = queries.BindMapping(eventPQMatchScoreType, eventPQMatchScoreMapping, eventPQMatchScorePrimaryKeyColumns)
	eventPQMatchScoreInsertCacheMut       sync.RWMutex
	eventPQMatchScoreInsertCache          = make(map[string]insertCache)
	eventPQMatchScoreUpdateCacheMut       sync.RWMutex
	eventPQMatchScoreUpdateCache          = make(map[string]updateCache)
	eventPQMatchScoreUpsertCacheMut       sync.RWMutex
	eventPQMatchScoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventPQMatchScoreBeforeInsertHooks []EventPQMatchScoreHook
var eventPQMatchScoreBeforeUpdateHooks []EventPQMatchScoreHook
var eventPQMatchScoreBeforeDeleteHooks []EventPQMatchScoreHook
var eventPQMatchScoreBeforeUpsertHooks []EventPQMatchScoreHook

var eventPQMatchScoreAfterInsertHooks []EventPQMatchScoreHook
var eventPQMatchScoreAfterSelectHooks []EventPQMatchScoreHook
var eventPQMatchScoreAfterUpdateHooks []EventPQMatchScoreHook
var eventPQMatchScoreAfterDeleteHooks []EventPQMatchScoreHook
var eventPQMatchScoreAfterUpsertHooks []EventPQMatchScoreHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventPQMatchScore) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventPQMatchScore) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventPQMatchScore) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventPQMatchScore) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventPQMatchScore) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventPQMatchScore) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventPQMatchScore) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventPQMatchScore) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventPQMatchScore) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventPQMatchScoreAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventPQMatchScoreHook registers your hook function for all future operations.
func AddEventPQMatchScoreHook(hookPoint boil.HookPoint, eventPQMatchScoreHook EventPQMatchScoreHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		eventPQMatchScoreBeforeInsertHooks = append(eventPQMatchScoreBeforeInsertHooks, eventPQMatchScoreHook)
	case boil.BeforeUpdateHook:
		eventPQMatchScoreBeforeUpdateHooks = append(eventPQMatchScoreBeforeUpdateHooks, eventPQMatchScoreHook)
	case boil.BeforeDeleteHook:
		eventPQMatchScoreBeforeDeleteHooks = append(eventPQMatchScoreBeforeDeleteHooks, eventPQMatchScoreHook)
	case boil.BeforeUpsertHook:
		eventPQMatchScoreBeforeUpsertHooks = append(eventPQMatchScoreBeforeUpsertHooks, eventPQMatchScoreHook)
	case boil.AfterInsertHook:
		eventPQMatchScoreAfterInsertHooks = append(eventPQMatchScoreAfterInsertHooks, eventPQMatchScoreHook)
	case boil.AfterSelectHook:
		eventPQMatchScoreAfterSelectHooks = append(eventPQMatchScoreAfterSelectHooks, eventPQMatchScoreHook)
	case boil.AfterUpdateHook:
		eventPQMatchScoreAfterUpdateHooks = append(eventPQMatchScoreAfterUpdateHooks, eventPQMatchScoreHook)
	case boil.AfterDeleteHook:
		eventPQMatchScoreAfterDeleteHooks = append(eventPQMatchScoreAfterDeleteHooks, eventPQMatchScoreHook)
	case boil.AfterUpsertHook:
		eventPQMatchScoreAfterUpsertHooks = append(eventPQMatchScoreAfterUpsertHooks, eventPQMatchScoreHook)
	}
}

// OneG returns a single eventPQMatchScore record from the query using the global executor.
func (q eventPQMatchScoreQuery) OneG(ctx context.Context) (*EventPQMatchScore, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single eventPQMatchScore record from the query.
func (q eventPQMatchScoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventPQMatchScore, error) {
	o := &EventPQMatchScore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_pq_match_scores")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all EventPQMatchScore records from the query using the global executor.
func (q eventPQMatchScoreQuery) AllG(ctx context.Context) (EventPQMatchScoreSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all EventPQMatchScore records from the query.
func (q eventPQMatchScoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventPQMatchScoreSlice, error) {
	var o []*EventPQMatchScore

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventPQMatchScore slice")
	}

	if len(eventPQMatchScoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all EventPQMatchScore records in the query, and panics on error.
func (q eventPQMatchScoreQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all EventPQMatchScore records in the query.
func (q eventPQMatchScoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_pq_match_scores rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q eventPQMatchScoreQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q eventPQMatchScoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_pq_match_scores exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *EventPQMatchScore) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EventID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	return query
}

// ProfileQuestion pointed to by the foreign key.
func (o *EventPQMatchScore) ProfileQuestion(mods ...qm.QueryMod) profileQuestionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProfileQuestionID),
	}

	queryMods = append(queryMods, mods...)

	query := ProfileQuestions(queryMods...)
	queries.SetFrom(query.Query, "\"profile_questions\"")

	return query
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventPQMatchScoreL) LoadEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventPQMatchScore interface{}, mods queries.Applicator) error {
	var slice []*EventPQMatchScore
	var object *EventPQMatchScore

	if singular {
		object = maybeEventPQMatchScore.(*EventPQMatchScore)
	} else {
		slice = *maybeEventPQMatchScore.(*[]*EventPQMatchScore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventPQMatchScoreR{}
		}
		args = append(args, object.EventID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventPQMatchScoreR{}
			}

			for _, a := range args {
				if a == obj.EventID {
					continue Outer
				}
			}

			args = append(args, obj.EventID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.id in ?`, args...),
		qmhelper.WhereIsNull(`events.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventPQMatchScoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.EventPQMatchScores = append(foreign.R.EventPQMatchScores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.EventPQMatchScores = append(foreign.R.EventPQMatchScores, local)
				break
			}
		}
	}

	return nil
}

// LoadProfileQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventPQMatchScoreL) LoadProfileQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventPQMatchScore interface{}, mods queries.Applicator) error {
	var slice []*EventPQMatchScore
	var object *EventPQMatchScore

	if singular {
		object = maybeEventPQMatchScore.(*EventPQMatchScore)
	} else {
		slice = *maybeEventPQMatchScore.(*[]*EventPQMatchScore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventPQMatchScoreR{}
		}
		args = append(args, object.ProfileQuestionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventPQMatchScoreR{}
			}

			for _, a := range args {
				if a == obj.ProfileQuestionID {
					continue Outer
				}
			}

			args = append(args, obj.ProfileQuestionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_questions`),
		qm.WhereIn(`profile_questions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProfileQuestion")
	}

	var resultSlice []*ProfileQuestion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProfileQuestion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profile_questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_questions")
	}

	if len(eventPQMatchScoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProfileQuestion = foreign
		if foreign.R == nil {
			foreign.R = &profileQuestionR{}
		}
		foreign.R.EventPQMatchScores = append(foreign.R.EventPQMatchScores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProfileQuestionID == foreign.ID {
				local.R.ProfileQuestion = foreign
				if foreign.R == nil {
					foreign.R = &profileQuestionR{}
				}
				foreign.R.EventPQMatchScores = append(foreign.R.EventPQMatchScores, local)
				break
			}
		}
	}

	return nil
}

// SetEventG of the eventPQMatchScore to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventPQMatchScores.
// Uses the global database handle.
func (o *EventPQMatchScore) SetEventG(ctx context.Context, insert bool, related *Event) error {
	return o.SetEvent(ctx, boil.GetContextDB(), insert, related)
}

// SetEvent of the eventPQMatchScore to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventPQMatchScores.
func (o *EventPQMatchScore) SetEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_pq_match_scores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventPQMatchScorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.EventID, o.ProfileQuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &eventPQMatchScoreR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			EventPQMatchScores: EventPQMatchScoreSlice{o},
		}
	} else {
		related.R.EventPQMatchScores = append(related.R.EventPQMatchScores, o)
	}

	return nil
}

// SetProfileQuestionG of the eventPQMatchScore to the related item.
// Sets o.R.ProfileQuestion to related.
// Adds o to related.R.EventPQMatchScores.
// Uses the global database handle.
func (o *EventPQMatchScore) SetProfileQuestionG(ctx context.Context, insert bool, related *ProfileQuestion) error {
	return o.SetProfileQuestion(ctx, boil.GetContextDB(), insert, related)
}

// SetProfileQuestion of the eventPQMatchScore to the related item.
// Sets o.R.ProfileQuestion to related.
// Adds o to related.R.EventPQMatchScores.
func (o *EventPQMatchScore) SetProfileQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProfileQuestion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_pq_match_scores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"profile_question_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventPQMatchScorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.EventID, o.ProfileQuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProfileQuestionID = related.ID
	if o.R == nil {
		o.R = &eventPQMatchScoreR{
			ProfileQuestion: related,
		}
	} else {
		o.R.ProfileQuestion = related
	}

	if related.R == nil {
		related.R = &profileQuestionR{
			EventPQMatchScores: EventPQMatchScoreSlice{o},
		}
	} else {
		related.R.EventPQMatchScores = append(related.R.EventPQMatchScores, o)
	}

	return nil
}

// EventPQMatchScores retrieves all the records using an executor.
func EventPQMatchScores(mods ...qm.QueryMod) eventPQMatchScoreQuery {
	mods = append(mods, qm.From("\"event_pq_match_scores\""))
	return eventPQMatchScoreQuery{NewQuery(mods...)}
}

// FindEventPQMatchScoreG retrieves a single record by ID.
func FindEventPQMatchScoreG(ctx context.Context, eventID string, profileQuestionID string, selectCols ...string) (*EventPQMatchScore, error) {
	return FindEventPQMatchScore(ctx, boil.GetContextDB(), eventID, profileQuestionID, selectCols...)
}

// FindEventPQMatchScore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventPQMatchScore(ctx context.Context, exec boil.ContextExecutor, eventID string, profileQuestionID string, selectCols ...string) (*EventPQMatchScore, error) {
	eventPQMatchScoreObj := &EventPQMatchScore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_pq_match_scores\" where \"event_id\"=$1 AND \"profile_question_id\"=$2", sel,
	)

	q := queries.Raw(query, eventID, profileQuestionID)

	err := q.Bind(ctx, exec, eventPQMatchScoreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_pq_match_scores")
	}

	if err = eventPQMatchScoreObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventPQMatchScoreObj, err
	}

	return eventPQMatchScoreObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EventPQMatchScore) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventPQMatchScore) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_pq_match_scores provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventPQMatchScoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventPQMatchScoreInsertCacheMut.RLock()
	cache, cached := eventPQMatchScoreInsertCache[key]
	eventPQMatchScoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventPQMatchScoreAllColumns,
			eventPQMatchScoreColumnsWithDefault,
			eventPQMatchScoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventPQMatchScoreType, eventPQMatchScoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventPQMatchScoreType, eventPQMatchScoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_pq_match_scores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_pq_match_scores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_pq_match_scores")
	}

	if !cached {
		eventPQMatchScoreInsertCacheMut.Lock()
		eventPQMatchScoreInsertCache[key] = cache
		eventPQMatchScoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single EventPQMatchScore record using the global executor.
// See Update for more documentation.
func (o *EventPQMatchScore) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the EventPQMatchScore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventPQMatchScore) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventPQMatchScoreUpdateCacheMut.RLock()
	cache, cached := eventPQMatchScoreUpdateCache[key]
	eventPQMatchScoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventPQMatchScoreAllColumns,
			eventPQMatchScorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_pq_match_scores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_pq_match_scores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventPQMatchScorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventPQMatchScoreType, eventPQMatchScoreMapping, append(wl, eventPQMatchScorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_pq_match_scores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_pq_match_scores")
	}

	if !cached {
		eventPQMatchScoreUpdateCacheMut.Lock()
		eventPQMatchScoreUpdateCache[key] = cache
		eventPQMatchScoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q eventPQMatchScoreQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q eventPQMatchScoreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_pq_match_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_pq_match_scores")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EventPQMatchScoreSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventPQMatchScoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPQMatchScorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_pq_match_scores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventPQMatchScorePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventPQMatchScore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventPQMatchScore")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EventPQMatchScore) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventPQMatchScore) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_pq_match_scores provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventPQMatchScoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventPQMatchScoreUpsertCacheMut.RLock()
	cache, cached := eventPQMatchScoreUpsertCache[key]
	eventPQMatchScoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			eventPQMatchScoreAllColumns,
			eventPQMatchScoreColumnsWithDefault,
			eventPQMatchScoreColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			eventPQMatchScoreAllColumns,
			eventPQMatchScorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert event_pq_match_scores, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(eventPQMatchScorePrimaryKeyColumns))
			copy(conflict, eventPQMatchScorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"event_pq_match_scores\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(eventPQMatchScoreType, eventPQMatchScoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventPQMatchScoreType, eventPQMatchScoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert event_pq_match_scores")
	}

	if !cached {
		eventPQMatchScoreUpsertCacheMut.Lock()
		eventPQMatchScoreUpsertCache[key] = cache
		eventPQMatchScoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single EventPQMatchScore record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EventPQMatchScore) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single EventPQMatchScore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventPQMatchScore) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventPQMatchScore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventPQMatchScorePrimaryKeyMapping)
	sql := "DELETE FROM \"event_pq_match_scores\" WHERE \"event_id\"=$1 AND \"profile_question_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_pq_match_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_pq_match_scores")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q eventPQMatchScoreQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q eventPQMatchScoreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventPQMatchScoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_pq_match_scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_pq_match_scores")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EventPQMatchScoreSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventPQMatchScoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventPQMatchScoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPQMatchScorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_pq_match_scores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventPQMatchScorePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventPQMatchScore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_pq_match_scores")
	}

	if len(eventPQMatchScoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EventPQMatchScore) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no EventPQMatchScore provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventPQMatchScore) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventPQMatchScore(ctx, exec, o.EventID, o.ProfileQuestionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventPQMatchScoreSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EventPQMatchScoreSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventPQMatchScoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventPQMatchScoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPQMatchScorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_pq_match_scores\".* FROM \"event_pq_match_scores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventPQMatchScorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventPQMatchScoreSlice")
	}

	*o = slice

	return nil
}

// EventPQMatchScoreExistsG checks if the EventPQMatchScore row exists.
func EventPQMatchScoreExistsG(ctx context.Context, eventID string, profileQuestionID string) (bool, error) {
	return EventPQMatchScoreExists(ctx, boil.GetContextDB(), eventID, profileQuestionID)
}

// EventPQMatchScoreExists checks if the EventPQMatchScore row exists.
func EventPQMatchScoreExists(ctx context.Context, exec boil.ContextExecutor, eventID string, profileQuestionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_pq_match_scores\" where \"event_id\"=$1 AND \"profile_question_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, eventID, profileQuestionID)
	}
	row := exec.QueryRowContext(ctx, sql, eventID, profileQuestionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_pq_match_scores exists")
	}

	return exists, nil
}
