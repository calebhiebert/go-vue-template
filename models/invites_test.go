// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvites(t *testing.T) {
	t.Parallel()

	query := Invites()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvitesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Invites().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Invites().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvitesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InviteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Invite exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InviteExists to return true, but got false.")
	}
}

func testInvitesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inviteFound, err := FindInvite(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if inviteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvitesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Invites().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvitesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Invites().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvitesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inviteOne := &Invite{}
	inviteTwo := &Invite{}
	if err = randomize.Struct(seed, inviteOne, inviteDBTypes, false, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}
	if err = randomize.Struct(seed, inviteTwo, inviteDBTypes, false, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inviteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inviteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Invites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvitesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inviteOne := &Invite{}
	inviteTwo := &Invite{}
	if err = randomize.Struct(seed, inviteOne, inviteDBTypes, false, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}
	if err = randomize.Struct(seed, inviteTwo, inviteDBTypes, false, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inviteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inviteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inviteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func inviteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Invite) error {
	*o = Invite{}
	return nil
}

func testInvitesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Invite{}
	o := &Invite{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inviteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Invite object: %s", err)
	}

	AddInviteHook(boil.BeforeInsertHook, inviteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inviteBeforeInsertHooks = []InviteHook{}

	AddInviteHook(boil.AfterInsertHook, inviteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inviteAfterInsertHooks = []InviteHook{}

	AddInviteHook(boil.AfterSelectHook, inviteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inviteAfterSelectHooks = []InviteHook{}

	AddInviteHook(boil.BeforeUpdateHook, inviteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inviteBeforeUpdateHooks = []InviteHook{}

	AddInviteHook(boil.AfterUpdateHook, inviteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inviteAfterUpdateHooks = []InviteHook{}

	AddInviteHook(boil.BeforeDeleteHook, inviteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inviteBeforeDeleteHooks = []InviteHook{}

	AddInviteHook(boil.AfterDeleteHook, inviteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inviteAfterDeleteHooks = []InviteHook{}

	AddInviteHook(boil.BeforeUpsertHook, inviteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inviteBeforeUpsertHooks = []InviteHook{}

	AddInviteHook(boil.AfterUpsertHook, inviteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inviteAfterUpsertHooks = []InviteHook{}
}

func testInvitesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvitesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inviteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInviteToManyInviteShortcodes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invite
	var b, c InviteShortcode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.InviteID = a.ID
	c.InviteID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InviteShortcodes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.InviteID == b.InviteID {
			bFound = true
		}
		if v.InviteID == c.InviteID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InviteSlice{&a}
	if err = a.L.LoadInviteShortcodes(ctx, tx, false, (*[]*Invite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InviteShortcodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InviteShortcodes = nil
	if err = a.L.LoadInviteShortcodes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InviteShortcodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInviteToManyAddOpInviteShortcodes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invite
	var b, c, d, e InviteShortcode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InviteShortcode{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, inviteShortcodeDBTypes, false, strmangle.SetComplement(inviteShortcodePrimaryKeyColumns, inviteShortcodeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*InviteShortcode{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInviteShortcodes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.InviteID {
			t.Error("foreign key was wrong value", a.ID, first.InviteID)
		}
		if a.ID != second.InviteID {
			t.Error("foreign key was wrong value", a.ID, second.InviteID)
		}

		if first.R.Invite != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Invite != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InviteShortcodes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InviteShortcodes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InviteShortcodes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testInviteToOneEventUsingEvent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Invite
	var foreign Event

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.EventID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Event().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InviteSlice{&local}
	if err = local.L.LoadEvent(ctx, tx, false, (*[]*Invite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Event = nil
	if err = local.L.LoadEvent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInviteToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Invite
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GroupID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InviteSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*Invite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInviteToOneSetOpEventUsingEvent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invite
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Event{&b, &c} {
		err = a.SetEvent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Event != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Invites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.EventID, x.ID) {
			t.Error("foreign key was wrong value", a.EventID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EventID))
		reflect.Indirect(reflect.ValueOf(&a.EventID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.EventID, x.ID) {
			t.Error("foreign key was wrong value", a.EventID, x.ID)
		}
	}
}

func testInviteToOneRemoveOpEventUsingEvent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invite
	var b Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetEvent(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveEvent(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Event().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Event != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.EventID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Invites) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInviteToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invite
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Invites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}

func testInviteToOneRemoveOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invite
	var b Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGroup(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGroup(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Group().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Group != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GroupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Invites) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInvitesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvitesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvitesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Invites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inviteDBTypes = map[string]string{`ID`: `uuid`, `EventID`: `uuid`, `GroupID`: `uuid`, `SuggestedName`: `character varying`, `Phone`: `character varying`, `Email`: `character varying`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testInvitesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invitePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inviteAllColumns) == len(invitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inviteDBTypes, true, invitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvitesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inviteAllColumns) == len(invitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Invite{}
	if err = randomize.Struct(seed, o, inviteDBTypes, true, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inviteDBTypes, true, invitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inviteAllColumns, invitePrimaryKeyColumns) {
		fields = inviteAllColumns
	} else {
		fields = strmangle.SetComplement(
			inviteAllColumns,
			invitePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InviteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvitesUpsert(t *testing.T) {
	t.Parallel()

	if len(inviteAllColumns) == len(invitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Invite{}
	if err = randomize.Struct(seed, &o, inviteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Invite: %s", err)
	}

	count, err := Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inviteDBTypes, false, invitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Invite: %s", err)
	}

	count, err = Invites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
