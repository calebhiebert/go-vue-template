// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Event is an object representing the database table.
type Event struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	GameTypeID  string      `boil:"game_type_id" json:"game_type_id" toml:"game_type_id" yaml:"game_type_id"`
	EventDate   time.Time   `boil:"event_date" json:"event_date" toml:"event_date" yaml:"event_date"`
	PlayerCount int         `boil:"player_count" json:"player_count" toml:"player_count" yaml:"player_count"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedByID string      `boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`
	CourseID    string      `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	ParentID    null.String `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Public      bool        `boil:"public" json:"public" toml:"public" yaml:"public"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *eventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventColumns = struct {
	ID          string
	GameTypeID  string
	EventDate   string
	PlayerCount string
	Name        string
	CreatedByID string
	CourseID    string
	ParentID    string
	Public      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	GameTypeID:  "game_type_id",
	EventDate:   "event_date",
	PlayerCount: "player_count",
	Name:        "name",
	CreatedByID: "created_by_id",
	CourseID:    "course_id",
	ParentID:    "parent_id",
	Public:      "public",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var EventTableColumns = struct {
	ID          string
	GameTypeID  string
	EventDate   string
	PlayerCount string
	Name        string
	CreatedByID string
	CourseID    string
	ParentID    string
	Public      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "events.id",
	GameTypeID:  "events.game_type_id",
	EventDate:   "events.event_date",
	PlayerCount: "events.player_count",
	Name:        "events.name",
	CreatedByID: "events.created_by_id",
	CourseID:    "events.course_id",
	ParentID:    "events.parent_id",
	Public:      "events.public",
	CreatedAt:   "events.created_at",
	UpdatedAt:   "events.updated_at",
	DeletedAt:   "events.deleted_at",
}

// Generated where

var EventWhere = struct {
	ID          whereHelperstring
	GameTypeID  whereHelperstring
	EventDate   whereHelpertime_Time
	PlayerCount whereHelperint
	Name        whereHelperstring
	CreatedByID whereHelperstring
	CourseID    whereHelperstring
	ParentID    whereHelpernull_String
	Public      whereHelperbool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"events\".\"id\""},
	GameTypeID:  whereHelperstring{field: "\"events\".\"game_type_id\""},
	EventDate:   whereHelpertime_Time{field: "\"events\".\"event_date\""},
	PlayerCount: whereHelperint{field: "\"events\".\"player_count\""},
	Name:        whereHelperstring{field: "\"events\".\"name\""},
	CreatedByID: whereHelperstring{field: "\"events\".\"created_by_id\""},
	CourseID:    whereHelperstring{field: "\"events\".\"course_id\""},
	ParentID:    whereHelpernull_String{field: "\"events\".\"parent_id\""},
	Public:      whereHelperbool{field: "\"events\".\"public\""},
	CreatedAt:   whereHelpertime_Time{field: "\"events\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"events\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"events\".\"deleted_at\""},
}

// EventRels is where relationship names are stored.
var EventRels = struct {
	Course             string
	CreatedBy          string
	GameType           string
	Parent             string
	EventPQMatchScores string
	EventUsers         string
	ParentEvents       string
	Invites            string
}{
	Course:             "Course",
	CreatedBy:          "CreatedBy",
	GameType:           "GameType",
	Parent:             "Parent",
	EventPQMatchScores: "EventPQMatchScores",
	EventUsers:         "EventUsers",
	ParentEvents:       "ParentEvents",
	Invites:            "Invites",
}

// eventR is where relationships are stored.
type eventR struct {
	Course             *Course                `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
	CreatedBy          *User                  `boil:"CreatedBy" json:"CreatedBy" toml:"CreatedBy" yaml:"CreatedBy"`
	GameType           *GameType              `boil:"GameType" json:"GameType" toml:"GameType" yaml:"GameType"`
	Parent             *Event                 `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	EventPQMatchScores EventPQMatchScoreSlice `boil:"EventPQMatchScores" json:"EventPQMatchScores" toml:"EventPQMatchScores" yaml:"EventPQMatchScores"`
	EventUsers         EventUserSlice         `boil:"EventUsers" json:"EventUsers" toml:"EventUsers" yaml:"EventUsers"`
	ParentEvents       EventSlice             `boil:"ParentEvents" json:"ParentEvents" toml:"ParentEvents" yaml:"ParentEvents"`
	Invites            InviteSlice            `boil:"Invites" json:"Invites" toml:"Invites" yaml:"Invites"`
}

// NewStruct creates a new relationship struct
func (*eventR) NewStruct() *eventR {
	return &eventR{}
}

// eventL is where Load methods for each relationship are stored.
type eventL struct{}

var (
	eventAllColumns            = []string{"id", "game_type_id", "event_date", "player_count", "name", "created_by_id", "course_id", "parent_id", "public", "created_at", "updated_at", "deleted_at"}
	eventColumnsWithoutDefault = []string{"id", "game_type_id", "event_date", "player_count", "created_by_id", "course_id", "parent_id", "deleted_at"}
	eventColumnsWithDefault    = []string{"name", "public", "created_at", "updated_at"}
	eventPrimaryKeyColumns     = []string{"id"}
)

type (
	// EventSlice is an alias for a slice of pointers to Event.
	// This should almost always be used instead of []Event.
	EventSlice []*Event
	// EventHook is the signature for custom Event hook methods
	EventHook func(context.Context, boil.ContextExecutor, *Event) error

	eventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventType                 = reflect.TypeOf(&Event{})
	eventMapping              = queries.MakeStructMapping(eventType)
	eventPrimaryKeyMapping, _ = queries.BindMapping(eventType, eventMapping, eventPrimaryKeyColumns)
	eventInsertCacheMut       sync.RWMutex
	eventInsertCache          = make(map[string]insertCache)
	eventUpdateCacheMut       sync.RWMutex
	eventUpdateCache          = make(map[string]updateCache)
	eventUpsertCacheMut       sync.RWMutex
	eventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventBeforeInsertHooks []EventHook
var eventBeforeUpdateHooks []EventHook
var eventBeforeDeleteHooks []EventHook
var eventBeforeUpsertHooks []EventHook

var eventAfterInsertHooks []EventHook
var eventAfterSelectHooks []EventHook
var eventAfterUpdateHooks []EventHook
var eventAfterDeleteHooks []EventHook
var eventAfterUpsertHooks []EventHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Event) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Event) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Event) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Event) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Event) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Event) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Event) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Event) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Event) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventHook registers your hook function for all future operations.
func AddEventHook(hookPoint boil.HookPoint, eventHook EventHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		eventBeforeInsertHooks = append(eventBeforeInsertHooks, eventHook)
	case boil.BeforeUpdateHook:
		eventBeforeUpdateHooks = append(eventBeforeUpdateHooks, eventHook)
	case boil.BeforeDeleteHook:
		eventBeforeDeleteHooks = append(eventBeforeDeleteHooks, eventHook)
	case boil.BeforeUpsertHook:
		eventBeforeUpsertHooks = append(eventBeforeUpsertHooks, eventHook)
	case boil.AfterInsertHook:
		eventAfterInsertHooks = append(eventAfterInsertHooks, eventHook)
	case boil.AfterSelectHook:
		eventAfterSelectHooks = append(eventAfterSelectHooks, eventHook)
	case boil.AfterUpdateHook:
		eventAfterUpdateHooks = append(eventAfterUpdateHooks, eventHook)
	case boil.AfterDeleteHook:
		eventAfterDeleteHooks = append(eventAfterDeleteHooks, eventHook)
	case boil.AfterUpsertHook:
		eventAfterUpsertHooks = append(eventAfterUpsertHooks, eventHook)
	}
}

// OneG returns a single event record from the query using the global executor.
func (q eventQuery) OneG(ctx context.Context) (*Event, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single event record from the query.
func (q eventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Event, error) {
	o := &Event{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Event records from the query using the global executor.
func (q eventQuery) AllG(ctx context.Context) (EventSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Event records from the query.
func (q eventQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventSlice, error) {
	var o []*Event

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Event slice")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Event records in the query, and panics on error.
func (q eventQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Event records in the query.
func (q eventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count events rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q eventQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q eventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if events exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *Event) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CourseID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Courses(queryMods...)
	queries.SetFrom(query.Query, "\"courses\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *Event) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// GameType pointed to by the foreign key.
func (o *Event) GameType(mods ...qm.QueryMod) gameTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameTypeID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := GameTypes(queryMods...)
	queries.SetFrom(query.Query, "\"game_types\"")

	return query
}

// Parent pointed to by the foreign key.
func (o *Event) Parent(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	return query
}

// EventPQMatchScores retrieves all the event_pq_match_score's EventPQMatchScores with an executor.
func (o *Event) EventPQMatchScores(mods ...qm.QueryMod) eventPQMatchScoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"event_pq_match_scores\".\"event_id\"=?", o.ID),
	)

	query := EventPQMatchScores(queryMods...)
	queries.SetFrom(query.Query, "\"event_pq_match_scores\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"event_pq_match_scores\".*"})
	}

	return query
}

// EventUsers retrieves all the event_user's EventUsers with an executor.
func (o *Event) EventUsers(mods ...qm.QueryMod) eventUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"event_users\".\"event_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"event_users\".\"deleted_at\""),
	)

	query := EventUsers(queryMods...)
	queries.SetFrom(query.Query, "\"event_users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"event_users\".*"})
	}

	return query
}

// ParentEvents retrieves all the event's Events with an executor via parent_id column.
func (o *Event) ParentEvents(mods ...qm.QueryMod) eventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"events\".\"parent_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"events\".\"deleted_at\""),
	)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"events\".*"})
	}

	return query
}

// Invites retrieves all the invite's Invites with an executor.
func (o *Event) Invites(mods ...qm.QueryMod) inviteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invites\".\"event_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"invites\".\"deleted_at\""),
	)

	query := Invites(queryMods...)
	queries.SetFrom(query.Query, "\"invites\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"invites\".*"})
	}

	return query
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.CourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if a == obj.CourseID {
					continue Outer
				}
			}

			args = append(args, obj.CourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`courses`),
		qm.WhereIn(`courses.id in ?`, args...),
		qmhelper.WhereIsNull(`courses.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for courses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for courses")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.Events = append(foreign.R.Events, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.Events = append(foreign.R.Events, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByEvents = append(foreign.R.CreatedByEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByEvents = append(foreign.R.CreatedByEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadGameType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventL) LoadGameType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.GameTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if a == obj.GameTypeID {
					continue Outer
				}
			}

			args = append(args, obj.GameTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_types`),
		qm.WhereIn(`game_types.id in ?`, args...),
		qmhelper.WhereIsNull(`game_types.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameType")
	}

	var resultSlice []*GameType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_types")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameType = foreign
		if foreign.R == nil {
			foreign.R = &gameTypeR{}
		}
		foreign.R.Events = append(foreign.R.Events, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameTypeID == foreign.ID {
				local.R.GameType = foreign
				if foreign.R == nil {
					foreign.R = &gameTypeR{}
				}
				foreign.R.Events = append(foreign.R.Events, local)
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.id in ?`, args...),
		qmhelper.WhereIsNull(`events.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.ParentEvents = append(foreign.R.ParentEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.ParentEvents = append(foreign.R.ParentEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadEventPQMatchScores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventL) LoadEventPQMatchScores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`event_pq_match_scores`),
		qm.WhereIn(`event_pq_match_scores.event_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load event_pq_match_scores")
	}

	var resultSlice []*EventPQMatchScore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice event_pq_match_scores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on event_pq_match_scores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for event_pq_match_scores")
	}

	if len(eventPQMatchScoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventPQMatchScores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventPQMatchScoreR{}
			}
			foreign.R.Event = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EventID {
				local.R.EventPQMatchScores = append(local.R.EventPQMatchScores, foreign)
				if foreign.R == nil {
					foreign.R = &eventPQMatchScoreR{}
				}
				foreign.R.Event = local
				break
			}
		}
	}

	return nil
}

// LoadEventUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventL) LoadEventUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`event_users`),
		qm.WhereIn(`event_users.event_id in ?`, args...),
		qmhelper.WhereIsNull(`event_users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load event_users")
	}

	var resultSlice []*EventUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice event_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on event_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for event_users")
	}

	if len(eventUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventUserR{}
			}
			foreign.R.Event = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EventID {
				local.R.EventUsers = append(local.R.EventUsers, foreign)
				if foreign.R == nil {
					foreign.R = &eventUserR{}
				}
				foreign.R.Event = local
				break
			}
		}
	}

	return nil
}

// LoadParentEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventL) LoadParentEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.parent_id in ?`, args...),
		qmhelper.WhereIsNull(`events.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load events")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentEvents = append(local.R.ParentEvents, foreign)
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadInvites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (eventL) LoadInvites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvent interface{}, mods queries.Applicator) error {
	var slice []*Event
	var object *Event

	if singular {
		object = maybeEvent.(*Event)
	} else {
		slice = *maybeEvent.(*[]*Event)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invites`),
		qm.WhereIn(`invites.event_id in ?`, args...),
		qmhelper.WhereIsNull(`invites.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invites")
	}

	var resultSlice []*Invite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invites")
	}

	if len(inviteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Invites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inviteR{}
			}
			foreign.R.Event = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EventID) {
				local.R.Invites = append(local.R.Invites, foreign)
				if foreign.R == nil {
					foreign.R = &inviteR{}
				}
				foreign.R.Event = local
				break
			}
		}
	}

	return nil
}

// SetCourseG of the event to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.Events.
// Uses the global database handle.
func (o *Event) SetCourseG(ctx context.Context, insert bool, related *Course) error {
	return o.SetCourse(ctx, boil.GetContextDB(), insert, related)
}

// SetCourse of the event to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.Events.
func (o *Event) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"course_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &eventR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			Events: EventSlice{o},
		}
	} else {
		related.R.Events = append(related.R.Events, o)
	}

	return nil
}

// SetCreatedByG of the event to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByEvents.
// Uses the global database handle.
func (o *Event) SetCreatedByG(ctx context.Context, insert bool, related *User) error {
	return o.SetCreatedBy(ctx, boil.GetContextDB(), insert, related)
}

// SetCreatedBy of the event to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByEvents.
func (o *Event) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &eventR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByEvents: EventSlice{o},
		}
	} else {
		related.R.CreatedByEvents = append(related.R.CreatedByEvents, o)
	}

	return nil
}

// SetGameTypeG of the event to the related item.
// Sets o.R.GameType to related.
// Adds o to related.R.Events.
// Uses the global database handle.
func (o *Event) SetGameTypeG(ctx context.Context, insert bool, related *GameType) error {
	return o.SetGameType(ctx, boil.GetContextDB(), insert, related)
}

// SetGameType of the event to the related item.
// Sets o.R.GameType to related.
// Adds o to related.R.Events.
func (o *Event) SetGameType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GameType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameTypeID = related.ID
	if o.R == nil {
		o.R = &eventR{
			GameType: related,
		}
	} else {
		o.R.GameType = related
	}

	if related.R == nil {
		related.R = &gameTypeR{
			Events: EventSlice{o},
		}
	} else {
		related.R.Events = append(related.R.Events, o)
	}

	return nil
}

// SetParentG of the event to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentEvents.
// Uses the global database handle.
func (o *Event) SetParentG(ctx context.Context, insert bool, related *Event) error {
	return o.SetParent(ctx, boil.GetContextDB(), insert, related)
}

// SetParent of the event to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentEvents.
func (o *Event) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &eventR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &eventR{
			ParentEvents: EventSlice{o},
		}
	} else {
		related.R.ParentEvents = append(related.R.ParentEvents, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Event) RemoveParentG(ctx context.Context, related *Event) error {
	return o.RemoveParent(ctx, boil.GetContextDB(), related)
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Event) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *Event) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentEvents {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentEvents)
		if ln > 1 && i < ln-1 {
			related.R.ParentEvents[i] = related.R.ParentEvents[ln-1]
		}
		related.R.ParentEvents = related.R.ParentEvents[:ln-1]
		break
	}
	return nil
}

// AddEventPQMatchScoresG adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.EventPQMatchScores.
// Sets related.R.Event appropriately.
// Uses the global database handle.
func (o *Event) AddEventPQMatchScoresG(ctx context.Context, insert bool, related ...*EventPQMatchScore) error {
	return o.AddEventPQMatchScores(ctx, boil.GetContextDB(), insert, related...)
}

// AddEventPQMatchScores adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.EventPQMatchScores.
// Sets related.R.Event appropriately.
func (o *Event) AddEventPQMatchScores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EventPQMatchScore) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EventID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"event_pq_match_scores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
				strmangle.WhereClause("\"", "\"", 2, eventPQMatchScorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.EventID, rel.ProfileQuestionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &eventR{
			EventPQMatchScores: related,
		}
	} else {
		o.R.EventPQMatchScores = append(o.R.EventPQMatchScores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventPQMatchScoreR{
				Event: o,
			}
		} else {
			rel.R.Event = o
		}
	}
	return nil
}

// AddEventUsersG adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.EventUsers.
// Sets related.R.Event appropriately.
// Uses the global database handle.
func (o *Event) AddEventUsersG(ctx context.Context, insert bool, related ...*EventUser) error {
	return o.AddEventUsers(ctx, boil.GetContextDB(), insert, related...)
}

// AddEventUsers adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.EventUsers.
// Sets related.R.Event appropriately.
func (o *Event) AddEventUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EventUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EventID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"event_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
				strmangle.WhereClause("\"", "\"", 2, eventUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.EventID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &eventR{
			EventUsers: related,
		}
	} else {
		o.R.EventUsers = append(o.R.EventUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventUserR{
				Event: o,
			}
		} else {
			rel.R.Event = o
		}
	}
	return nil
}

// AddParentEventsG adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.ParentEvents.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *Event) AddParentEventsG(ctx context.Context, insert bool, related ...*Event) error {
	return o.AddParentEvents(ctx, boil.GetContextDB(), insert, related...)
}

// AddParentEvents adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.ParentEvents.
// Sets related.R.Parent appropriately.
func (o *Event) AddParentEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Event) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &eventR{
			ParentEvents: related,
		}
	} else {
		o.R.ParentEvents = append(o.R.ParentEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentEventsG removes all previously related items of the
// event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentEvents accordingly.
// Replaces o.R.ParentEvents with related.
// Sets related.R.Parent's ParentEvents accordingly.
// Uses the global database handle.
func (o *Event) SetParentEventsG(ctx context.Context, insert bool, related ...*Event) error {
	return o.SetParentEvents(ctx, boil.GetContextDB(), insert, related...)
}

// SetParentEvents removes all previously related items of the
// event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentEvents accordingly.
// Replaces o.R.ParentEvents with related.
// Sets related.R.Parent's ParentEvents accordingly.
func (o *Event) SetParentEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Event) error {
	query := "update \"events\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentEvents {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentEvents = nil
	}
	return o.AddParentEvents(ctx, exec, insert, related...)
}

// RemoveParentEventsG relationships from objects passed in.
// Removes related items from R.ParentEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *Event) RemoveParentEventsG(ctx context.Context, related ...*Event) error {
	return o.RemoveParentEvents(ctx, boil.GetContextDB(), related...)
}

// RemoveParentEvents relationships from objects passed in.
// Removes related items from R.ParentEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Event) RemoveParentEvents(ctx context.Context, exec boil.ContextExecutor, related ...*Event) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentEvents)
			if ln > 1 && i < ln-1 {
				o.R.ParentEvents[i] = o.R.ParentEvents[ln-1]
			}
			o.R.ParentEvents = o.R.ParentEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddInvitesG adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.Invites.
// Sets related.R.Event appropriately.
// Uses the global database handle.
func (o *Event) AddInvitesG(ctx context.Context, insert bool, related ...*Invite) error {
	return o.AddInvites(ctx, boil.GetContextDB(), insert, related...)
}

// AddInvites adds the given related objects to the existing relationships
// of the event, optionally inserting them as new records.
// Appends related to o.R.Invites.
// Sets related.R.Event appropriately.
func (o *Event) AddInvites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invite) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EventID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invites\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
				strmangle.WhereClause("\"", "\"", 2, invitePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EventID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &eventR{
			Invites: related,
		}
	} else {
		o.R.Invites = append(o.R.Invites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inviteR{
				Event: o,
			}
		} else {
			rel.R.Event = o
		}
	}
	return nil
}

// SetInvitesG removes all previously related items of the
// event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Event's Invites accordingly.
// Replaces o.R.Invites with related.
// Sets related.R.Event's Invites accordingly.
// Uses the global database handle.
func (o *Event) SetInvitesG(ctx context.Context, insert bool, related ...*Invite) error {
	return o.SetInvites(ctx, boil.GetContextDB(), insert, related...)
}

// SetInvites removes all previously related items of the
// event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Event's Invites accordingly.
// Replaces o.R.Invites with related.
// Sets related.R.Event's Invites accordingly.
func (o *Event) SetInvites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invite) error {
	query := "update \"invites\" set \"event_id\" = null where \"event_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Invites {
			queries.SetScanner(&rel.EventID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Event = nil
		}

		o.R.Invites = nil
	}
	return o.AddInvites(ctx, exec, insert, related...)
}

// RemoveInvitesG relationships from objects passed in.
// Removes related items from R.Invites (uses pointer comparison, removal does not keep order)
// Sets related.R.Event.
// Uses the global database handle.
func (o *Event) RemoveInvitesG(ctx context.Context, related ...*Invite) error {
	return o.RemoveInvites(ctx, boil.GetContextDB(), related...)
}

// RemoveInvites relationships from objects passed in.
// Removes related items from R.Invites (uses pointer comparison, removal does not keep order)
// Sets related.R.Event.
func (o *Event) RemoveInvites(ctx context.Context, exec boil.ContextExecutor, related ...*Invite) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EventID, nil)
		if rel.R != nil {
			rel.R.Event = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("event_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Invites {
			if rel != ri {
				continue
			}

			ln := len(o.R.Invites)
			if ln > 1 && i < ln-1 {
				o.R.Invites[i] = o.R.Invites[ln-1]
			}
			o.R.Invites = o.R.Invites[:ln-1]
			break
		}
	}

	return nil
}

// Events retrieves all the records using an executor.
func Events(mods ...qm.QueryMod) eventQuery {
	mods = append(mods, qm.From("\"events\""), qmhelper.WhereIsNull("\"events\".\"deleted_at\""))
	return eventQuery{NewQuery(mods...)}
}

// FindEventG retrieves a single record by ID.
func FindEventG(ctx context.Context, iD string, selectCols ...string) (*Event, error) {
	return FindEvent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Event, error) {
	eventObj := &Event{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"events\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, eventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from events")
	}

	if err = eventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventObj, err
	}

	return eventObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Event) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Event) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no events provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventInsertCacheMut.RLock()
	cache, cached := eventInsertCache[key]
	eventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventAllColumns,
			eventColumnsWithDefault,
			eventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventType, eventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventType, eventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into events")
	}

	if !cached {
		eventInsertCacheMut.Lock()
		eventInsertCache[key] = cache
		eventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Event record using the global executor.
// See Update for more documentation.
func (o *Event) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Event.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Event) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventUpdateCacheMut.RLock()
	cache, cached := eventUpdateCache[key]
	eventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventAllColumns,
			eventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventType, eventMapping, append(wl, eventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for events")
	}

	if !cached {
		eventUpdateCacheMut.Lock()
		eventUpdateCache[key] = cache
		eventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q eventQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q eventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for events")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EventSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in event slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all event")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Event) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Event) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no events provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventUpsertCacheMut.RLock()
	cache, cached := eventUpsertCache[key]
	eventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			eventAllColumns,
			eventColumnsWithDefault,
			eventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			eventAllColumns,
			eventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(eventPrimaryKeyColumns))
			copy(conflict, eventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(eventType, eventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventType, eventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert events")
	}

	if !cached {
		eventUpsertCacheMut.Lock()
		eventUpsertCache[key] = cache
		eventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Event record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Event) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single Event record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Event) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Event provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventPrimaryKeyMapping)
		sql = "DELETE FROM \"events\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"events\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(eventType, eventMapping, append(wl, eventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q eventQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q eventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for events")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EventSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"events\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"events\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, eventPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for events")
	}

	if len(eventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Event) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Event provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Event) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EventSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"events\".* FROM \"events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventSlice")
	}

	*o = slice

	return nil
}

// EventExistsG checks if the Event row exists.
func EventExistsG(ctx context.Context, iD string) (bool, error) {
	return EventExists(ctx, boil.GetContextDB(), iD)
}

// EventExists checks if the Event row exists.
func EventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"events\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if events exists")
	}

	return exists, nil
}
