// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTestRelations(t *testing.T) {
	t.Parallel()

	query := TestRelations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTestRelationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTestRelationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TestRelations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTestRelationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TestRelationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTestRelationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TestRelationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TestRelation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TestRelationExists to return true, but got false.")
	}
}

func testTestRelationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	testRelationFound, err := FindTestRelation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if testRelationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTestRelationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TestRelations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTestRelationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TestRelations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTestRelationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	testRelationOne := &TestRelation{}
	testRelationTwo := &TestRelation{}
	if err = randomize.Struct(seed, testRelationOne, testRelationDBTypes, false, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, testRelationTwo, testRelationDBTypes, false, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = testRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = testRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TestRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTestRelationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	testRelationOne := &TestRelation{}
	testRelationTwo := &TestRelation{}
	if err = randomize.Struct(seed, testRelationOne, testRelationDBTypes, false, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}
	if err = randomize.Struct(seed, testRelationTwo, testRelationDBTypes, false, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = testRelationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = testRelationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRelationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testRelationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TestRelation) error {
	*o = TestRelation{}
	return nil
}

func testTestRelationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TestRelation{}
	o := &TestRelation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, testRelationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TestRelation object: %s", err)
	}

	AddTestRelationHook(boil.BeforeInsertHook, testRelationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	testRelationBeforeInsertHooks = []TestRelationHook{}

	AddTestRelationHook(boil.AfterInsertHook, testRelationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	testRelationAfterInsertHooks = []TestRelationHook{}

	AddTestRelationHook(boil.AfterSelectHook, testRelationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	testRelationAfterSelectHooks = []TestRelationHook{}

	AddTestRelationHook(boil.BeforeUpdateHook, testRelationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	testRelationBeforeUpdateHooks = []TestRelationHook{}

	AddTestRelationHook(boil.AfterUpdateHook, testRelationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	testRelationAfterUpdateHooks = []TestRelationHook{}

	AddTestRelationHook(boil.BeforeDeleteHook, testRelationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	testRelationBeforeDeleteHooks = []TestRelationHook{}

	AddTestRelationHook(boil.AfterDeleteHook, testRelationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	testRelationAfterDeleteHooks = []TestRelationHook{}

	AddTestRelationHook(boil.BeforeUpsertHook, testRelationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	testRelationBeforeUpsertHooks = []TestRelationHook{}

	AddTestRelationHook(boil.AfterUpsertHook, testRelationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	testRelationAfterUpsertHooks = []TestRelationHook{}
}

func testTestRelationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTestRelationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(testRelationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTestRelationToOneTestTableUsingTestTable(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TestRelation
	var foreign TestTable

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, testTableDBTypes, false, testTableColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestTable struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TestTableID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TestTable().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TestRelationSlice{&local}
	if err = local.L.LoadTestTable(ctx, tx, false, (*[]*TestRelation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TestTable == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TestTable = nil
	if err = local.L.LoadTestTable(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TestTable == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTestRelationToOneSetOpTestTableUsingTestTable(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TestRelation
	var b, c TestTable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, testRelationDBTypes, false, strmangle.SetComplement(testRelationPrimaryKeyColumns, testRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, testTableDBTypes, false, strmangle.SetComplement(testTablePrimaryKeyColumns, testTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, testTableDBTypes, false, strmangle.SetComplement(testTablePrimaryKeyColumns, testTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TestTable{&b, &c} {
		err = a.SetTestTable(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TestTable != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TestRelations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TestTableID, x.ID) {
			t.Error("foreign key was wrong value", a.TestTableID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TestTableID))
		reflect.Indirect(reflect.ValueOf(&a.TestTableID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TestTableID, x.ID) {
			t.Error("foreign key was wrong value", a.TestTableID, x.ID)
		}
	}
}

func testTestRelationToOneRemoveOpTestTableUsingTestTable(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TestRelation
	var b TestTable

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, testRelationDBTypes, false, strmangle.SetComplement(testRelationPrimaryKeyColumns, testRelationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, testTableDBTypes, false, strmangle.SetComplement(testTablePrimaryKeyColumns, testTableColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTestTable(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTestTable(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.TestTable().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.TestTable != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TestTableID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TestRelations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTestRelationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTestRelationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TestRelationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTestRelationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TestRelations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	testRelationDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `TestTableID`: `uuid`}
	_                   = bytes.MinRead
)

func testTestRelationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(testRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(testRelationAllColumns) == len(testRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTestRelationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(testRelationAllColumns) == len(testRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TestRelation{}
	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, testRelationDBTypes, true, testRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(testRelationAllColumns, testRelationPrimaryKeyColumns) {
		fields = testRelationAllColumns
	} else {
		fields = strmangle.SetComplement(
			testRelationAllColumns,
			testRelationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TestRelationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTestRelationsUpsert(t *testing.T) {
	t.Parallel()

	if len(testRelationAllColumns) == len(testRelationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TestRelation{}
	if err = randomize.Struct(seed, &o, testRelationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TestRelation: %s", err)
	}

	count, err := TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, testRelationDBTypes, false, testRelationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TestRelation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TestRelation: %s", err)
	}

	count, err = TestRelations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
