// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/types"
)

type APIUpdateUserRequest struct {
	Name *string `boil:"name" json:"name" toml:"name" yaml:"name"`

	Login *string `boil:"login" json:"login,omitempty" toml:"login" yaml:"login,omitempty"`
	Email *string `boil:"email" json:"email" toml:"email" yaml:"email"`

	Sub *string `boil:"sub" json:"sub,omitempty" toml:"sub" yaml:"sub,omitempty"`

	Roles []string `boil:"roles" json:"roles" toml:"roles" yaml:"roles"`

	Image *string `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	Birthday *time.Time `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`

	GenderSelfDefined *bool `boil:"gender_self_defined" json:"gender_self_defined,omitempty" toml:"gender_self_defined" yaml:"gender_self_defined,omitempty"`

	Gender *string `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`

	Location *string `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
}

type UpdateUserRequest struct {
	Name              *string            `boil:"name" json:"name,omitempty" toml:"name" yaml:"name"`
	Login             *null.String       `boil:"login" json:"login,omitempty" toml:"login" yaml:"login,omitempty"`
	Email             *string            `boil:"email" json:"email,omitempty" toml:"email" yaml:"email"`
	Sub               *null.String       `boil:"sub" json:"sub,omitempty" toml:"sub" yaml:"sub,omitempty"`
	Roles             *types.StringArray `boil:"roles" json:"roles,omitempty" toml:"roles" yaml:"roles"`
	Image             *null.String       `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	Birthday          *null.Time         `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`
	GenderSelfDefined *null.Bool         `boil:"gender_self_defined" json:"gender_self_defined,omitempty" toml:"gender_self_defined" yaml:"gender_self_defined,omitempty"`
	Gender            *null.String       `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	Location          *null.String       `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
}

// UpdateUserByID godoc
// @Summary Updates a single User entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateUserRequest true "Update parameters"
// @Param id path string true "User id"
// @Success 200 {object} APIUser
// @Router /crud/users/:id [put]
func (*GeneratedCrudController) UpdateUserByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateUserRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingUser, err := models.Users(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Name != nil {
		existingUser.Name = *updateReq.Name
	}

	if updateReq.Login != nil {
		existingUser.Login = *updateReq.Login
	}

	if updateReq.Email != nil {
		existingUser.Email = *updateReq.Email
	}

	if updateReq.Sub != nil {
		existingUser.Sub = *updateReq.Sub
	}

	if updateReq.Roles != nil {
		existingUser.Roles = *updateReq.Roles
	}

	if updateReq.Image != nil {
		existingUser.Image = *updateReq.Image
	}

	if updateReq.Birthday != nil {
		existingUser.Birthday = *updateReq.Birthday
	}

	if updateReq.GenderSelfDefined != nil {
		existingUser.GenderSelfDefined = *updateReq.GenderSelfDefined
	}

	if updateReq.Gender != nil {
		existingUser.Gender = *updateReq.Gender
	}

	if updateReq.Location != nil {
		existingUser.Location = *updateReq.Location
	}

	_, err = existingUser.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingUser)
}
