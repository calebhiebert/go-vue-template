// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateTokenIssuanceStringID func(*CreateTokenIssuanceRequest) string

var GenerateTokenIssuanceID GenerateTokenIssuanceStringID

type APICreateTokenIssuanceRequest struct {
	UserID    *string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	IPAddress *string `boil:"ip_address" json:"ip_address" toml:"ip_address" yaml:"ip_address"`
}

type CreateTokenIssuanceRequest struct {
	ID        *string `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	UserID    string  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" binding:"required" yaml:"user_id"`
	IPAddress string  `boil:"ip_address" json:"ip_address,omitempty" toml:"ip_address" binding:"required" yaml:"ip_address"`
}

// CreateTokenIssuance godoc
// @Summary Creates a new TokenIssuance
// @Produce json
// @Accept json
// @Param req body APICreateTokenIssuanceRequest true "Creation parameters"
// @Success 200 {object} APITokenIssuance
// @Router /crud/tokenIssuances  [post]
func (*GeneratedCrudController) CreateTokenIssuance(c *gin.Context) {
	var createReq CreateTokenIssuanceRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newTokenIssuance := models.TokenIssuance{}

	newTokenIssuance.ID = uuid.Must(uuid.NewV4()).String()

	newTokenIssuance.UserID = createReq.UserID

	newTokenIssuance.IPAddress = createReq.IPAddress

	err = newTokenIssuance.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newTokenIssuance)
}
