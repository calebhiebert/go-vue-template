// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUser struct {
	// uuid
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`

	// character varying
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	// character varying

	Login *string `boil:"login" json:"login,omitempty" toml:"login" yaml:"login,omitempty"`

	// character varying
	Email string `boil:"email" json:"email" toml:"email" yaml:"email"`

	// character varying

	Sub *string `boil:"sub" json:"sub,omitempty" toml:"sub" yaml:"sub,omitempty"`

	// ARRAYcharacter varying

	Roles []string `boil:"roles" json:"roles" toml:"roles" yaml:"roles"`

	// character varying

	Image *string `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	// timestamp without time zone

	Birthday *time.Time `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`

	// boolean

	GenderSelfDefined *bool `boil:"gender_self_defined" json:"gender_self_defined,omitempty" toml:"gender_self_defined" yaml:"gender_self_defined,omitempty"`

	// character varying

	Gender *string `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`

	// character varying

	Location *string `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`

	// timestamp without time zone
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	// timestamp without time zone
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	// timestamp without time zone

	DeletedAt *time.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
}

type GetUsersResponse struct {
	Users      models.UserSlice `json:"users"`
	Total      int64            `json:"total"`
	NextOffset int64            `json:"next_offset"`
}

type APIGetUsersResponse struct {
	Users      []APIUser `json:"users"`
	Total      int64     `json:"total"`
	NextOffset int64     `json:"next_offset"`
}

// GetUserByID godoc
// @Summary Gets a single User entity by their id
// @Produce json
// @Success 200 {object} APIGetUsersResponse
// @Param id path string true "User id"
// @Router /crud/users/:id [get]
func (*GeneratedCrudController) GetUserByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	User, err := models.Users(qm.Where("id = ?", id)).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, User)
}

// GetUsers godoc
// @Summary Gets a list for all entities of the User type
// @Produce json
// @Success 200 {object} APIUser
// @Param withDeleted query string false "Include deleted users in the results"
// @Param sort.id query string false "Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.name query string false "Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.login query string false "Sort by login. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.email query string false "Sort by email. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.sub query string false "Sort by sub. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.roles query string false "Sort by roles. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.image query string false "Sort by image. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.birthday query string false "Sort by birthday. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.gender_self_defined query string false "Sort by gender_self_defined. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.gender query string false "Sort by gender. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.location query string false "Sort by location. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.created_at query string false "Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.updated_at query string false "Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.deleted_at query string false "Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Router /crud/users [get]
func (*GeneratedCrudController) GetUsers(c *gin.Context) {
	queryMods := []qm.QueryMod{}

	withDeleted := c.Query("withDeleted") == "true"

	if withDeleted {
		queryMods = append(queryMods, qm.WithDeleted())
	}

	var orderBy []string

	for q, v := range c.Request.URL.Query() {
		sortDirection := "ASC"

		if v[0] == "DESC" || v[0] == "desc" {
			sortDirection = "DESC"
		}

		switch q {
		case "sort.id":
			orderBy = append(orderBy, "id "+sortDirection)
		case "id.eq":
			queryMods = append(queryMods, qm.Where("id = ?", v[0]))

		case "sort.name":
			orderBy = append(orderBy, "name "+sortDirection)
		case "name.eq":
			queryMods = append(queryMods, qm.Where("name = ?", v[0]))

		case "name.cont":
			nameSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("name ILIKE ?", nameSearchString))

		case "sort.login":
			orderBy = append(orderBy, "login "+sortDirection)
		case "login.eq":
			queryMods = append(queryMods, qm.Where("login = ?", v[0]))

		case "login.cont":
			loginSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("login ILIKE ?", loginSearchString))

		case "sort.email":
			orderBy = append(orderBy, "email "+sortDirection)
		case "email.eq":
			queryMods = append(queryMods, qm.Where("email = ?", v[0]))

		case "email.cont":
			emailSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("email ILIKE ?", emailSearchString))

		case "sort.sub":
			orderBy = append(orderBy, "sub "+sortDirection)
		case "sub.eq":
			queryMods = append(queryMods, qm.Where("sub = ?", v[0]))

		case "sub.cont":
			subSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("sub ILIKE ?", subSearchString))

		case "sort.roles":
			orderBy = append(orderBy, "roles "+sortDirection)
		case "roles.eq":
			queryMods = append(queryMods, qm.Where("roles = ?", v[0]))

		case "sort.image":
			orderBy = append(orderBy, "image "+sortDirection)
		case "image.eq":
			queryMods = append(queryMods, qm.Where("image = ?", v[0]))

		case "image.cont":
			imageSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("image ILIKE ?", imageSearchString))

		case "sort.birthday":
			orderBy = append(orderBy, "birthday "+sortDirection)
		case "birthday.eq":
			queryMods = append(queryMods, qm.Where("birthday = ?", v[0]))

		case "birthday.gt":
			queryMods = append(queryMods, qm.Where("birthday > ?", v[0]))
		case "birthday.lt":
			queryMods = append(queryMods, qm.Where("birthday < ?", v[0]))
		case "birthday.gte":
			queryMods = append(queryMods, qm.Where("birthday >= ?", v[0]))
		case "birthday.lte":
			queryMods = append(queryMods, qm.Where("birthday <= ?", v[0]))

		case "sort.gender_self_defined":
			orderBy = append(orderBy, "gender_self_defined "+sortDirection)
		case "gender_self_defined.eq":
			queryMods = append(queryMods, qm.Where("gender_self_defined = ?", v[0]))

		case "sort.gender":
			orderBy = append(orderBy, "gender "+sortDirection)
		case "gender.eq":
			queryMods = append(queryMods, qm.Where("gender = ?", v[0]))

		case "gender.cont":
			genderSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("gender ILIKE ?", genderSearchString))

		case "sort.location":
			orderBy = append(orderBy, "location "+sortDirection)
		case "location.eq":
			queryMods = append(queryMods, qm.Where("location = ?", v[0]))

		case "location.cont":
			locationSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("location ILIKE ?", locationSearchString))

		case "sort.created_at":
			orderBy = append(orderBy, "created_at "+sortDirection)
		case "created_at.eq":
			queryMods = append(queryMods, qm.Where("created_at = ?", v[0]))

		case "created_at.gt":
			queryMods = append(queryMods, qm.Where("created_at > ?", v[0]))
		case "created_at.lt":
			queryMods = append(queryMods, qm.Where("created_at < ?", v[0]))
		case "created_at.gte":
			queryMods = append(queryMods, qm.Where("created_at >= ?", v[0]))
		case "created_at.lte":
			queryMods = append(queryMods, qm.Where("created_at <= ?", v[0]))

		case "sort.updated_at":
			orderBy = append(orderBy, "updated_at "+sortDirection)
		case "updated_at.eq":
			queryMods = append(queryMods, qm.Where("updated_at = ?", v[0]))

		case "updated_at.gt":
			queryMods = append(queryMods, qm.Where("updated_at > ?", v[0]))
		case "updated_at.lt":
			queryMods = append(queryMods, qm.Where("updated_at < ?", v[0]))
		case "updated_at.gte":
			queryMods = append(queryMods, qm.Where("updated_at >= ?", v[0]))
		case "updated_at.lte":
			queryMods = append(queryMods, qm.Where("updated_at <= ?", v[0]))

		case "sort.deleted_at":
			orderBy = append(orderBy, "deleted_at "+sortDirection)
		case "deleted_at.eq":
			queryMods = append(queryMods, qm.Where("deleted_at = ?", v[0]))

		case "deleted_at.gt":
			queryMods = append(queryMods, qm.Where("deleted_at > ?", v[0]))
		case "deleted_at.lt":
			queryMods = append(queryMods, qm.Where("deleted_at < ?", v[0]))
		case "deleted_at.gte":
			queryMods = append(queryMods, qm.Where("deleted_at >= ?", v[0]))
		case "deleted_at.lte":
			queryMods = append(queryMods, qm.Where("deleted_at <= ?", v[0]))

		}
	}

	count, err := models.Users(queryMods...).CountG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	limit, offset := api.ExtractLimitOffset(c)

	queryMods = append(queryMods, qm.Limit(limit), qm.Offset(offset))

	if len(orderBy) > 0 {
		queryMods = append(queryMods, qm.OrderBy(strings.Join(orderBy, ", ")))
	} else {
		queryMods = append(queryMods, qm.OrderBy("created_at DESC"))
	}

	users, err := models.Users(queryMods...).AllG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if users == nil {
		users = models.UserSlice{}
	}

	c.JSON(http.StatusOK, GetUsersResponse{
		Users:      users,
		Total:      count,
		NextOffset: int64(offset + limit),
	})
}
