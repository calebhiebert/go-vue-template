// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateCourseStringID func(*CreateCourseRequest) string

var GenerateCourseID GenerateCourseStringID

type APICreateCourseRequest struct {
	Name *string `boil:"name" json:"name" toml:"name" yaml:"name"`

	Address *string `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`

	Latitude *float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`

	Longitude *float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`
}

type CreateCourseRequest struct {
	ID        *string       `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name      string        `boil:"name" json:"name,omitempty" toml:"name" binding:"required" yaml:"name"`
	Address   *null.String  `boil:"address" json:"address,omitempty" toml:"address"  yaml:"address,omitempty"`
	Latitude  *null.Float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude"  yaml:"latitude,omitempty"`
	Longitude *null.Float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude"  yaml:"longitude,omitempty"`
}

// CreateCourse godoc
// @Summary Creates a new Course
// @Produce json
// @Accept json
// @Param req body APICreateCourseRequest true "Creation parameters"
// @Success 200 {object} APICourse
// @Router /crud/courses  [post]
func (*GeneratedCrudController) CreateCourse(c *gin.Context) {
	var createReq CreateCourseRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newCourse := models.Course{}

	newCourse.ID = uuid.Must(uuid.NewV4()).String()

	newCourse.Name = createReq.Name

	if createReq.Address != nil {
		newCourse.Address = *createReq.Address
	}

	if createReq.Latitude != nil {
		newCourse.Latitude = *createReq.Latitude
	}

	if createReq.Longitude != nil {
		newCourse.Longitude = *createReq.Longitude
	}

	err = newCourse.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newCourse)
}
