// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateGameTypeRequest struct {
	Name     *string `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsCustom *bool   `boil:"is_custom" json:"is_custom" toml:"is_custom" yaml:"is_custom"`
}

type UpdateGameTypeRequest struct {
	Name     *string `boil:"name" json:"name,omitempty" toml:"name" yaml:"name"`
	IsCustom *bool   `boil:"is_custom" json:"is_custom,omitempty" toml:"is_custom" yaml:"is_custom"`
}

// UpdateGameTypeByID godoc
// @Summary Updates a single GameType entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateGameTypeRequest true "Update parameters"
// @Param id path string true "GameType id"
// @Success 200 {object} APIGameType
// @Router /crud/gameTypes/:id [put]
func (*GeneratedCrudController) UpdateGameTypeByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateGameTypeRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingGameType, err := models.GameTypes(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Name != nil {
		existingGameType.Name = *updateReq.Name
	}

	if updateReq.IsCustom != nil {
		existingGameType.IsCustom = *updateReq.IsCustom
	}

	_, err = existingGameType.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingGameType)
}
