// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// DeleteEventByID godoc
// @Summary Soft deletes a single Event entity based on their id
// @Produce json
// @Success 200 {object} APIEvent
// @Param id path string true "Event id"
// @Param hardDelete query string false "Hard delete event"
// @Router /crud/events/:id [delete]
func (*GeneratedCrudController) DeleteEventByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	hardDelete := c.Query("hardDelete") == "true"

	existingEvent, err := models.Events(qm.Where("id = ?", id)).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	_, err = existingEvent.DeleteG(c.Request.Context(), hardDelete)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingEvent)
}

// BulkDeleteEventsByIDs godoc
// @Summary Soft deletes a range of events by their ids
// @Produce json
// @Success 200 {object} DeletedCount
// @Param req body IDList true "List of ids to delete"
// @Param hardDelete query string false "Hard delete event"
// @Router /crud/events [delete]
func (*GeneratedCrudController) BulkDeleteEventsByIDs(c *gin.Context) {

	var ids IDList

	err := c.BindJSON(&ids)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	hardDelete := c.Query("hardDelete") == "true"

	var idInterface []interface{}

	for _, id := range ids.IDs {
		idInterface = append(idInterface, id)
	}

	deleted, err := models.Events(qm.WhereIn("id IN ?", idInterface...)).DeleteAllG(c.Request.Context(), hardDelete)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, DeletedCount{DeletedCount: int(deleted)})
}

// UnDeleteEventByID godoc
// @Summary Undeletes a event by id
// @Produce json
// @Success 200 {object} APIEvent
// @Param id path string true "Event id"
// @Router /crud/events/:id/unDelete [post]
func (*GeneratedCrudController) UnDeleteEventByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	deletedEvent, err := models.Events(qm.Where("id = ?", id), qm.WithDeleted()).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	deletedEvent.DeletedAt = null.Time{
		Valid: false,
	}

	_, err = deletedEvent.UpdateG(c.Request.Context(), boil.Whitelist("deleted_at"))
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, deletedEvent)
}
