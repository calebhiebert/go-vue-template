// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/types"
)

type GenerateProfileQuestionStringID func(*CreateProfileQuestionRequest) string

var GenerateProfileQuestionID GenerateProfileQuestionStringID

type APICreateProfileQuestionRequest struct {
	Question   *string `boil:"question" json:"question" toml:"question" yaml:"question"`
	AnswerType *int    `boil:"answer_type" json:"answer_type" toml:"answer_type" yaml:"answer_type"`

	Options map[string]interface{} `boil:"options" json:"options" toml:"options" yaml:"options"`
	Weight  *float64               `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
}

type CreateProfileQuestionRequest struct {
	ID         *string     `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Question   string      `boil:"question" json:"question,omitempty" toml:"question" binding:"required" yaml:"question"`
	AnswerType int         `boil:"answer_type" json:"answer_type,omitempty" toml:"answer_type" binding:"required" yaml:"answer_type"`
	Options    *types.JSON `boil:"options" json:"options,omitempty" toml:"options"  yaml:"options,omitempty"`
	Weight     *float64    `boil:"weight" json:"weight,omitempty" toml:"weight"  yaml:"weight,omitempty"`
}

// CreateProfileQuestion godoc
// @Summary Creates a new ProfileQuestion
// @Produce json
// @Accept json
// @Param req body APICreateProfileQuestionRequest true "Creation parameters"
// @Success 200 {object} APIProfileQuestion
// @Router /crud/profileQuestions  [post]
func (*GeneratedCrudController) CreateProfileQuestion(c *gin.Context) {
	var createReq CreateProfileQuestionRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newProfileQuestion := models.ProfileQuestion{}

	if createReq.ID != nil {
		newProfileQuestion.ID = *createReq.ID
	} else {
		newProfileQuestion.ID = GenerateProfileQuestionID(&createReq)
	}

	newProfileQuestion.Question = createReq.Question

	newProfileQuestion.AnswerType = createReq.AnswerType

	if createReq.Options != nil {
		newProfileQuestion.Options = *createReq.Options
	}

	if createReq.Weight != nil {
		newProfileQuestion.Weight = *createReq.Weight
	}

	err = newProfileQuestion.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newProfileQuestion)
}
