// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateInviteRequest struct {
	EventID *string `boil:"event_id" json:"event_id,omitempty" toml:"event_id" yaml:"event_id,omitempty"`

	GroupID *string `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`

	SuggestedName *string `boil:"suggested_name" json:"suggested_name,omitempty" toml:"suggested_name" yaml:"suggested_name,omitempty"`

	Phone *string `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`

	Email *string `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
}

type UpdateInviteRequest struct {
	EventID       *null.String `boil:"event_id" json:"event_id,omitempty" toml:"event_id" yaml:"event_id,omitempty"`
	GroupID       *null.String `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`
	SuggestedName *null.String `boil:"suggested_name" json:"suggested_name,omitempty" toml:"suggested_name" yaml:"suggested_name,omitempty"`
	Phone         *null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	Email         *null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
}

// UpdateInviteByID godoc
// @Summary Updates a single Invite entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateInviteRequest true "Update parameters"
// @Param id path string true "Invite id"
// @Success 200 {object} APIInvite
// @Router /crud/invites/:id [put]
func (*GeneratedCrudController) UpdateInviteByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateInviteRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingInvite, err := models.Invites(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.EventID != nil {
		existingInvite.EventID = *updateReq.EventID
	}

	if updateReq.GroupID != nil {
		existingInvite.GroupID = *updateReq.GroupID
	}

	if updateReq.SuggestedName != nil {
		existingInvite.SuggestedName = *updateReq.SuggestedName
	}

	if updateReq.Phone != nil {
		existingInvite.Phone = *updateReq.Phone
	}

	if updateReq.Email != nil {
		existingInvite.Email = *updateReq.Email
	}

	_, err = existingInvite.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingInvite)
}
