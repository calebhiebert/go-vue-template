// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateEventUserStringID func(*CreateEventUserRequest) string

var GenerateEventUserID GenerateEventUserStringID

type APICreateEventUserRequest struct {
	UserID   *string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EventID  *string `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	IsOwner  *bool   `boil:"is_owner" json:"is_owner" toml:"is_owner" yaml:"is_owner"`
	Accepted *bool   `boil:"accepted" json:"accepted" toml:"accepted" yaml:"accepted"`
}

type CreateEventUserRequest struct {
	UserID   string `boil:"user_id" json:"user_id,omitempty" toml:"user_id" binding:"required" yaml:"user_id"`
	EventID  string `boil:"event_id" json:"event_id,omitempty" toml:"event_id" binding:"required" yaml:"event_id"`
	IsOwner  *bool  `boil:"is_owner" json:"is_owner,omitempty" toml:"is_owner"  yaml:"is_owner,omitempty"`
	Accepted *bool  `boil:"accepted" json:"accepted,omitempty" toml:"accepted"  yaml:"accepted,omitempty"`
}

// CreateEventUser godoc
// @Summary Creates a new EventUser
// @Produce json
// @Accept json
// @Param req body APICreateEventUserRequest true "Creation parameters"
// @Success 200 {object} APIEventUser
// @Router /crud/eventUsers  [post]
func (*GeneratedCrudController) CreateEventUser(c *gin.Context) {
	var createReq CreateEventUserRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newEventUser := models.EventUser{}
	newEventUser.UserID = createReq.UserID

	newEventUser.EventID = createReq.EventID

	if createReq.IsOwner != nil {
		newEventUser.IsOwner = *createReq.IsOwner
	}

	if createReq.Accepted != nil {
		newEventUser.Accepted = *createReq.Accepted
	}

	err = newEventUser.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newEventUser)
}
