// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateGroupUserStringID func(*CreateGroupUserRequest) string

var GenerateGroupUserID GenerateGroupUserStringID

type APICreateGroupUserRequest struct {
	GroupID *string `boil:"group_id" json:"group_id" toml:"group_id" yaml:"group_id"`
	UserID  *string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
}

type CreateGroupUserRequest struct {
	GroupID string `boil:"group_id" json:"group_id,omitempty" toml:"group_id" binding:"required" yaml:"group_id"`
	UserID  string `boil:"user_id" json:"user_id,omitempty" toml:"user_id" binding:"required" yaml:"user_id"`
}

// CreateGroupUser godoc
// @Summary Creates a new GroupUser
// @Produce json
// @Accept json
// @Param req body APICreateGroupUserRequest true "Creation parameters"
// @Success 200 {object} APIGroupUser
// @Router /crud/groupUsers  [post]
func (*GeneratedCrudController) CreateGroupUser(c *gin.Context) {
	var createReq CreateGroupUserRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newGroupUser := models.GroupUser{}
	newGroupUser.GroupID = createReq.GroupID

	newGroupUser.UserID = createReq.UserID

	err = newGroupUser.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newGroupUser)
}
