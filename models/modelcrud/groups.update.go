// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateGroupRequest struct {
	Name        *string `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedByID *string `boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`
}

type UpdateGroupRequest struct {
	Name        *string `boil:"name" json:"name,omitempty" toml:"name" yaml:"name"`
	CreatedByID *string `boil:"created_by_id" json:"created_by_id,omitempty" toml:"created_by_id" yaml:"created_by_id"`
}

// UpdateGroupByID godoc
// @Summary Updates a single Group entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateGroupRequest true "Update parameters"
// @Param id path string true "Group id"
// @Success 200 {object} APIGroup
// @Router /crud/groups/:id [put]
func (*GeneratedCrudController) UpdateGroupByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateGroupRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingGroup, err := models.Groups(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Name != nil {
		existingGroup.Name = *updateReq.Name
	}

	if updateReq.CreatedByID != nil {
		existingGroup.CreatedByID = *updateReq.CreatedByID
	}

	_, err = existingGroup.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingGroup)
}
