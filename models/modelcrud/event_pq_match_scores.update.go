// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateEventPQMatchScoreRequest struct {
	EventID           *string `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	ProfileQuestionID *string `boil:"profile_question_id" json:"profile_question_id" toml:"profile_question_id" yaml:"profile_question_id"`

	RatingAvg *int `boil:"rating_avg" json:"rating_avg,omitempty" toml:"rating_avg" yaml:"rating_avg,omitempty"`

	NumAvg *float64 `boil:"num_avg" json:"num_avg,omitempty" toml:"num_avg" yaml:"num_avg,omitempty"`
}

type UpdateEventPQMatchScoreRequest struct {
	EventID           *string       `boil:"event_id" json:"event_id,omitempty" toml:"event_id" yaml:"event_id"`
	ProfileQuestionID *string       `boil:"profile_question_id" json:"profile_question_id,omitempty" toml:"profile_question_id" yaml:"profile_question_id"`
	RatingAvg         *null.Int     `boil:"rating_avg" json:"rating_avg,omitempty" toml:"rating_avg" yaml:"rating_avg,omitempty"`
	NumAvg            *null.Float64 `boil:"num_avg" json:"num_avg,omitempty" toml:"num_avg" yaml:"num_avg,omitempty"`
}

// UpdateEventPQMatchScoreByID godoc
// @Summary Updates a single EventPQMatchScore entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateEventPQMatchScoreRequest true "Update parameters"
// @Param id path string true "EventPQMatchScore id"
// @Success 200 {object} APIEventPQMatchScore
// @Router /crud/eventPQMatchScores/:id [put]
func (*GeneratedCrudController) UpdateEventPQMatchScoreByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateEventPQMatchScoreRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingEventPQMatchScore, err := models.EventPQMatchScores(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}
	if updateReq.EventID != nil {
		existingEventPQMatchScore.EventID = *updateReq.EventID
	}

	if updateReq.ProfileQuestionID != nil {
		existingEventPQMatchScore.ProfileQuestionID = *updateReq.ProfileQuestionID
	}

	if updateReq.RatingAvg != nil {
		existingEventPQMatchScore.RatingAvg = *updateReq.RatingAvg
	}

	if updateReq.NumAvg != nil {
		existingEventPQMatchScore.NumAvg = *updateReq.NumAvg
	}

	_, err = existingEventPQMatchScore.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingEventPQMatchScore)
}
