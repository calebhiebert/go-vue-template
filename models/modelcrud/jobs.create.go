// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateJobStringID func(*CreateJobRequest) string

var GenerateJobID GenerateJobStringID

type APICreateJobRequest struct {
	Type     *string `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Priority *int    `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`

	Source *string `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`

	Data map[string]interface{} `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`

	RunAt *time.Time `boil:"run_at" json:"run_at,omitempty" toml:"run_at" yaml:"run_at,omitempty"`

	FailureData map[string]interface{} `boil:"failure_data" json:"failure_data,omitempty" toml:"failure_data" yaml:"failure_data,omitempty"`
	MaxRetries  *int                   `boil:"max_retries" json:"max_retries" toml:"max_retries" yaml:"max_retries"`

	RetryCount *int    `boil:"retry_count" json:"retry_count,omitempty" toml:"retry_count" yaml:"retry_count,omitempty"`
	Status     *string `boil:"status" json:"status" toml:"status" yaml:"status"`

	FinishedAt *time.Time `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`
}

type CreateJobRequest struct {
	ID          *string      `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Type        *null.String `boil:"type" json:"type,omitempty" toml:"type"  yaml:"type,omitempty"`
	Priority    *int         `boil:"priority" json:"priority,omitempty" toml:"priority"  yaml:"priority,omitempty"`
	Source      *null.String `boil:"source" json:"source,omitempty" toml:"source"  yaml:"source,omitempty"`
	Data        *null.JSON   `boil:"data" json:"data,omitempty" toml:"data"  yaml:"data,omitempty"`
	RunAt       *null.Time   `boil:"run_at" json:"run_at,omitempty" toml:"run_at"  yaml:"run_at,omitempty"`
	FailureData *null.JSON   `boil:"failure_data" json:"failure_data,omitempty" toml:"failure_data"  yaml:"failure_data,omitempty"`
	MaxRetries  *int         `boil:"max_retries" json:"max_retries,omitempty" toml:"max_retries"  yaml:"max_retries,omitempty"`
	RetryCount  *null.Int    `boil:"retry_count" json:"retry_count,omitempty" toml:"retry_count"  yaml:"retry_count,omitempty"`
	Status      *string      `boil:"status" json:"status,omitempty" toml:"status"  yaml:"status,omitempty"`
	FinishedAt  *null.Time   `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at"  yaml:"finished_at,omitempty"`
}

// CreateJob godoc
// @Summary Creates a new Job
// @Produce json
// @Accept json
// @Param req body APICreateJobRequest true "Creation parameters"
// @Success 200 {object} APIJob
// @Router /crud/jobs  [post]
func (*GeneratedCrudController) CreateJob(c *gin.Context) {
	var createReq CreateJobRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newJob := models.Job{}

	newJob.ID = uuid.Must(uuid.NewV4()).String()

	if createReq.Type != nil {
		newJob.Type = *createReq.Type
	}

	if createReq.Priority != nil {
		newJob.Priority = *createReq.Priority
	}

	if createReq.Source != nil {
		newJob.Source = *createReq.Source
	}

	if createReq.Data != nil {
		newJob.Data = *createReq.Data
	}

	if createReq.RunAt != nil {
		newJob.RunAt = *createReq.RunAt
	}

	if createReq.FailureData != nil {
		newJob.FailureData = *createReq.FailureData
	}

	if createReq.MaxRetries != nil {
		newJob.MaxRetries = *createReq.MaxRetries
	}

	if createReq.RetryCount != nil {
		newJob.RetryCount = *createReq.RetryCount
	}

	if createReq.Status != nil {
		newJob.Status = *createReq.Status
	}

	if createReq.FinishedAt != nil {
		newJob.FinishedAt = *createReq.FinishedAt
	}

	err = newJob.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newJob)
}
