// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateImageRequest struct {
	Name *string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type *string `boil:"type" json:"type" toml:"type" yaml:"type"`
	Size *int    `boil:"size" json:"size" toml:"size" yaml:"size"`
}

type UpdateImageRequest struct {
	Name *string `boil:"name" json:"name,omitempty" toml:"name" yaml:"name"`
	Type *string `boil:"type" json:"type,omitempty" toml:"type" yaml:"type"`
	Size *int    `boil:"size" json:"size,omitempty" toml:"size" yaml:"size"`
}

// UpdateImageByID godoc
// @Summary Updates a single Image entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateImageRequest true "Update parameters"
// @Param id path string true "Image id"
// @Success 200 {object} APIImage
// @Router /crud/images/:id [put]
func (*GeneratedCrudController) UpdateImageByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateImageRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingImage, err := models.Images(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Name != nil {
		existingImage.Name = *updateReq.Name
	}

	if updateReq.Type != nil {
		existingImage.Type = *updateReq.Type
	}

	if updateReq.Size != nil {
		existingImage.Size = *updateReq.Size
	}

	_, err = existingImage.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingImage)
}
