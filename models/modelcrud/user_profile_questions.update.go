// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateUserProfileQuestionRequest struct {
	UserID            *string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProfileQuestionID *string `boil:"profile_question_id" json:"profile_question_id" toml:"profile_question_id" yaml:"profile_question_id"`

	ANumber *int `boil:"a_number" json:"a_number,omitempty" toml:"a_number" yaml:"a_number,omitempty"`

	ARating *int `boil:"a_rating" json:"a_rating,omitempty" toml:"a_rating" yaml:"a_rating,omitempty"`

	ADays *string `boil:"a_days" json:"a_days,omitempty" toml:"a_days" yaml:"a_days,omitempty"`

	AText *string `boil:"a_text" json:"a_text,omitempty" toml:"a_text" yaml:"a_text,omitempty"`
}

type UpdateUserProfileQuestionRequest struct {
	UserID            *string      `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id"`
	ProfileQuestionID *string      `boil:"profile_question_id" json:"profile_question_id,omitempty" toml:"profile_question_id" yaml:"profile_question_id"`
	ANumber           *null.Int    `boil:"a_number" json:"a_number,omitempty" toml:"a_number" yaml:"a_number,omitempty"`
	ARating           *null.Int    `boil:"a_rating" json:"a_rating,omitempty" toml:"a_rating" yaml:"a_rating,omitempty"`
	ADays             *null.String `boil:"a_days" json:"a_days,omitempty" toml:"a_days" yaml:"a_days,omitempty"`
	AText             *null.String `boil:"a_text" json:"a_text,omitempty" toml:"a_text" yaml:"a_text,omitempty"`
}

// UpdateUserProfileQuestionByID godoc
// @Summary Updates a single UserProfileQuestion entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateUserProfileQuestionRequest true "Update parameters"
// @Param id path string true "UserProfileQuestion id"
// @Success 200 {object} APIUserProfileQuestion
// @Router /crud/userProfileQuestions/:id [put]
func (*GeneratedCrudController) UpdateUserProfileQuestionByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateUserProfileQuestionRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingUserProfileQuestion, err := models.UserProfileQuestions(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}
	if updateReq.UserID != nil {
		existingUserProfileQuestion.UserID = *updateReq.UserID
	}

	if updateReq.ProfileQuestionID != nil {
		existingUserProfileQuestion.ProfileQuestionID = *updateReq.ProfileQuestionID
	}

	if updateReq.ANumber != nil {
		existingUserProfileQuestion.ANumber = *updateReq.ANumber
	}

	if updateReq.ARating != nil {
		existingUserProfileQuestion.ARating = *updateReq.ARating
	}

	if updateReq.ADays != nil {
		existingUserProfileQuestion.ADays = *updateReq.ADays
	}

	if updateReq.AText != nil {
		existingUserProfileQuestion.AText = *updateReq.AText
	}

	_, err = existingUserProfileQuestion.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingUserProfileQuestion)
}
