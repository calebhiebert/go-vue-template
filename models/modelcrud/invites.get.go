// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIInvite struct {
	// uuid
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`

	// uuid

	EventID *string `boil:"event_id" json:"event_id,omitempty" toml:"event_id" yaml:"event_id,omitempty"`

	// uuid

	GroupID *string `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`

	// character varying

	SuggestedName *string `boil:"suggested_name" json:"suggested_name,omitempty" toml:"suggested_name" yaml:"suggested_name,omitempty"`

	// character varying

	Phone *string `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`

	// character varying

	Email *string `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`

	// timestamp without time zone
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	// timestamp without time zone
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	// timestamp without time zone

	DeletedAt *time.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
}

type GetInvitesResponse struct {
	Invites    models.InviteSlice `json:"invites"`
	Total      int64              `json:"total"`
	NextOffset int64              `json:"next_offset"`
}

type APIGetInvitesResponse struct {
	Invites    []APIInvite `json:"invites"`
	Total      int64       `json:"total"`
	NextOffset int64       `json:"next_offset"`
}

// GetInviteByID godoc
// @Summary Gets a single Invite entity by their id
// @Produce json
// @Success 200 {object} APIGetInvitesResponse
// @Param id path string true "Invite id"
// @Router /crud/invites/:id [get]
func (*GeneratedCrudController) GetInviteByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	Invite, err := models.Invites(qm.Where("id = ?", id)).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, Invite)
}

// GetInvites godoc
// @Summary Gets a list for all entities of the Invite type
// @Produce json
// @Success 200 {object} APIInvite
// @Param withDeleted query string false "Include deleted invites in the results"
// @Param sort.id query string false "Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.event_id query string false "Sort by event_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.group_id query string false "Sort by group_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.suggested_name query string false "Sort by suggested_name. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.phone query string false "Sort by phone. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.email query string false "Sort by email. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.created_at query string false "Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.updated_at query string false "Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Param sort.deleted_at query string false "Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC"
// @Router /crud/invites [get]
func (*GeneratedCrudController) GetInvites(c *gin.Context) {
	queryMods := []qm.QueryMod{}

	withDeleted := c.Query("withDeleted") == "true"

	if withDeleted {
		queryMods = append(queryMods, qm.WithDeleted())
	}

	var orderBy []string

	for q, v := range c.Request.URL.Query() {
		sortDirection := "ASC"

		if v[0] == "DESC" || v[0] == "desc" {
			sortDirection = "DESC"
		}

		switch q {
		case "sort.id":
			orderBy = append(orderBy, "id "+sortDirection)
		case "id.eq":
			queryMods = append(queryMods, qm.Where("id = ?", v[0]))
		case "id.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("id IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("id IS NOT NULL"))
			}

		case "sort.event_id":
			orderBy = append(orderBy, "event_id "+sortDirection)
		case "event_id.eq":
			queryMods = append(queryMods, qm.Where("event_id = ?", v[0]))
		case "event_id.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("event_id IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("event_id IS NOT NULL"))
			}

		case "sort.group_id":
			orderBy = append(orderBy, "group_id "+sortDirection)
		case "group_id.eq":
			queryMods = append(queryMods, qm.Where("group_id = ?", v[0]))
		case "group_id.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("group_id IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("group_id IS NOT NULL"))
			}

		case "sort.suggested_name":
			orderBy = append(orderBy, "suggested_name "+sortDirection)
		case "suggested_name.eq":
			queryMods = append(queryMods, qm.Where("suggested_name = ?", v[0]))
		case "suggested_name.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("suggested_name IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("suggested_name IS NOT NULL"))
			}

		case "suggested_name.cont":
			suggested_nameSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("suggested_name ILIKE ?", suggested_nameSearchString))

		case "sort.phone":
			orderBy = append(orderBy, "phone "+sortDirection)
		case "phone.eq":
			queryMods = append(queryMods, qm.Where("phone = ?", v[0]))
		case "phone.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("phone IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("phone IS NOT NULL"))
			}

		case "phone.cont":
			phoneSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("phone ILIKE ?", phoneSearchString))

		case "sort.email":
			orderBy = append(orderBy, "email "+sortDirection)
		case "email.eq":
			queryMods = append(queryMods, qm.Where("email = ?", v[0]))
		case "email.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("email IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("email IS NOT NULL"))
			}

		case "email.cont":
			emailSearchString := fmt.Sprintf("%%%s%%", strings.ReplaceAll(v[0], "%", "\\%"))
			queryMods = append(queryMods, qm.Where("email ILIKE ?", emailSearchString))

		case "sort.created_at":
			orderBy = append(orderBy, "created_at "+sortDirection)
		case "created_at.eq":
			queryMods = append(queryMods, qm.Where("created_at = ?", v[0]))
		case "created_at.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("created_at IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("created_at IS NOT NULL"))
			}

		case "created_at.gt":
			queryMods = append(queryMods, qm.Where("created_at > ?", v[0]))
		case "created_at.lt":
			queryMods = append(queryMods, qm.Where("created_at < ?", v[0]))
		case "created_at.gte":
			queryMods = append(queryMods, qm.Where("created_at >= ?", v[0]))
		case "created_at.lte":
			queryMods = append(queryMods, qm.Where("created_at <= ?", v[0]))

		case "sort.updated_at":
			orderBy = append(orderBy, "updated_at "+sortDirection)
		case "updated_at.eq":
			queryMods = append(queryMods, qm.Where("updated_at = ?", v[0]))
		case "updated_at.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("updated_at IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("updated_at IS NOT NULL"))
			}

		case "updated_at.gt":
			queryMods = append(queryMods, qm.Where("updated_at > ?", v[0]))
		case "updated_at.lt":
			queryMods = append(queryMods, qm.Where("updated_at < ?", v[0]))
		case "updated_at.gte":
			queryMods = append(queryMods, qm.Where("updated_at >= ?", v[0]))
		case "updated_at.lte":
			queryMods = append(queryMods, qm.Where("updated_at <= ?", v[0]))

		case "sort.deleted_at":
			orderBy = append(orderBy, "deleted_at "+sortDirection)
		case "deleted_at.eq":
			queryMods = append(queryMods, qm.Where("deleted_at = ?", v[0]))
		case "deleted_at.null":
			if v[0] == "true" {
				queryMods = append(queryMods, qm.Where("deleted_at IS NULL"))
			} else {
				queryMods = append(queryMods, qm.Where("deleted_at IS NOT NULL"))
			}

		case "deleted_at.gt":
			queryMods = append(queryMods, qm.Where("deleted_at > ?", v[0]))
		case "deleted_at.lt":
			queryMods = append(queryMods, qm.Where("deleted_at < ?", v[0]))
		case "deleted_at.gte":
			queryMods = append(queryMods, qm.Where("deleted_at >= ?", v[0]))
		case "deleted_at.lte":
			queryMods = append(queryMods, qm.Where("deleted_at <= ?", v[0]))

		}
	}

	count, err := models.Invites(queryMods...).CountG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	limit, offset := api.ExtractLimitOffset(c)

	queryMods = append(queryMods, qm.Limit(limit), qm.Offset(offset))

	if len(orderBy) > 0 {
		queryMods = append(queryMods, qm.OrderBy(strings.Join(orderBy, ", ")))
	} else {
		queryMods = append(queryMods, qm.OrderBy("created_at DESC"))
	}

	invites, err := models.Invites(queryMods...).AllG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if invites == nil {
		invites = models.InviteSlice{}
	}

	c.JSON(http.StatusOK, GetInvitesResponse{
		Invites:    invites,
		Total:      count,
		NextOffset: int64(offset + limit),
	})
}
