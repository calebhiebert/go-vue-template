// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/types"
)

type GenerateUserStringID func(*CreateUserRequest) string

var GenerateUserID GenerateUserStringID

type APICreateUserRequest struct {
	Name *string `boil:"name" json:"name" toml:"name" yaml:"name"`

	Login *string `boil:"login" json:"login,omitempty" toml:"login" yaml:"login,omitempty"`
	Email *string `boil:"email" json:"email" toml:"email" yaml:"email"`

	Sub *string `boil:"sub" json:"sub,omitempty" toml:"sub" yaml:"sub,omitempty"`

	Roles []string `boil:"roles" json:"roles" toml:"roles" yaml:"roles"`

	Image *string `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	Birthday *time.Time `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`

	GenderSelfDefined *bool `boil:"gender_self_defined" json:"gender_self_defined,omitempty" toml:"gender_self_defined" yaml:"gender_self_defined,omitempty"`

	Gender *string `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`

	Location *string `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
}

type CreateUserRequest struct {
	ID                *string            `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name              string             `boil:"name" json:"name,omitempty" toml:"name" binding:"required" yaml:"name"`
	Login             *null.String       `boil:"login" json:"login,omitempty" toml:"login"  yaml:"login,omitempty"`
	Email             string             `boil:"email" json:"email,omitempty" toml:"email" binding:"required" yaml:"email"`
	Sub               *null.String       `boil:"sub" json:"sub,omitempty" toml:"sub"  yaml:"sub,omitempty"`
	Roles             *types.StringArray `boil:"roles" json:"roles,omitempty" toml:"roles"  yaml:"roles,omitempty"`
	Image             *null.String       `boil:"image" json:"image,omitempty" toml:"image"  yaml:"image,omitempty"`
	Birthday          *null.Time         `boil:"birthday" json:"birthday,omitempty" toml:"birthday"  yaml:"birthday,omitempty"`
	GenderSelfDefined *null.Bool         `boil:"gender_self_defined" json:"gender_self_defined,omitempty" toml:"gender_self_defined"  yaml:"gender_self_defined,omitempty"`
	Gender            *null.String       `boil:"gender" json:"gender,omitempty" toml:"gender"  yaml:"gender,omitempty"`
	Location          *null.String       `boil:"location" json:"location,omitempty" toml:"location"  yaml:"location,omitempty"`
}

// CreateUser godoc
// @Summary Creates a new User
// @Produce json
// @Accept json
// @Param req body APICreateUserRequest true "Creation parameters"
// @Success 200 {object} APIUser
// @Router /crud/users  [post]
func (*GeneratedCrudController) CreateUser(c *gin.Context) {
	var createReq CreateUserRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newUser := models.User{}

	newUser.ID = uuid.Must(uuid.NewV4()).String()

	newUser.Name = createReq.Name

	if createReq.Login != nil {
		newUser.Login = *createReq.Login
	}

	newUser.Email = createReq.Email

	if createReq.Sub != nil {
		newUser.Sub = *createReq.Sub
	}

	if createReq.Roles != nil {
		newUser.Roles = *createReq.Roles
	}

	if createReq.Image != nil {
		newUser.Image = *createReq.Image
	}

	if createReq.Birthday != nil {
		newUser.Birthday = *createReq.Birthday
	}

	if createReq.GenderSelfDefined != nil {
		newUser.GenderSelfDefined = *createReq.GenderSelfDefined
	}

	if createReq.Gender != nil {
		newUser.Gender = *createReq.Gender
	}

	if createReq.Location != nil {
		newUser.Location = *createReq.Location
	}

	err = newUser.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newUser)
}
