// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateInviteShortcodeStringID func(*CreateInviteShortcodeRequest) string

var GenerateInviteShortcodeID GenerateInviteShortcodeStringID

type APICreateInviteShortcodeRequest struct {
	InviteID *string `boil:"invite_id" json:"invite_id" toml:"invite_id" yaml:"invite_id"`
}

type CreateInviteShortcodeRequest struct {
	ID       *string `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	InviteID string  `boil:"invite_id" json:"invite_id,omitempty" toml:"invite_id" binding:"required" yaml:"invite_id"`
}

// CreateInviteShortcode godoc
// @Summary Creates a new InviteShortcode
// @Produce json
// @Accept json
// @Param req body APICreateInviteShortcodeRequest true "Creation parameters"
// @Success 200 {object} APIInviteShortcode
// @Router /crud/inviteShortcodes  [post]
func (*GeneratedCrudController) CreateInviteShortcode(c *gin.Context) {
	var createReq CreateInviteShortcodeRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newInviteShortcode := models.InviteShortcode{}

	if createReq.ID != nil {
		newInviteShortcode.ID = *createReq.ID
	} else {
		newInviteShortcode.ID = GenerateInviteShortcodeID(&createReq)
	}

	newInviteShortcode.InviteID = createReq.InviteID

	err = newInviteShortcode.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newInviteShortcode)
}
