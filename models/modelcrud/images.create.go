// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateImageStringID func(*CreateImageRequest) string

var GenerateImageID GenerateImageStringID

type APICreateImageRequest struct {
	Name *string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type *string `boil:"type" json:"type" toml:"type" yaml:"type"`
	Size *int    `boil:"size" json:"size" toml:"size" yaml:"size"`
}

type CreateImageRequest struct {
	ID   *string `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name string  `boil:"name" json:"name,omitempty" toml:"name" binding:"required" yaml:"name"`
	Type string  `boil:"type" json:"type,omitempty" toml:"type" binding:"required" yaml:"type"`
	Size int     `boil:"size" json:"size,omitempty" toml:"size" binding:"required" yaml:"size"`
}

// CreateImage godoc
// @Summary Creates a new Image
// @Produce json
// @Accept json
// @Param req body APICreateImageRequest true "Creation parameters"
// @Success 200 {object} APIImage
// @Router /crud/images  [post]
func (*GeneratedCrudController) CreateImage(c *gin.Context) {
	var createReq CreateImageRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newImage := models.Image{}

	newImage.ID = uuid.Must(uuid.NewV4()).String()

	newImage.Name = createReq.Name

	newImage.Type = createReq.Type

	newImage.Size = createReq.Size

	err = newImage.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newImage)
}
