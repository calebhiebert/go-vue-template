// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateCourseRequest struct {
	Name *string `boil:"name" json:"name" toml:"name" yaml:"name"`

	Address *string `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`

	Latitude *float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`

	Longitude *float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`
}

type UpdateCourseRequest struct {
	Name      *string       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name"`
	Address   *null.String  `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Latitude  *null.Float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`
	Longitude *null.Float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`
}

// UpdateCourseByID godoc
// @Summary Updates a single Course entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateCourseRequest true "Update parameters"
// @Param id path string true "Course id"
// @Success 200 {object} APICourse
// @Router /crud/courses/:id [put]
func (*GeneratedCrudController) UpdateCourseByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateCourseRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingCourse, err := models.Courses(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Name != nil {
		existingCourse.Name = *updateReq.Name
	}

	if updateReq.Address != nil {
		existingCourse.Address = *updateReq.Address
	}

	if updateReq.Latitude != nil {
		existingCourse.Latitude = *updateReq.Latitude
	}

	if updateReq.Longitude != nil {
		existingCourse.Longitude = *updateReq.Longitude
	}

	_, err = existingCourse.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingCourse)
}
