// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/types"
)

type APIUpdateProfileQuestionRequest struct {
	Question   *string `boil:"question" json:"question" toml:"question" yaml:"question"`
	AnswerType *int    `boil:"answer_type" json:"answer_type" toml:"answer_type" yaml:"answer_type"`

	Options map[string]interface{} `boil:"options" json:"options" toml:"options" yaml:"options"`
	Weight  *float64               `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
}

type UpdateProfileQuestionRequest struct {
	Question   *string     `boil:"question" json:"question,omitempty" toml:"question" yaml:"question"`
	AnswerType *int        `boil:"answer_type" json:"answer_type,omitempty" toml:"answer_type" yaml:"answer_type"`
	Options    *types.JSON `boil:"options" json:"options,omitempty" toml:"options" yaml:"options"`
	Weight     *float64    `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight"`
}

// UpdateProfileQuestionByID godoc
// @Summary Updates a single ProfileQuestion entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateProfileQuestionRequest true "Update parameters"
// @Param id path string true "ProfileQuestion id"
// @Success 200 {object} APIProfileQuestion
// @Router /crud/profileQuestions/:id [put]
func (*GeneratedCrudController) UpdateProfileQuestionByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateProfileQuestionRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingProfileQuestion, err := models.ProfileQuestions(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Question != nil {
		existingProfileQuestion.Question = *updateReq.Question
	}

	if updateReq.AnswerType != nil {
		existingProfileQuestion.AnswerType = *updateReq.AnswerType
	}

	if updateReq.Options != nil {
		existingProfileQuestion.Options = *updateReq.Options
	}

	if updateReq.Weight != nil {
		existingProfileQuestion.Weight = *updateReq.Weight
	}

	_, err = existingProfileQuestion.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingProfileQuestion)
}
