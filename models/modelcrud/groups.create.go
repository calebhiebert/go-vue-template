// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateGroupStringID func(*CreateGroupRequest) string

var GenerateGroupID GenerateGroupStringID

type APICreateGroupRequest struct {
	Name        *string `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedByID *string `boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`
}

type CreateGroupRequest struct {
	ID          *string `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name        string  `boil:"name" json:"name,omitempty" toml:"name" binding:"required" yaml:"name"`
	CreatedByID string  `boil:"created_by_id" json:"created_by_id,omitempty" toml:"created_by_id" binding:"required" yaml:"created_by_id"`
}

// CreateGroup godoc
// @Summary Creates a new Group
// @Produce json
// @Accept json
// @Param req body APICreateGroupRequest true "Creation parameters"
// @Success 200 {object} APIGroup
// @Router /crud/groups  [post]
func (*GeneratedCrudController) CreateGroup(c *gin.Context) {
	var createReq CreateGroupRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newGroup := models.Group{}

	newGroup.ID = uuid.Must(uuid.NewV4()).String()

	newGroup.Name = createReq.Name

	newGroup.CreatedByID = createReq.CreatedByID

	err = newGroup.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newGroup)
}
