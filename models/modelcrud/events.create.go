// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateEventStringID func(*CreateEventRequest) string

var GenerateEventID GenerateEventStringID

type APICreateEventRequest struct {
	GameTypeID  *string    `boil:"game_type_id" json:"game_type_id" toml:"game_type_id" yaml:"game_type_id"`
	EventDate   *time.Time `boil:"event_date" json:"event_date" toml:"event_date" yaml:"event_date"`
	PlayerCount *int       `boil:"player_count" json:"player_count" toml:"player_count" yaml:"player_count"`
	Name        *string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedByID *string    `boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`
	CourseID    *string    `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`

	ParentID *string `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Public   *bool   `boil:"public" json:"public" toml:"public" yaml:"public"`
}

type CreateEventRequest struct {
	ID          *string      `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	GameTypeID  string       `boil:"game_type_id" json:"game_type_id,omitempty" toml:"game_type_id" binding:"required" yaml:"game_type_id"`
	EventDate   time.Time    `boil:"event_date" json:"event_date,omitempty" toml:"event_date" binding:"required" yaml:"event_date"`
	PlayerCount int          `boil:"player_count" json:"player_count,omitempty" toml:"player_count" binding:"required" yaml:"player_count"`
	Name        *string      `boil:"name" json:"name,omitempty" toml:"name"  yaml:"name,omitempty"`
	CreatedByID string       `boil:"created_by_id" json:"created_by_id,omitempty" toml:"created_by_id" binding:"required" yaml:"created_by_id"`
	CourseID    string       `boil:"course_id" json:"course_id,omitempty" toml:"course_id" binding:"required" yaml:"course_id"`
	ParentID    *null.String `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id"  yaml:"parent_id,omitempty"`
	Public      *bool        `boil:"public" json:"public,omitempty" toml:"public"  yaml:"public,omitempty"`
}

// CreateEvent godoc
// @Summary Creates a new Event
// @Produce json
// @Accept json
// @Param req body APICreateEventRequest true "Creation parameters"
// @Success 200 {object} APIEvent
// @Router /crud/events  [post]
func (*GeneratedCrudController) CreateEvent(c *gin.Context) {
	var createReq CreateEventRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newEvent := models.Event{}

	newEvent.ID = uuid.Must(uuid.NewV4()).String()

	newEvent.GameTypeID = createReq.GameTypeID

	newEvent.EventDate = createReq.EventDate

	newEvent.PlayerCount = createReq.PlayerCount

	if createReq.Name != nil {
		newEvent.Name = *createReq.Name
	}

	newEvent.CreatedByID = createReq.CreatedByID

	newEvent.CourseID = createReq.CourseID

	if createReq.ParentID != nil {
		newEvent.ParentID = *createReq.ParentID
	}

	if createReq.Public != nil {
		newEvent.Public = *createReq.Public
	}

	err = newEvent.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newEvent)
}
