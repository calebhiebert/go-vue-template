// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateGameTypeStringID func(*CreateGameTypeRequest) string

var GenerateGameTypeID GenerateGameTypeStringID

type APICreateGameTypeRequest struct {
	Name     *string `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsCustom *bool   `boil:"is_custom" json:"is_custom" toml:"is_custom" yaml:"is_custom"`
}

type CreateGameTypeRequest struct {
	ID       *string `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Name     string  `boil:"name" json:"name,omitempty" toml:"name" binding:"required" yaml:"name"`
	IsCustom *bool   `boil:"is_custom" json:"is_custom,omitempty" toml:"is_custom"  yaml:"is_custom,omitempty"`
}

// CreateGameType godoc
// @Summary Creates a new GameType
// @Produce json
// @Accept json
// @Param req body APICreateGameTypeRequest true "Creation parameters"
// @Success 200 {object} APIGameType
// @Router /crud/gameTypes  [post]
func (*GeneratedCrudController) CreateGameType(c *gin.Context) {
	var createReq CreateGameTypeRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newGameType := models.GameType{}

	newGameType.ID = uuid.Must(uuid.NewV4()).String()

	newGameType.Name = createReq.Name

	if createReq.IsCustom != nil {
		newGameType.IsCustom = *createReq.IsCustom
	}

	err = newGameType.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newGameType)
}
