// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/types"
)

type GenerateAccessLogStringID func(*CreateAccessLogRequest) string

var GenerateAccessLogID GenerateAccessLogStringID

type APICreateAccessLogRequest struct {
	Path *string `boil:"path" json:"path" toml:"path" yaml:"path"`

	RequestBody *string `boil:"request_body" json:"request_body,omitempty" toml:"request_body" yaml:"request_body,omitempty"`

	RequestHeaders map[string]interface{} `boil:"request_headers" json:"request_headers,omitempty" toml:"request_headers" yaml:"request_headers,omitempty"`

	ResponseBody map[string]interface{} `boil:"response_body" json:"response_body" toml:"response_body" yaml:"response_body"`

	ResponseHeaders    map[string]interface{} `boil:"response_headers" json:"response_headers" toml:"response_headers" yaml:"response_headers"`
	ResponseCode       *int                   `boil:"response_code" json:"response_code" toml:"response_code" yaml:"response_code"`
	ProcessingDuration *int                   `boil:"processing_duration" json:"processing_duration" toml:"processing_duration" yaml:"processing_duration"`
	RequestMethod      *string                `boil:"request_method" json:"request_method" toml:"request_method" yaml:"request_method"`

	UserID    *string `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	IPAddress *string `boil:"ip_address" json:"ip_address" toml:"ip_address" yaml:"ip_address"`
}

type CreateAccessLogRequest struct {
	ID                 *string      `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Path               string       `boil:"path" json:"path,omitempty" toml:"path" binding:"required" yaml:"path"`
	RequestBody        *null.String `boil:"request_body" json:"request_body,omitempty" toml:"request_body"  yaml:"request_body,omitempty"`
	RequestHeaders     *null.JSON   `boil:"request_headers" json:"request_headers,omitempty" toml:"request_headers"  yaml:"request_headers,omitempty"`
	ResponseBody       types.JSON   `boil:"response_body" json:"response_body,omitempty" toml:"response_body" binding:"required" yaml:"response_body"`
	ResponseHeaders    types.JSON   `boil:"response_headers" json:"response_headers,omitempty" toml:"response_headers" binding:"required" yaml:"response_headers"`
	ResponseCode       int          `boil:"response_code" json:"response_code,omitempty" toml:"response_code" binding:"required" yaml:"response_code"`
	ProcessingDuration int          `boil:"processing_duration" json:"processing_duration,omitempty" toml:"processing_duration" binding:"required" yaml:"processing_duration"`
	RequestMethod      string       `boil:"request_method" json:"request_method,omitempty" toml:"request_method" binding:"required" yaml:"request_method"`
	UserID             *null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id"  yaml:"user_id,omitempty"`
	IPAddress          string       `boil:"ip_address" json:"ip_address,omitempty" toml:"ip_address" binding:"required" yaml:"ip_address"`
}

// CreateAccessLog godoc
// @Summary Creates a new AccessLog
// @Produce json
// @Accept json
// @Param req body APICreateAccessLogRequest true "Creation parameters"
// @Success 200 {object} APIAccessLog
// @Router /crud/accessLogs  [post]
func (*GeneratedCrudController) CreateAccessLog(c *gin.Context) {
	var createReq CreateAccessLogRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newAccessLog := models.AccessLog{}

	newAccessLog.ID = uuid.Must(uuid.NewV4()).String()

	newAccessLog.Path = createReq.Path

	if createReq.RequestBody != nil {
		newAccessLog.RequestBody = *createReq.RequestBody
	}

	if createReq.RequestHeaders != nil {
		newAccessLog.RequestHeaders = *createReq.RequestHeaders
	}

	newAccessLog.ResponseBody = createReq.ResponseBody

	newAccessLog.ResponseHeaders = createReq.ResponseHeaders

	newAccessLog.ResponseCode = createReq.ResponseCode

	newAccessLog.ProcessingDuration = createReq.ProcessingDuration

	newAccessLog.RequestMethod = createReq.RequestMethod

	if createReq.UserID != nil {
		newAccessLog.UserID = *createReq.UserID
	}

	newAccessLog.IPAddress = createReq.IPAddress

	err = newAccessLog.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newAccessLog)
}
