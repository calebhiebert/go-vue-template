// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type GenerateUserProfileQuestionStringID func(*CreateUserProfileQuestionRequest) string

var GenerateUserProfileQuestionID GenerateUserProfileQuestionStringID

type APICreateUserProfileQuestionRequest struct {
	UserID            *string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProfileQuestionID *string `boil:"profile_question_id" json:"profile_question_id" toml:"profile_question_id" yaml:"profile_question_id"`

	ANumber *int `boil:"a_number" json:"a_number,omitempty" toml:"a_number" yaml:"a_number,omitempty"`

	ARating *int `boil:"a_rating" json:"a_rating,omitempty" toml:"a_rating" yaml:"a_rating,omitempty"`

	ADays *string `boil:"a_days" json:"a_days,omitempty" toml:"a_days" yaml:"a_days,omitempty"`

	AText *string `boil:"a_text" json:"a_text,omitempty" toml:"a_text" yaml:"a_text,omitempty"`
}

type CreateUserProfileQuestionRequest struct {
	UserID            string       `boil:"user_id" json:"user_id,omitempty" toml:"user_id" binding:"required" yaml:"user_id"`
	ProfileQuestionID string       `boil:"profile_question_id" json:"profile_question_id,omitempty" toml:"profile_question_id" binding:"required" yaml:"profile_question_id"`
	ANumber           *null.Int    `boil:"a_number" json:"a_number,omitempty" toml:"a_number"  yaml:"a_number,omitempty"`
	ARating           *null.Int    `boil:"a_rating" json:"a_rating,omitempty" toml:"a_rating"  yaml:"a_rating,omitempty"`
	ADays             *null.String `boil:"a_days" json:"a_days,omitempty" toml:"a_days"  yaml:"a_days,omitempty"`
	AText             *null.String `boil:"a_text" json:"a_text,omitempty" toml:"a_text"  yaml:"a_text,omitempty"`
}

// CreateUserProfileQuestion godoc
// @Summary Creates a new UserProfileQuestion
// @Produce json
// @Accept json
// @Param req body APICreateUserProfileQuestionRequest true "Creation parameters"
// @Success 200 {object} APIUserProfileQuestion
// @Router /crud/userProfileQuestions  [post]
func (*GeneratedCrudController) CreateUserProfileQuestion(c *gin.Context) {
	var createReq CreateUserProfileQuestionRequest

	err := c.BindJSON(&createReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	newUserProfileQuestion := models.UserProfileQuestion{}
	newUserProfileQuestion.UserID = createReq.UserID

	newUserProfileQuestion.ProfileQuestionID = createReq.ProfileQuestionID

	if createReq.ANumber != nil {
		newUserProfileQuestion.ANumber = *createReq.ANumber
	}

	if createReq.ARating != nil {
		newUserProfileQuestion.ARating = *createReq.ARating
	}

	if createReq.ADays != nil {
		newUserProfileQuestion.ADays = *createReq.ADays
	}

	if createReq.AText != nil {
		newUserProfileQuestion.AText = *createReq.AText
	}

	err = newUserProfileQuestion.InsertG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, newUserProfileQuestion)
}
