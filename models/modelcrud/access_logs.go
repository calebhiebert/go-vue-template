// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// GetAccessLogByID godoc
// @Summary Gets a single AccessLog entity by their id
// @Produce json
// @Success 200 {object} AccessLog
// @Router /crud/accessLogs/:id [get]
func (*GeneratedCrudController) GetAccessLogByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	AccessLog, err := models.AccessLogs(qm.Where("id = ?", id)).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, AccessLog)
}

// GetAccessLogs godoc
// @Summary Gets a list for all entities of the AccessLog type
// @Produce json
// @Success 200 {object} AccessLogSlice
// @Router /crud/accessLogs [get]
func (*GeneratedCrudController) GetAccessLogs(c *gin.Context) {
	limit, offset := api.ExtractLimitOffset(c)

	accessLogs, err := models.AccessLogs(qm.Limit(limit), qm.Offset(offset)).AllG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, accessLogs)
}

func (gcc *GeneratedCrudController) RegisterAccessLogs(rg *gin.RouterGroup) {
	rg.GET("/accessLogs/:id", gcc.GetAccessLogByID)
	rg.GET("/accessLogs", gcc.GetAccessLogs)
}
