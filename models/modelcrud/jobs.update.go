// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package modelcrud

import (
	"net/http"
	"time"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/gin-gonic/gin"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type APIUpdateJobRequest struct {
	Type     *string `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Priority *int    `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`

	Source *string `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`

	Data map[string]interface{} `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`

	RunAt *time.Time `boil:"run_at" json:"run_at,omitempty" toml:"run_at" yaml:"run_at,omitempty"`

	FailureData map[string]interface{} `boil:"failure_data" json:"failure_data,omitempty" toml:"failure_data" yaml:"failure_data,omitempty"`
	MaxRetries  *int                   `boil:"max_retries" json:"max_retries" toml:"max_retries" yaml:"max_retries"`

	RetryCount *int    `boil:"retry_count" json:"retry_count,omitempty" toml:"retry_count" yaml:"retry_count,omitempty"`
	Status     *string `boil:"status" json:"status" toml:"status" yaml:"status"`

	FinishedAt *time.Time `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`
}

type UpdateJobRequest struct {
	Type        *null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Priority    *int         `boil:"priority" json:"priority,omitempty" toml:"priority" yaml:"priority"`
	Source      *null.String `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`
	Data        *null.JSON   `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`
	RunAt       *null.Time   `boil:"run_at" json:"run_at,omitempty" toml:"run_at" yaml:"run_at,omitempty"`
	FailureData *null.JSON   `boil:"failure_data" json:"failure_data,omitempty" toml:"failure_data" yaml:"failure_data,omitempty"`
	MaxRetries  *int         `boil:"max_retries" json:"max_retries,omitempty" toml:"max_retries" yaml:"max_retries"`
	RetryCount  *null.Int    `boil:"retry_count" json:"retry_count,omitempty" toml:"retry_count" yaml:"retry_count,omitempty"`
	Status      *string      `boil:"status" json:"status,omitempty" toml:"status" yaml:"status"`
	FinishedAt  *null.Time   `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`
}

// UpdateJobByID godoc
// @Summary Updates a single Job entity based on their id
// @Produce json
// @Accept json
// @Param req body APIUpdateJobRequest true "Update parameters"
// @Param id path string true "Job id"
// @Success 200 {object} APIJob
// @Router /crud/jobs/:id [put]
func (*GeneratedCrudController) UpdateJobByID(c *gin.Context) {
	id := c.Param("id")

	if id == "" {
		api.NewAPIError("invalid-id", http.StatusBadRequest, "The provided id was invalid").Respond(c)
		return
	}

	var updateReq UpdateJobRequest

	err := c.BindJSON(&updateReq)
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	existingJob, err := models.Jobs(qm.Where("id = ?", id), qm.For("UPDATE")).OneG(c.Request.Context())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	if updateReq.Type != nil {
		existingJob.Type = *updateReq.Type
	}

	if updateReq.Priority != nil {
		existingJob.Priority = *updateReq.Priority
	}

	if updateReq.Source != nil {
		existingJob.Source = *updateReq.Source
	}

	if updateReq.Data != nil {
		existingJob.Data = *updateReq.Data
	}

	if updateReq.RunAt != nil {
		existingJob.RunAt = *updateReq.RunAt
	}

	if updateReq.FailureData != nil {
		existingJob.FailureData = *updateReq.FailureData
	}

	if updateReq.MaxRetries != nil {
		existingJob.MaxRetries = *updateReq.MaxRetries
	}

	if updateReq.RetryCount != nil {
		existingJob.RetryCount = *updateReq.RetryCount
	}

	if updateReq.Status != nil {
		existingJob.Status = *updateReq.Status
	}

	if updateReq.FinishedAt != nil {
		existingJob.FinishedAt = *updateReq.FinishedAt
	}

	_, err = existingJob.UpdateG(c.Request.Context(), boil.Infer())
	if err != nil {
		api.APIErrorFromErr(err).Respond(c)
		return
	}

	c.JSON(http.StatusOK, existingJob)
}
