// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InviteShortcode is an object representing the database table.
type InviteShortcode struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	InviteID  string    `boil:"invite_id" json:"invite_id" toml:"invite_id" yaml:"invite_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *inviteShortcodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inviteShortcodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InviteShortcodeColumns = struct {
	ID        string
	InviteID  string
	CreatedAt string
}{
	ID:        "id",
	InviteID:  "invite_id",
	CreatedAt: "created_at",
}

var InviteShortcodeTableColumns = struct {
	ID        string
	InviteID  string
	CreatedAt string
}{
	ID:        "invite_shortcodes.id",
	InviteID:  "invite_shortcodes.invite_id",
	CreatedAt: "invite_shortcodes.created_at",
}

// Generated where

var InviteShortcodeWhere = struct {
	ID        whereHelperstring
	InviteID  whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"invite_shortcodes\".\"id\""},
	InviteID:  whereHelperstring{field: "\"invite_shortcodes\".\"invite_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"invite_shortcodes\".\"created_at\""},
}

// InviteShortcodeRels is where relationship names are stored.
var InviteShortcodeRels = struct {
	Invite string
}{
	Invite: "Invite",
}

// inviteShortcodeR is where relationships are stored.
type inviteShortcodeR struct {
	Invite *Invite `boil:"Invite" json:"Invite" toml:"Invite" yaml:"Invite"`
}

// NewStruct creates a new relationship struct
func (*inviteShortcodeR) NewStruct() *inviteShortcodeR {
	return &inviteShortcodeR{}
}

// inviteShortcodeL is where Load methods for each relationship are stored.
type inviteShortcodeL struct{}

var (
	inviteShortcodeAllColumns            = []string{"id", "invite_id", "created_at"}
	inviteShortcodeColumnsWithoutDefault = []string{"id", "invite_id"}
	inviteShortcodeColumnsWithDefault    = []string{"created_at"}
	inviteShortcodePrimaryKeyColumns     = []string{"id"}
)

type (
	// InviteShortcodeSlice is an alias for a slice of pointers to InviteShortcode.
	// This should almost always be used instead of []InviteShortcode.
	InviteShortcodeSlice []*InviteShortcode
	// InviteShortcodeHook is the signature for custom InviteShortcode hook methods
	InviteShortcodeHook func(context.Context, boil.ContextExecutor, *InviteShortcode) error

	inviteShortcodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inviteShortcodeType                 = reflect.TypeOf(&InviteShortcode{})
	inviteShortcodeMapping              = queries.MakeStructMapping(inviteShortcodeType)
	inviteShortcodePrimaryKeyMapping, _ = queries.BindMapping(inviteShortcodeType, inviteShortcodeMapping, inviteShortcodePrimaryKeyColumns)
	inviteShortcodeInsertCacheMut       sync.RWMutex
	inviteShortcodeInsertCache          = make(map[string]insertCache)
	inviteShortcodeUpdateCacheMut       sync.RWMutex
	inviteShortcodeUpdateCache          = make(map[string]updateCache)
	inviteShortcodeUpsertCacheMut       sync.RWMutex
	inviteShortcodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inviteShortcodeBeforeInsertHooks []InviteShortcodeHook
var inviteShortcodeBeforeUpdateHooks []InviteShortcodeHook
var inviteShortcodeBeforeDeleteHooks []InviteShortcodeHook
var inviteShortcodeBeforeUpsertHooks []InviteShortcodeHook

var inviteShortcodeAfterInsertHooks []InviteShortcodeHook
var inviteShortcodeAfterSelectHooks []InviteShortcodeHook
var inviteShortcodeAfterUpdateHooks []InviteShortcodeHook
var inviteShortcodeAfterDeleteHooks []InviteShortcodeHook
var inviteShortcodeAfterUpsertHooks []InviteShortcodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InviteShortcode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InviteShortcode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InviteShortcode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InviteShortcode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InviteShortcode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InviteShortcode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InviteShortcode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InviteShortcode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InviteShortcode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteShortcodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInviteShortcodeHook registers your hook function for all future operations.
func AddInviteShortcodeHook(hookPoint boil.HookPoint, inviteShortcodeHook InviteShortcodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inviteShortcodeBeforeInsertHooks = append(inviteShortcodeBeforeInsertHooks, inviteShortcodeHook)
	case boil.BeforeUpdateHook:
		inviteShortcodeBeforeUpdateHooks = append(inviteShortcodeBeforeUpdateHooks, inviteShortcodeHook)
	case boil.BeforeDeleteHook:
		inviteShortcodeBeforeDeleteHooks = append(inviteShortcodeBeforeDeleteHooks, inviteShortcodeHook)
	case boil.BeforeUpsertHook:
		inviteShortcodeBeforeUpsertHooks = append(inviteShortcodeBeforeUpsertHooks, inviteShortcodeHook)
	case boil.AfterInsertHook:
		inviteShortcodeAfterInsertHooks = append(inviteShortcodeAfterInsertHooks, inviteShortcodeHook)
	case boil.AfterSelectHook:
		inviteShortcodeAfterSelectHooks = append(inviteShortcodeAfterSelectHooks, inviteShortcodeHook)
	case boil.AfterUpdateHook:
		inviteShortcodeAfterUpdateHooks = append(inviteShortcodeAfterUpdateHooks, inviteShortcodeHook)
	case boil.AfterDeleteHook:
		inviteShortcodeAfterDeleteHooks = append(inviteShortcodeAfterDeleteHooks, inviteShortcodeHook)
	case boil.AfterUpsertHook:
		inviteShortcodeAfterUpsertHooks = append(inviteShortcodeAfterUpsertHooks, inviteShortcodeHook)
	}
}

// OneG returns a single inviteShortcode record from the query using the global executor.
func (q inviteShortcodeQuery) OneG(ctx context.Context) (*InviteShortcode, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single inviteShortcode record from the query.
func (q inviteShortcodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InviteShortcode, error) {
	o := &InviteShortcode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invite_shortcodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all InviteShortcode records from the query using the global executor.
func (q inviteShortcodeQuery) AllG(ctx context.Context) (InviteShortcodeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all InviteShortcode records from the query.
func (q inviteShortcodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (InviteShortcodeSlice, error) {
	var o []*InviteShortcode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InviteShortcode slice")
	}

	if len(inviteShortcodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all InviteShortcode records in the query, and panics on error.
func (q inviteShortcodeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all InviteShortcode records in the query.
func (q inviteShortcodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invite_shortcodes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q inviteShortcodeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q inviteShortcodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invite_shortcodes exists")
	}

	return count > 0, nil
}

// Invite pointed to by the foreign key.
func (o *InviteShortcode) Invite(mods ...qm.QueryMod) inviteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InviteID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Invites(queryMods...)
	queries.SetFrom(query.Query, "\"invites\"")

	return query
}

// LoadInvite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inviteShortcodeL) LoadInvite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInviteShortcode interface{}, mods queries.Applicator) error {
	var slice []*InviteShortcode
	var object *InviteShortcode

	if singular {
		object = maybeInviteShortcode.(*InviteShortcode)
	} else {
		slice = *maybeInviteShortcode.(*[]*InviteShortcode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inviteShortcodeR{}
		}
		args = append(args, object.InviteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inviteShortcodeR{}
			}

			for _, a := range args {
				if a == obj.InviteID {
					continue Outer
				}
			}

			args = append(args, obj.InviteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invites`),
		qm.WhereIn(`invites.id in ?`, args...),
		qmhelper.WhereIsNull(`invites.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invite")
	}

	var resultSlice []*Invite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invites")
	}

	if len(inviteShortcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Invite = foreign
		if foreign.R == nil {
			foreign.R = &inviteR{}
		}
		foreign.R.InviteShortcodes = append(foreign.R.InviteShortcodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InviteID == foreign.ID {
				local.R.Invite = foreign
				if foreign.R == nil {
					foreign.R = &inviteR{}
				}
				foreign.R.InviteShortcodes = append(foreign.R.InviteShortcodes, local)
				break
			}
		}
	}

	return nil
}

// SetInviteG of the inviteShortcode to the related item.
// Sets o.R.Invite to related.
// Adds o to related.R.InviteShortcodes.
// Uses the global database handle.
func (o *InviteShortcode) SetInviteG(ctx context.Context, insert bool, related *Invite) error {
	return o.SetInvite(ctx, boil.GetContextDB(), insert, related)
}

// SetInvite of the inviteShortcode to the related item.
// Sets o.R.Invite to related.
// Adds o to related.R.InviteShortcodes.
func (o *InviteShortcode) SetInvite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invite_shortcodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invite_id"}),
		strmangle.WhereClause("\"", "\"", 2, inviteShortcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InviteID = related.ID
	if o.R == nil {
		o.R = &inviteShortcodeR{
			Invite: related,
		}
	} else {
		o.R.Invite = related
	}

	if related.R == nil {
		related.R = &inviteR{
			InviteShortcodes: InviteShortcodeSlice{o},
		}
	} else {
		related.R.InviteShortcodes = append(related.R.InviteShortcodes, o)
	}

	return nil
}

// InviteShortcodes retrieves all the records using an executor.
func InviteShortcodes(mods ...qm.QueryMod) inviteShortcodeQuery {
	mods = append(mods, qm.From("\"invite_shortcodes\""))
	return inviteShortcodeQuery{NewQuery(mods...)}
}

// FindInviteShortcodeG retrieves a single record by ID.
func FindInviteShortcodeG(ctx context.Context, iD string, selectCols ...string) (*InviteShortcode, error) {
	return FindInviteShortcode(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindInviteShortcode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInviteShortcode(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InviteShortcode, error) {
	inviteShortcodeObj := &InviteShortcode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invite_shortcodes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inviteShortcodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invite_shortcodes")
	}

	if err = inviteShortcodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inviteShortcodeObj, err
	}

	return inviteShortcodeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *InviteShortcode) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InviteShortcode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invite_shortcodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteShortcodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inviteShortcodeInsertCacheMut.RLock()
	cache, cached := inviteShortcodeInsertCache[key]
	inviteShortcodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inviteShortcodeAllColumns,
			inviteShortcodeColumnsWithDefault,
			inviteShortcodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inviteShortcodeType, inviteShortcodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inviteShortcodeType, inviteShortcodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invite_shortcodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invite_shortcodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invite_shortcodes")
	}

	if !cached {
		inviteShortcodeInsertCacheMut.Lock()
		inviteShortcodeInsertCache[key] = cache
		inviteShortcodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single InviteShortcode record using the global executor.
// See Update for more documentation.
func (o *InviteShortcode) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the InviteShortcode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InviteShortcode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inviteShortcodeUpdateCacheMut.RLock()
	cache, cached := inviteShortcodeUpdateCache[key]
	inviteShortcodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inviteShortcodeAllColumns,
			inviteShortcodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invite_shortcodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invite_shortcodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, inviteShortcodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inviteShortcodeType, inviteShortcodeMapping, append(wl, inviteShortcodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invite_shortcodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invite_shortcodes")
	}

	if !cached {
		inviteShortcodeUpdateCacheMut.Lock()
		inviteShortcodeUpdateCache[key] = cache
		inviteShortcodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q inviteShortcodeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q inviteShortcodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invite_shortcodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invite_shortcodes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InviteShortcodeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InviteShortcodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteShortcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invite_shortcodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, inviteShortcodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inviteShortcode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inviteShortcode")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *InviteShortcode) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InviteShortcode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invite_shortcodes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteShortcodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inviteShortcodeUpsertCacheMut.RLock()
	cache, cached := inviteShortcodeUpsertCache[key]
	inviteShortcodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inviteShortcodeAllColumns,
			inviteShortcodeColumnsWithDefault,
			inviteShortcodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inviteShortcodeAllColumns,
			inviteShortcodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invite_shortcodes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(inviteShortcodePrimaryKeyColumns))
			copy(conflict, inviteShortcodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invite_shortcodes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(inviteShortcodeType, inviteShortcodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inviteShortcodeType, inviteShortcodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invite_shortcodes")
	}

	if !cached {
		inviteShortcodeUpsertCacheMut.Lock()
		inviteShortcodeUpsertCache[key] = cache
		inviteShortcodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single InviteShortcode record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *InviteShortcode) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single InviteShortcode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InviteShortcode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InviteShortcode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inviteShortcodePrimaryKeyMapping)
	sql := "DELETE FROM \"invite_shortcodes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invite_shortcodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invite_shortcodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q inviteShortcodeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q inviteShortcodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inviteShortcodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invite_shortcodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invite_shortcodes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o InviteShortcodeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InviteShortcodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inviteShortcodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteShortcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invite_shortcodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inviteShortcodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inviteShortcode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invite_shortcodes")
	}

	if len(inviteShortcodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *InviteShortcode) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no InviteShortcode provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InviteShortcode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInviteShortcode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InviteShortcodeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty InviteShortcodeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InviteShortcodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InviteShortcodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteShortcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invite_shortcodes\".* FROM \"invite_shortcodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, inviteShortcodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InviteShortcodeSlice")
	}

	*o = slice

	return nil
}

// InviteShortcodeExistsG checks if the InviteShortcode row exists.
func InviteShortcodeExistsG(ctx context.Context, iD string) (bool, error) {
	return InviteShortcodeExists(ctx, boil.GetContextDB(), iD)
}

// InviteShortcodeExists checks if the InviteShortcode row exists.
func InviteShortcodeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invite_shortcodes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invite_shortcodes exists")
	}

	return exists, nil
}
