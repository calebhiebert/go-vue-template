// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEventPQMatchScores(t *testing.T) {
	t.Parallel()

	query := EventPQMatchScores()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEventPQMatchScoresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventPQMatchScoresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EventPQMatchScores().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventPQMatchScoresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EventPQMatchScoreSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventPQMatchScoresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EventPQMatchScoreExists(ctx, tx, o.EventID, o.ProfileQuestionID)
	if err != nil {
		t.Errorf("Unable to check if EventPQMatchScore exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EventPQMatchScoreExists to return true, but got false.")
	}
}

func testEventPQMatchScoresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	eventPQMatchScoreFound, err := FindEventPQMatchScore(ctx, tx, o.EventID, o.ProfileQuestionID)
	if err != nil {
		t.Error(err)
	}

	if eventPQMatchScoreFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEventPQMatchScoresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EventPQMatchScores().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEventPQMatchScoresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EventPQMatchScores().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEventPQMatchScoresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventPQMatchScoreOne := &EventPQMatchScore{}
	eventPQMatchScoreTwo := &EventPQMatchScore{}
	if err = randomize.Struct(seed, eventPQMatchScoreOne, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}
	if err = randomize.Struct(seed, eventPQMatchScoreTwo, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = eventPQMatchScoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = eventPQMatchScoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EventPQMatchScores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEventPQMatchScoresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	eventPQMatchScoreOne := &EventPQMatchScore{}
	eventPQMatchScoreTwo := &EventPQMatchScore{}
	if err = randomize.Struct(seed, eventPQMatchScoreOne, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}
	if err = randomize.Struct(seed, eventPQMatchScoreTwo, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = eventPQMatchScoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = eventPQMatchScoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func eventPQMatchScoreBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func eventPQMatchScoreAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EventPQMatchScore) error {
	*o = EventPQMatchScore{}
	return nil
}

func testEventPQMatchScoresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EventPQMatchScore{}
	o := &EventPQMatchScore{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore object: %s", err)
	}

	AddEventPQMatchScoreHook(boil.BeforeInsertHook, eventPQMatchScoreBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreBeforeInsertHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.AfterInsertHook, eventPQMatchScoreAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreAfterInsertHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.AfterSelectHook, eventPQMatchScoreAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreAfterSelectHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.BeforeUpdateHook, eventPQMatchScoreBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreBeforeUpdateHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.AfterUpdateHook, eventPQMatchScoreAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreAfterUpdateHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.BeforeDeleteHook, eventPQMatchScoreBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreBeforeDeleteHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.AfterDeleteHook, eventPQMatchScoreAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreAfterDeleteHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.BeforeUpsertHook, eventPQMatchScoreBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreBeforeUpsertHooks = []EventPQMatchScoreHook{}

	AddEventPQMatchScoreHook(boil.AfterUpsertHook, eventPQMatchScoreAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	eventPQMatchScoreAfterUpsertHooks = []EventPQMatchScoreHook{}
}

func testEventPQMatchScoresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventPQMatchScoresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(eventPQMatchScoreColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventPQMatchScoreToOneEventUsingEvent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local EventPQMatchScore
	var foreign Event

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EventID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Event().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventPQMatchScoreSlice{&local}
	if err = local.L.LoadEvent(ctx, tx, false, (*[]*EventPQMatchScore)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Event = nil
	if err = local.L.LoadEvent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventPQMatchScoreToOneProfileQuestionUsingProfileQuestion(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local EventPQMatchScore
	var foreign ProfileQuestion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileQuestionDBTypes, false, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProfileQuestionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProfileQuestion().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventPQMatchScoreSlice{&local}
	if err = local.L.LoadProfileQuestion(ctx, tx, false, (*[]*EventPQMatchScore)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProfileQuestion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProfileQuestion = nil
	if err = local.L.LoadProfileQuestion(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProfileQuestion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventPQMatchScoreToOneSetOpEventUsingEvent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EventPQMatchScore
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventPQMatchScoreDBTypes, false, strmangle.SetComplement(eventPQMatchScorePrimaryKeyColumns, eventPQMatchScoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Event{&b, &c} {
		err = a.SetEvent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Event != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EventPQMatchScores[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID)
		}

		if exists, err := EventPQMatchScoreExists(ctx, tx, a.EventID, a.ProfileQuestionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testEventPQMatchScoreToOneSetOpProfileQuestionUsingProfileQuestion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EventPQMatchScore
	var b, c ProfileQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventPQMatchScoreDBTypes, false, strmangle.SetComplement(eventPQMatchScorePrimaryKeyColumns, eventPQMatchScoreColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileQuestionDBTypes, false, strmangle.SetComplement(profileQuestionPrimaryKeyColumns, profileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileQuestionDBTypes, false, strmangle.SetComplement(profileQuestionPrimaryKeyColumns, profileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProfileQuestion{&b, &c} {
		err = a.SetProfileQuestion(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProfileQuestion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EventPQMatchScores[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProfileQuestionID != x.ID {
			t.Error("foreign key was wrong value", a.ProfileQuestionID)
		}

		if exists, err := EventPQMatchScoreExists(ctx, tx, a.EventID, a.ProfileQuestionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testEventPQMatchScoresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEventPQMatchScoresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EventPQMatchScoreSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEventPQMatchScoresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EventPQMatchScores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	eventPQMatchScoreDBTypes = map[string]string{`EventID`: `uuid`, `ProfileQuestionID`: `character varying`, `RatingAvg`: `integer`, `NumAvg`: `double precision`}
	_                        = bytes.MinRead
)

func testEventPQMatchScoresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(eventPQMatchScorePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(eventPQMatchScoreAllColumns) == len(eventPQMatchScorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEventPQMatchScoresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(eventPQMatchScoreAllColumns) == len(eventPQMatchScorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EventPQMatchScore{}
	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, eventPQMatchScoreDBTypes, true, eventPQMatchScorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(eventPQMatchScoreAllColumns, eventPQMatchScorePrimaryKeyColumns) {
		fields = eventPQMatchScoreAllColumns
	} else {
		fields = strmangle.SetComplement(
			eventPQMatchScoreAllColumns,
			eventPQMatchScorePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EventPQMatchScoreSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEventPQMatchScoresUpsert(t *testing.T) {
	t.Parallel()

	if len(eventPQMatchScoreAllColumns) == len(eventPQMatchScorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EventPQMatchScore{}
	if err = randomize.Struct(seed, &o, eventPQMatchScoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EventPQMatchScore: %s", err)
	}

	count, err := EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, eventPQMatchScoreDBTypes, false, eventPQMatchScorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventPQMatchScore struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EventPQMatchScore: %s", err)
	}

	count, err = EventPQMatchScores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
