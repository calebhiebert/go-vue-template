// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInviteShortcodes(t *testing.T) {
	t.Parallel()

	query := InviteShortcodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInviteShortcodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInviteShortcodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InviteShortcodes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInviteShortcodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteShortcodeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInviteShortcodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InviteShortcodeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InviteShortcode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InviteShortcodeExists to return true, but got false.")
	}
}

func testInviteShortcodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inviteShortcodeFound, err := FindInviteShortcode(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if inviteShortcodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInviteShortcodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InviteShortcodes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInviteShortcodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InviteShortcodes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInviteShortcodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inviteShortcodeOne := &InviteShortcode{}
	inviteShortcodeTwo := &InviteShortcode{}
	if err = randomize.Struct(seed, inviteShortcodeOne, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}
	if err = randomize.Struct(seed, inviteShortcodeTwo, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inviteShortcodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inviteShortcodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InviteShortcodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInviteShortcodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inviteShortcodeOne := &InviteShortcode{}
	inviteShortcodeTwo := &InviteShortcode{}
	if err = randomize.Struct(seed, inviteShortcodeOne, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}
	if err = randomize.Struct(seed, inviteShortcodeTwo, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inviteShortcodeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inviteShortcodeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inviteShortcodeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func inviteShortcodeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteShortcode) error {
	*o = InviteShortcode{}
	return nil
}

func testInviteShortcodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InviteShortcode{}
	o := &InviteShortcode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InviteShortcode object: %s", err)
	}

	AddInviteShortcodeHook(boil.BeforeInsertHook, inviteShortcodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeBeforeInsertHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.AfterInsertHook, inviteShortcodeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeAfterInsertHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.AfterSelectHook, inviteShortcodeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeAfterSelectHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.BeforeUpdateHook, inviteShortcodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeBeforeUpdateHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.AfterUpdateHook, inviteShortcodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeAfterUpdateHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.BeforeDeleteHook, inviteShortcodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeBeforeDeleteHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.AfterDeleteHook, inviteShortcodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeAfterDeleteHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.BeforeUpsertHook, inviteShortcodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeBeforeUpsertHooks = []InviteShortcodeHook{}

	AddInviteShortcodeHook(boil.AfterUpsertHook, inviteShortcodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inviteShortcodeAfterUpsertHooks = []InviteShortcodeHook{}
}

func testInviteShortcodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInviteShortcodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inviteShortcodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInviteShortcodeToOneInviteUsingInvite(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InviteShortcode
	var foreign Invite

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inviteShortcodeDBTypes, false, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, inviteDBTypes, false, inviteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invite struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.InviteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Invite().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := InviteShortcodeSlice{&local}
	if err = local.L.LoadInvite(ctx, tx, false, (*[]*InviteShortcode)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Invite == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Invite = nil
	if err = local.L.LoadInvite(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Invite == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testInviteShortcodeToOneSetOpInviteUsingInvite(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InviteShortcode
	var b, c Invite

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteShortcodeDBTypes, false, strmangle.SetComplement(inviteShortcodePrimaryKeyColumns, inviteShortcodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inviteDBTypes, false, strmangle.SetComplement(invitePrimaryKeyColumns, inviteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Invite{&b, &c} {
		err = a.SetInvite(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Invite != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InviteShortcodes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.InviteID != x.ID {
			t.Error("foreign key was wrong value", a.InviteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InviteID))
		reflect.Indirect(reflect.ValueOf(&a.InviteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.InviteID != x.ID {
			t.Error("foreign key was wrong value", a.InviteID, x.ID)
		}
	}
}

func testInviteShortcodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInviteShortcodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteShortcodeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInviteShortcodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InviteShortcodes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inviteShortcodeDBTypes = map[string]string{`ID`: `character varying`, `InviteID`: `uuid`, `CreatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testInviteShortcodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(inviteShortcodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inviteShortcodeAllColumns) == len(inviteShortcodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInviteShortcodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inviteShortcodeAllColumns) == len(inviteShortcodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InviteShortcode{}
	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inviteShortcodeDBTypes, true, inviteShortcodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inviteShortcodeAllColumns, inviteShortcodePrimaryKeyColumns) {
		fields = inviteShortcodeAllColumns
	} else {
		fields = strmangle.SetComplement(
			inviteShortcodeAllColumns,
			inviteShortcodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InviteShortcodeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInviteShortcodesUpsert(t *testing.T) {
	t.Parallel()

	if len(inviteShortcodeAllColumns) == len(inviteShortcodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InviteShortcode{}
	if err = randomize.Struct(seed, &o, inviteShortcodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InviteShortcode: %s", err)
	}

	count, err := InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inviteShortcodeDBTypes, false, inviteShortcodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InviteShortcode struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InviteShortcode: %s", err)
	}

	count, err = InviteShortcodes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
