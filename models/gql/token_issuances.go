// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateTokenIssuanceFunc func(tokenIssuance *models.TokenIssuance, currentUser *models.User) bool

func UpdateTokenIssuanceHelper(ctx context.Context, id string, ud *model.UpdateTokenIssuance, canUpdate CanUpdateTokenIssuanceFunc) (*models.TokenIssuance, error) {
	existing, err := models.TokenIssuances(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.UserID != nil {

		existing.UserID = *ud.UserID

	}
	if ud.IPAddress != nil {

		existing.IPAddress = *ud.IPAddress

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreTokenIssuanceCreateFunc func(tokenIssuance *models.TokenIssuance, currentUser *models.User) error

func CreateTokenIssuance(ctx context.Context, c *model.CreateTokenIssuance, pre PreTokenIssuanceCreateFunc) (*models.TokenIssuance, error) {
	newTokenIssuance := models.TokenIssuance{}

	newTokenIssuance.ID = uuid.Must(uuid.NewV4()).String()

	newTokenIssuance.UserID = c.UserID

	newTokenIssuance.IPAddress = c.IPAddress

	if err := pre(&newTokenIssuance, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newTokenIssuance.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newTokenIssuance, nil
}

func CreateTokenIssuanceTX(ctx context.Context, tx *sql.Tx, c *model.CreateTokenIssuance, pre PreTokenIssuanceCreateFunc) (*models.TokenIssuance, error) {
	newTokenIssuance := models.TokenIssuance{}

	newTokenIssuance.ID = uuid.Must(uuid.NewV4()).String()

	newTokenIssuance.UserID = c.UserID

	newTokenIssuance.IPAddress = c.IPAddress

	if err := pre(&newTokenIssuance, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newTokenIssuance.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newTokenIssuance, nil
}
