// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateEventUserFunc func(eventUser *models.EventUser, currentUser *models.User) bool

func UpdateEventUserHelper(ctx context.Context, id string, ud *model.UpdateEventUser, canUpdate CanUpdateEventUserFunc) (*models.EventUser, error) {
	existing, err := models.EventUsers(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.UserID != nil {

		existing.UserID = *ud.UserID

	}
	if ud.EventID != nil {

		existing.EventID = *ud.EventID

	}
	if ud.IsOwner != nil {

		existing.IsOwner = *ud.IsOwner

	}
	if ud.Accepted != nil {

		existing.Accepted = *ud.Accepted

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreEventUserCreateFunc func(eventUser *models.EventUser, currentUser *models.User) error

func CreateEventUser(ctx context.Context, c *model.CreateEventUser, pre PreEventUserCreateFunc) (*models.EventUser, error) {
	newEventUser := models.EventUser{}

	newEventUser.UserID = c.UserID

	newEventUser.EventID = c.EventID

	if c.IsOwner != nil {

		newEventUser.IsOwner = *c.IsOwner

	}

	if c.Accepted != nil {

		newEventUser.Accepted = *c.Accepted

	}

	if err := pre(&newEventUser, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newEventUser.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newEventUser, nil
}

func CreateEventUserTX(ctx context.Context, tx *sql.Tx, c *model.CreateEventUser, pre PreEventUserCreateFunc) (*models.EventUser, error) {
	newEventUser := models.EventUser{}

	newEventUser.UserID = c.UserID

	newEventUser.EventID = c.EventID

	if c.IsOwner != nil {

		newEventUser.IsOwner = *c.IsOwner

	}

	if c.Accepted != nil {

		newEventUser.Accepted = *c.Accepted

	}

	if err := pre(&newEventUser, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newEventUser.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newEventUser, nil
}
