// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateGroupUserFunc func(groupUser *models.GroupUser, currentUser *models.User) bool

func UpdateGroupUserHelper(ctx context.Context, id string, ud *model.UpdateGroupUser, canUpdate CanUpdateGroupUserFunc) (*models.GroupUser, error) {
	existing, err := models.GroupUsers(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.GroupID != nil {

		existing.GroupID = *ud.GroupID

	}
	if ud.UserID != nil {

		existing.UserID = *ud.UserID

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreGroupUserCreateFunc func(groupUser *models.GroupUser, currentUser *models.User) error

func CreateGroupUser(ctx context.Context, c *model.CreateGroupUser, pre PreGroupUserCreateFunc) (*models.GroupUser, error) {
	newGroupUser := models.GroupUser{}

	newGroupUser.GroupID = c.GroupID

	newGroupUser.UserID = c.UserID

	if err := pre(&newGroupUser, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newGroupUser.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newGroupUser, nil
}

func CreateGroupUserTX(ctx context.Context, tx *sql.Tx, c *model.CreateGroupUser, pre PreGroupUserCreateFunc) (*models.GroupUser, error) {
	newGroupUser := models.GroupUser{}

	newGroupUser.GroupID = c.GroupID

	newGroupUser.UserID = c.UserID

	if err := pre(&newGroupUser, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newGroupUser.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newGroupUser, nil
}
