// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateAccessLogFunc func(accessLog *models.AccessLog, currentUser *models.User) bool

func UpdateAccessLogHelper(ctx context.Context, id string, ud *model.UpdateAccessLog, canUpdate CanUpdateAccessLogFunc) (*models.AccessLog, error) {
	existing, err := models.AccessLogs(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Path != nil {

		existing.Path = *ud.Path

	}
	if ud.RequestBody != nil {

		existing.RequestBody = *ud.RequestBody

	}

	if ud.ResponseCode != nil {

		existing.ResponseCode = *ud.ResponseCode

	}
	if ud.ProcessingDuration != nil {

		existing.ProcessingDuration = *ud.ProcessingDuration

	}
	if ud.RequestMethod != nil {

		existing.RequestMethod = *ud.RequestMethod

	}
	if ud.UserID != nil {

		existing.UserID = *ud.UserID

	}
	if ud.IPAddress != nil {

		existing.IPAddress = *ud.IPAddress

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreAccessLogCreateFunc func(accessLog *models.AccessLog, currentUser *models.User) error

func CreateAccessLog(ctx context.Context, c *model.CreateAccessLog, pre PreAccessLogCreateFunc) (*models.AccessLog, error) {
	newAccessLog := models.AccessLog{}

	newAccessLog.ID = uuid.Must(uuid.NewV4()).String()

	newAccessLog.Path = c.Path

	if c.RequestBody != nil {

		newAccessLog.RequestBody = *c.RequestBody

	}

	newAccessLog.ResponseCode = c.ResponseCode

	newAccessLog.ProcessingDuration = c.ProcessingDuration

	newAccessLog.RequestMethod = c.RequestMethod

	if c.UserID != nil {

		newAccessLog.UserID = *c.UserID

	}

	newAccessLog.IPAddress = c.IPAddress

	if err := pre(&newAccessLog, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newAccessLog.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newAccessLog, nil
}

func CreateAccessLogTX(ctx context.Context, tx *sql.Tx, c *model.CreateAccessLog, pre PreAccessLogCreateFunc) (*models.AccessLog, error) {
	newAccessLog := models.AccessLog{}

	newAccessLog.ID = uuid.Must(uuid.NewV4()).String()

	newAccessLog.Path = c.Path

	if c.RequestBody != nil {

		newAccessLog.RequestBody = *c.RequestBody

	}

	newAccessLog.ResponseCode = c.ResponseCode

	newAccessLog.ProcessingDuration = c.ProcessingDuration

	newAccessLog.RequestMethod = c.RequestMethod

	if c.UserID != nil {

		newAccessLog.UserID = *c.UserID

	}

	newAccessLog.IPAddress = c.IPAddress

	if err := pre(&newAccessLog, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newAccessLog.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newAccessLog, nil
}
