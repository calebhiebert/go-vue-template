// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateUserFunc func(user *models.User, currentUser *models.User) bool

func UpdateUserHelper(ctx context.Context, id string, ud *model.UpdateUser, canUpdate CanUpdateUserFunc) (*models.User, error) {
	existing, err := models.Users(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Name != nil {

		existing.Name = *ud.Name

	}
	if ud.Login != nil {

		existing.Login = *ud.Login

	}
	if ud.Email != nil {

		existing.Email = *ud.Email

	}
	if ud.Sub != nil {

		existing.Sub = *ud.Sub

	}
	if ud.Roles != nil {

		existing.Roles = util.StringPtrSliceToStringArray(ud.Roles)

	}
	if ud.Image != nil {

		existing.Image = *ud.Image

	}
	if ud.Birthday != nil {

		existing.Birthday = null.TimeFromPtr(ud.Birthday)

	}
	if ud.GenderSelfDefined != nil {

		existing.GenderSelfDefined = *ud.GenderSelfDefined

	}
	if ud.Gender != nil {

		existing.Gender = *ud.Gender

	}
	if ud.Location != nil {

		existing.Location = *ud.Location

	}
	if ud.Phone != nil {

		existing.Phone = *ud.Phone

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreUserCreateFunc func(user *models.User, currentUser *models.User) error

func CreateUser(ctx context.Context, c *model.CreateUser, pre PreUserCreateFunc) (*models.User, error) {
	newUser := models.User{}

	newUser.ID = uuid.Must(uuid.NewV4()).String()

	newUser.Name = c.Name

	if c.Login != nil {

		newUser.Login = *c.Login

	}

	newUser.Email = c.Email

	if c.Sub != nil {

		newUser.Sub = *c.Sub

	}

	if c.Roles != nil {

		newUser.Roles = c.Roles

	}

	if c.Image != nil {

		newUser.Image = *c.Image

	}

	if c.Birthday != nil {

		newUser.Birthday = null.TimeFromPtr(c.Birthday)

	}

	if c.GenderSelfDefined != nil {

		newUser.GenderSelfDefined = *c.GenderSelfDefined

	}

	if c.Gender != nil {

		newUser.Gender = *c.Gender

	}

	if c.Location != nil {

		newUser.Location = *c.Location

	}

	if c.Phone != nil {

		newUser.Phone = *c.Phone

	}

	if err := pre(&newUser, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newUser.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newUser, nil
}

func CreateUserTX(ctx context.Context, tx *sql.Tx, c *model.CreateUser, pre PreUserCreateFunc) (*models.User, error) {
	newUser := models.User{}

	newUser.ID = uuid.Must(uuid.NewV4()).String()

	newUser.Name = c.Name

	if c.Login != nil {

		newUser.Login = *c.Login

	}

	newUser.Email = c.Email

	if c.Sub != nil {

		newUser.Sub = *c.Sub

	}

	if c.Roles != nil {

		newUser.Roles = c.Roles

	}

	if c.Image != nil {

		newUser.Image = *c.Image

	}

	if c.Birthday != nil {

		newUser.Birthday = null.TimeFromPtr(c.Birthday)

	}

	if c.GenderSelfDefined != nil {

		newUser.GenderSelfDefined = *c.GenderSelfDefined

	}

	if c.Gender != nil {

		newUser.Gender = *c.Gender

	}

	if c.Location != nil {

		newUser.Location = *c.Location

	}

	if c.Phone != nil {

		newUser.Phone = *c.Phone

	}

	if err := pre(&newUser, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newUser.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newUser, nil
}
