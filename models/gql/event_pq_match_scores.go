// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateEventPQMatchScoreFunc func(eventPQMatchScore *models.EventPQMatchScore, currentUser *models.User) bool

func UpdateEventPQMatchScoreHelper(ctx context.Context, id string, ud *model.UpdateEventPQMatchScore, canUpdate CanUpdateEventPQMatchScoreFunc) (*models.EventPQMatchScore, error) {
	existing, err := models.EventPQMatchScores(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.EventID != nil {

		existing.EventID = *ud.EventID

	}
	if ud.ProfileQuestionID != nil {

		existing.ProfileQuestionID = *ud.ProfileQuestionID

	}
	if ud.RatingAvg != nil {

		existing.RatingAvg = null.IntFromPtr(ud.RatingAvg)

	}
	if ud.NumAvg != nil {

		existing.NumAvg = null.Float64FromPtr(ud.NumAvg)

	}
	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreEventPQMatchScoreCreateFunc func(eventPQMatchScore *models.EventPQMatchScore, currentUser *models.User) error

func CreateEventPQMatchScore(ctx context.Context, c *model.CreateEventPQMatchScore, pre PreEventPQMatchScoreCreateFunc) (*models.EventPQMatchScore, error) {
	newEventPQMatchScore := models.EventPQMatchScore{}

	newEventPQMatchScore.EventID = c.EventID

	newEventPQMatchScore.ProfileQuestionID = c.ProfileQuestionID

	if c.RatingAvg != nil {

		newEventPQMatchScore.RatingAvg = null.IntFromPtr(c.RatingAvg)

	}

	if c.NumAvg != nil {

		newEventPQMatchScore.NumAvg = null.Float64FromPtr(c.NumAvg)

	}

	if err := pre(&newEventPQMatchScore, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newEventPQMatchScore.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newEventPQMatchScore, nil
}

func CreateEventPQMatchScoreTX(ctx context.Context, tx *sql.Tx, c *model.CreateEventPQMatchScore, pre PreEventPQMatchScoreCreateFunc) (*models.EventPQMatchScore, error) {
	newEventPQMatchScore := models.EventPQMatchScore{}

	newEventPQMatchScore.EventID = c.EventID

	newEventPQMatchScore.ProfileQuestionID = c.ProfileQuestionID

	if c.RatingAvg != nil {

		newEventPQMatchScore.RatingAvg = null.IntFromPtr(c.RatingAvg)

	}

	if c.NumAvg != nil {

		newEventPQMatchScore.NumAvg = null.Float64FromPtr(c.NumAvg)

	}

	if err := pre(&newEventPQMatchScore, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newEventPQMatchScore.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newEventPQMatchScore, nil
}
