// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateJobFunc func(job *models.Job, currentUser *models.User) bool

func UpdateJobHelper(ctx context.Context, id string, ud *model.UpdateJob, canUpdate CanUpdateJobFunc) (*models.Job, error) {
	existing, err := models.Jobs(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Type != nil {

		existing.Type = *ud.Type

	}
	if ud.Priority != nil {

		existing.Priority = *ud.Priority

	}
	if ud.Source != nil {

		existing.Source = *ud.Source

	}

	if ud.RunAt != nil {

		existing.RunAt = null.TimeFromPtr(ud.RunAt)

	}

	if ud.MaxRetries != nil {

		existing.MaxRetries = *ud.MaxRetries

	}
	if ud.RetryCount != nil {

		existing.RetryCount = null.IntFromPtr(ud.RetryCount)

	}
	if ud.Status != nil {

		existing.Status = *ud.Status

	}
	if ud.FinishedAt != nil {

		existing.FinishedAt = null.TimeFromPtr(ud.FinishedAt)

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreJobCreateFunc func(job *models.Job, currentUser *models.User) error

func CreateJob(ctx context.Context, c *model.CreateJob, pre PreJobCreateFunc) (*models.Job, error) {
	newJob := models.Job{}

	newJob.ID = uuid.Must(uuid.NewV4()).String()

	if c.Type != nil {

		newJob.Type = *c.Type

	}

	if c.Priority != nil {

		newJob.Priority = *c.Priority

	}

	if c.Source != nil {

		newJob.Source = *c.Source

	}

	if c.RunAt != nil {

		newJob.RunAt = null.TimeFromPtr(c.RunAt)

	}

	if c.MaxRetries != nil {

		newJob.MaxRetries = *c.MaxRetries

	}

	if c.RetryCount != nil {

		newJob.RetryCount = null.IntFromPtr(c.RetryCount)

	}

	if c.Status != nil {

		newJob.Status = *c.Status

	}

	if c.FinishedAt != nil {

		newJob.FinishedAt = null.TimeFromPtr(c.FinishedAt)

	}

	if err := pre(&newJob, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newJob.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newJob, nil
}

func CreateJobTX(ctx context.Context, tx *sql.Tx, c *model.CreateJob, pre PreJobCreateFunc) (*models.Job, error) {
	newJob := models.Job{}

	newJob.ID = uuid.Must(uuid.NewV4()).String()

	if c.Type != nil {

		newJob.Type = *c.Type

	}

	if c.Priority != nil {

		newJob.Priority = *c.Priority

	}

	if c.Source != nil {

		newJob.Source = *c.Source

	}

	if c.RunAt != nil {

		newJob.RunAt = null.TimeFromPtr(c.RunAt)

	}

	if c.MaxRetries != nil {

		newJob.MaxRetries = *c.MaxRetries

	}

	if c.RetryCount != nil {

		newJob.RetryCount = null.IntFromPtr(c.RetryCount)

	}

	if c.Status != nil {

		newJob.Status = *c.Status

	}

	if c.FinishedAt != nil {

		newJob.FinishedAt = null.TimeFromPtr(c.FinishedAt)

	}

	if err := pre(&newJob, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newJob.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newJob, nil
}
