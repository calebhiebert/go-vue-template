// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateGameTypeFunc func(gameType *models.GameType, currentUser *models.User) bool

func UpdateGameTypeHelper(ctx context.Context, id string, ud *model.UpdateGameType, canUpdate CanUpdateGameTypeFunc) (*models.GameType, error) {
	existing, err := models.GameTypes(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Name != nil {

		existing.Name = *ud.Name

	}
	if ud.IsCustom != nil {

		existing.IsCustom = *ud.IsCustom

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreGameTypeCreateFunc func(gameType *models.GameType, currentUser *models.User) error

func CreateGameType(ctx context.Context, c *model.CreateGameType, pre PreGameTypeCreateFunc) (*models.GameType, error) {
	newGameType := models.GameType{}

	newGameType.ID = uuid.Must(uuid.NewV4()).String()

	newGameType.Name = c.Name

	if c.IsCustom != nil {

		newGameType.IsCustom = *c.IsCustom

	}

	if err := pre(&newGameType, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newGameType.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newGameType, nil
}

func CreateGameTypeTX(ctx context.Context, tx *sql.Tx, c *model.CreateGameType, pre PreGameTypeCreateFunc) (*models.GameType, error) {
	newGameType := models.GameType{}

	newGameType.ID = uuid.Must(uuid.NewV4()).String()

	newGameType.Name = c.Name

	if c.IsCustom != nil {

		newGameType.IsCustom = *c.IsCustom

	}

	if err := pre(&newGameType, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newGameType.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newGameType, nil
}
