// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateInviteFunc func(invite *models.Invite, currentUser *models.User) bool

func UpdateInviteHelper(ctx context.Context, id string, ud *model.UpdateInvite, canUpdate CanUpdateInviteFunc) (*models.Invite, error) {
	existing, err := models.Invites(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.EventID != nil {

		existing.EventID = *ud.EventID

	}
	if ud.GroupID != nil {

		existing.GroupID = *ud.GroupID

	}
	if ud.SuggestedName != nil {

		existing.SuggestedName = *ud.SuggestedName

	}
	if ud.Phone != nil {

		existing.Phone = *ud.Phone

	}
	if ud.Email != nil {

		existing.Email = *ud.Email

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreInviteCreateFunc func(invite *models.Invite, currentUser *models.User) error

func CreateInvite(ctx context.Context, c *model.CreateInvite, pre PreInviteCreateFunc) (*models.Invite, error) {
	newInvite := models.Invite{}

	newInvite.ID = uuid.Must(uuid.NewV4()).String()

	if c.EventID != nil {

		newInvite.EventID = *c.EventID

	}

	if c.GroupID != nil {

		newInvite.GroupID = *c.GroupID

	}

	if c.SuggestedName != nil {

		newInvite.SuggestedName = *c.SuggestedName

	}

	if c.Phone != nil {

		newInvite.Phone = *c.Phone

	}

	if c.Email != nil {

		newInvite.Email = *c.Email

	}

	if err := pre(&newInvite, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newInvite.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newInvite, nil
}

func CreateInviteTX(ctx context.Context, tx *sql.Tx, c *model.CreateInvite, pre PreInviteCreateFunc) (*models.Invite, error) {
	newInvite := models.Invite{}

	newInvite.ID = uuid.Must(uuid.NewV4()).String()

	if c.EventID != nil {

		newInvite.EventID = *c.EventID

	}

	if c.GroupID != nil {

		newInvite.GroupID = *c.GroupID

	}

	if c.SuggestedName != nil {

		newInvite.SuggestedName = *c.SuggestedName

	}

	if c.Phone != nil {

		newInvite.Phone = *c.Phone

	}

	if c.Email != nil {

		newInvite.Email = *c.Email

	}

	if err := pre(&newInvite, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newInvite.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newInvite, nil
}
