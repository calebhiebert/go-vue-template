// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateProfileQuestionFunc func(profileQuestion *models.ProfileQuestion, currentUser *models.User) bool

func UpdateProfileQuestionHelper(ctx context.Context, id string, ud *model.UpdateProfileQuestion, canUpdate CanUpdateProfileQuestionFunc) (*models.ProfileQuestion, error) {
	existing, err := models.ProfileQuestions(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Question != nil {

		existing.Question = *ud.Question

	}
	if ud.AnswerType != nil {

		existing.AnswerType = *ud.AnswerType

	}

	if ud.Weight != nil {

		existing.Weight = *ud.Weight

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreProfileQuestionCreateFunc func(profileQuestion *models.ProfileQuestion, currentUser *models.User) error

func CreateProfileQuestion(ctx context.Context, c *model.CreateProfileQuestion, pre PreProfileQuestionCreateFunc) (*models.ProfileQuestion, error) {
	newProfileQuestion := models.ProfileQuestion{}

	newProfileQuestion.ID = ""

	newProfileQuestion.Question = c.Question

	newProfileQuestion.AnswerType = c.AnswerType

	if c.Weight != nil {

		newProfileQuestion.Weight = *c.Weight

	}

	if err := pre(&newProfileQuestion, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newProfileQuestion.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newProfileQuestion, nil
}

func CreateProfileQuestionTX(ctx context.Context, tx *sql.Tx, c *model.CreateProfileQuestion, pre PreProfileQuestionCreateFunc) (*models.ProfileQuestion, error) {
	newProfileQuestion := models.ProfileQuestion{}

	newProfileQuestion.ID = ""

	newProfileQuestion.Question = c.Question

	newProfileQuestion.AnswerType = c.AnswerType

	if c.Weight != nil {

		newProfileQuestion.Weight = *c.Weight

	}

	if err := pre(&newProfileQuestion, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newProfileQuestion.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newProfileQuestion, nil
}
