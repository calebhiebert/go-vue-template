// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateImageFunc func(image *models.Image, currentUser *models.User) bool

func UpdateImageHelper(ctx context.Context, id string, ud *model.UpdateImage, canUpdate CanUpdateImageFunc) (*models.Image, error) {
	existing, err := models.Images(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Name != nil {

		existing.Name = *ud.Name

	}
	if ud.Type != nil {

		existing.Type = *ud.Type

	}
	if ud.Size != nil {

		existing.Size = *ud.Size

	}
	if ud.Width != nil {

		existing.Width = *ud.Width

	}
	if ud.Height != nil {

		existing.Height = *ud.Height

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreImageCreateFunc func(image *models.Image, currentUser *models.User) error

func CreateImage(ctx context.Context, c *model.CreateImage, pre PreImageCreateFunc) (*models.Image, error) {
	newImage := models.Image{}

	newImage.ID = uuid.Must(uuid.NewV4()).String()

	newImage.Name = c.Name

	newImage.Type = c.Type

	newImage.Size = c.Size

	newImage.Width = c.Width

	newImage.Height = c.Height

	if err := pre(&newImage, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newImage.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newImage, nil
}

func CreateImageTX(ctx context.Context, tx *sql.Tx, c *model.CreateImage, pre PreImageCreateFunc) (*models.Image, error) {
	newImage := models.Image{}

	newImage.ID = uuid.Must(uuid.NewV4()).String()

	newImage.Name = c.Name

	newImage.Type = c.Type

	newImage.Size = c.Size

	newImage.Width = c.Width

	newImage.Height = c.Height

	if err := pre(&newImage, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newImage.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newImage, nil
}
