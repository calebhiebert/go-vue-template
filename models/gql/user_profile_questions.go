// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateUserProfileQuestionFunc func(userProfileQuestion *models.UserProfileQuestion, currentUser *models.User) bool

func UpdateUserProfileQuestionHelper(ctx context.Context, id string, ud *model.UpdateUserProfileQuestion, canUpdate CanUpdateUserProfileQuestionFunc) (*models.UserProfileQuestion, error) {
	existing, err := models.UserProfileQuestions(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.UserID != nil {

		existing.UserID = *ud.UserID

	}
	if ud.ProfileQuestionID != nil {

		existing.ProfileQuestionID = *ud.ProfileQuestionID

	}
	if ud.ANumber != nil {

		existing.ANumber = null.IntFromPtr(ud.ANumber)

	}
	if ud.ARating != nil {

		existing.ARating = null.IntFromPtr(ud.ARating)

	}
	if ud.ADays != nil {

		existing.ADays = *ud.ADays

	}
	if ud.AText != nil {

		existing.AText = *ud.AText

	}
	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreUserProfileQuestionCreateFunc func(userProfileQuestion *models.UserProfileQuestion, currentUser *models.User) error

func CreateUserProfileQuestion(ctx context.Context, c *model.CreateUserProfileQuestion, pre PreUserProfileQuestionCreateFunc) (*models.UserProfileQuestion, error) {
	newUserProfileQuestion := models.UserProfileQuestion{}

	newUserProfileQuestion.UserID = c.UserID

	newUserProfileQuestion.ProfileQuestionID = c.ProfileQuestionID

	if c.ANumber != nil {

		newUserProfileQuestion.ANumber = null.IntFromPtr(c.ANumber)

	}

	if c.ARating != nil {

		newUserProfileQuestion.ARating = null.IntFromPtr(c.ARating)

	}

	if c.ADays != nil {

		newUserProfileQuestion.ADays = *c.ADays

	}

	if c.AText != nil {

		newUserProfileQuestion.AText = *c.AText

	}

	if err := pre(&newUserProfileQuestion, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newUserProfileQuestion.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newUserProfileQuestion, nil
}

func CreateUserProfileQuestionTX(ctx context.Context, tx *sql.Tx, c *model.CreateUserProfileQuestion, pre PreUserProfileQuestionCreateFunc) (*models.UserProfileQuestion, error) {
	newUserProfileQuestion := models.UserProfileQuestion{}

	newUserProfileQuestion.UserID = c.UserID

	newUserProfileQuestion.ProfileQuestionID = c.ProfileQuestionID

	if c.ANumber != nil {

		newUserProfileQuestion.ANumber = null.IntFromPtr(c.ANumber)

	}

	if c.ARating != nil {

		newUserProfileQuestion.ARating = null.IntFromPtr(c.ARating)

	}

	if c.ADays != nil {

		newUserProfileQuestion.ADays = *c.ADays

	}

	if c.AText != nil {

		newUserProfileQuestion.AText = *c.AText

	}

	if err := pre(&newUserProfileQuestion, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newUserProfileQuestion.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newUserProfileQuestion, nil
}
