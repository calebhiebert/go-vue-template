// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package gql

import (
	"context"
	"database/sql"
	"net/http"

	"github.com/calebhiebert/go-vue-template/api"
	"github.com/calebhiebert/go-vue-template/graph/model"
	"github.com/calebhiebert/go-vue-template/models"
	"github.com/calebhiebert/go-vue-template/util"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

type CanUpdateGroupFunc func(group *models.Group, currentUser *models.User) bool

func UpdateGroupHelper(ctx context.Context, id string, ud *model.UpdateGroup, canUpdate CanUpdateGroupFunc) (*models.Group, error) {
	existing, err := models.Groups(qm.Where("id = ?", id)).OneG(ctx)
	if err != nil {
		return nil, err
	}

	if !canUpdate(existing, util.ExtractUser(ctx)) {
		return nil, api.NewAPIError("missing-permissions", http.StatusForbidden, "Missing required permissions")
	}

	if ud.Name != nil {

		existing.Name = *ud.Name

	}

	_, err = existing.UpdateG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return existing, nil
}

type PreGroupCreateFunc func(group *models.Group, currentUser *models.User) error

func CreateGroup(ctx context.Context, c *model.CreateGroup, pre PreGroupCreateFunc) (*models.Group, error) {
	newGroup := models.Group{}

	newGroup.ID = uuid.Must(uuid.NewV4()).String()

	newGroup.Name = c.Name

	if err := pre(&newGroup, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newGroup.InsertG(ctx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newGroup, nil
}

func CreateGroupTX(ctx context.Context, tx *sql.Tx, c *model.CreateGroup, pre PreGroupCreateFunc) (*models.Group, error) {
	newGroup := models.Group{}

	newGroup.ID = uuid.Must(uuid.NewV4()).String()

	newGroup.Name = c.Name

	if err := pre(&newGroup, util.ExtractUser(ctx)); err != nil {
		return nil, err
	}

	err := newGroup.Insert(ctx, tx, boil.Infer())
	if err != nil {
		return nil, err
	}

	return &newGroup, nil
}
