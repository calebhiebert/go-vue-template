// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserProfileQuestions(t *testing.T) {
	t.Parallel()

	query := UserProfileQuestions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserProfileQuestionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserProfileQuestionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserProfileQuestions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserProfileQuestionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserProfileQuestionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserProfileQuestionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserProfileQuestionExists(ctx, tx, o.UserID, o.ProfileQuestionID)
	if err != nil {
		t.Errorf("Unable to check if UserProfileQuestion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserProfileQuestionExists to return true, but got false.")
	}
}

func testUserProfileQuestionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userProfileQuestionFound, err := FindUserProfileQuestion(ctx, tx, o.UserID, o.ProfileQuestionID)
	if err != nil {
		t.Error(err)
	}

	if userProfileQuestionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserProfileQuestionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserProfileQuestions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserProfileQuestionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserProfileQuestions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserProfileQuestionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userProfileQuestionOne := &UserProfileQuestion{}
	userProfileQuestionTwo := &UserProfileQuestion{}
	if err = randomize.Struct(seed, userProfileQuestionOne, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, userProfileQuestionTwo, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userProfileQuestionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userProfileQuestionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserProfileQuestions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserProfileQuestionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userProfileQuestionOne := &UserProfileQuestion{}
	userProfileQuestionTwo := &UserProfileQuestion{}
	if err = randomize.Struct(seed, userProfileQuestionOne, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, userProfileQuestionTwo, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userProfileQuestionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userProfileQuestionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userProfileQuestionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func userProfileQuestionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserProfileQuestion) error {
	*o = UserProfileQuestion{}
	return nil
}

func testUserProfileQuestionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserProfileQuestion{}
	o := &UserProfileQuestion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion object: %s", err)
	}

	AddUserProfileQuestionHook(boil.BeforeInsertHook, userProfileQuestionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionBeforeInsertHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.AfterInsertHook, userProfileQuestionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionAfterInsertHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.AfterSelectHook, userProfileQuestionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionAfterSelectHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.BeforeUpdateHook, userProfileQuestionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionBeforeUpdateHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.AfterUpdateHook, userProfileQuestionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionAfterUpdateHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.BeforeDeleteHook, userProfileQuestionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionBeforeDeleteHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.AfterDeleteHook, userProfileQuestionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionAfterDeleteHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.BeforeUpsertHook, userProfileQuestionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionBeforeUpsertHooks = []UserProfileQuestionHook{}

	AddUserProfileQuestionHook(boil.AfterUpsertHook, userProfileQuestionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userProfileQuestionAfterUpsertHooks = []UserProfileQuestionHook{}
}

func testUserProfileQuestionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserProfileQuestionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userProfileQuestionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserProfileQuestionToOneProfileQuestionUsingProfileQuestion(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserProfileQuestion
	var foreign ProfileQuestion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileQuestionDBTypes, false, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProfileQuestionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProfileQuestion().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserProfileQuestionSlice{&local}
	if err = local.L.LoadProfileQuestion(ctx, tx, false, (*[]*UserProfileQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProfileQuestion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProfileQuestion = nil
	if err = local.L.LoadProfileQuestion(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProfileQuestion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserProfileQuestionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserProfileQuestion
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserProfileQuestionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserProfileQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserProfileQuestionToOneSetOpProfileQuestionUsingProfileQuestion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserProfileQuestion
	var b, c ProfileQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userProfileQuestionDBTypes, false, strmangle.SetComplement(userProfileQuestionPrimaryKeyColumns, userProfileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileQuestionDBTypes, false, strmangle.SetComplement(profileQuestionPrimaryKeyColumns, profileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileQuestionDBTypes, false, strmangle.SetComplement(profileQuestionPrimaryKeyColumns, profileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProfileQuestion{&b, &c} {
		err = a.SetProfileQuestion(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProfileQuestion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserProfileQuestions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProfileQuestionID != x.ID {
			t.Error("foreign key was wrong value", a.ProfileQuestionID)
		}

		if exists, err := UserProfileQuestionExists(ctx, tx, a.UserID, a.ProfileQuestionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserProfileQuestionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserProfileQuestion
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userProfileQuestionDBTypes, false, strmangle.SetComplement(userProfileQuestionPrimaryKeyColumns, userProfileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserProfileQuestions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserProfileQuestionExists(ctx, tx, a.UserID, a.ProfileQuestionID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserProfileQuestionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserProfileQuestionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserProfileQuestionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserProfileQuestionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserProfileQuestions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userProfileQuestionDBTypes = map[string]string{`UserID`: `uuid`, `ProfileQuestionID`: `character varying`, `ANumber`: `integer`, `ARating`: `integer`, `ADays`: `character varying`, `AText`: `text`}
	_                          = bytes.MinRead
)

func testUserProfileQuestionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userProfileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userProfileQuestionAllColumns) == len(userProfileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserProfileQuestionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userProfileQuestionAllColumns) == len(userProfileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserProfileQuestion{}
	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userProfileQuestionDBTypes, true, userProfileQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userProfileQuestionAllColumns, userProfileQuestionPrimaryKeyColumns) {
		fields = userProfileQuestionAllColumns
	} else {
		fields = strmangle.SetComplement(
			userProfileQuestionAllColumns,
			userProfileQuestionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserProfileQuestionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserProfileQuestionsUpsert(t *testing.T) {
	t.Parallel()

	if len(userProfileQuestionAllColumns) == len(userProfileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserProfileQuestion{}
	if err = randomize.Struct(seed, &o, userProfileQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserProfileQuestion: %s", err)
	}

	count, err := UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userProfileQuestionDBTypes, false, userProfileQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserProfileQuestion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserProfileQuestion: %s", err)
	}

	count, err = UserProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
