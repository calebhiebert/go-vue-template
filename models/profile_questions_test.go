// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProfileQuestions(t *testing.T) {
	t.Parallel()

	query := ProfileQuestions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProfileQuestionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfileQuestionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProfileQuestions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfileQuestionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProfileQuestionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfileQuestionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProfileQuestionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProfileQuestion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProfileQuestionExists to return true, but got false.")
	}
}

func testProfileQuestionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	profileQuestionFound, err := FindProfileQuestion(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if profileQuestionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProfileQuestionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProfileQuestions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProfileQuestionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProfileQuestions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProfileQuestionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	profileQuestionOne := &ProfileQuestion{}
	profileQuestionTwo := &ProfileQuestion{}
	if err = randomize.Struct(seed, profileQuestionOne, profileQuestionDBTypes, false, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, profileQuestionTwo, profileQuestionDBTypes, false, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = profileQuestionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = profileQuestionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProfileQuestions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProfileQuestionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	profileQuestionOne := &ProfileQuestion{}
	profileQuestionTwo := &ProfileQuestion{}
	if err = randomize.Struct(seed, profileQuestionOne, profileQuestionDBTypes, false, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, profileQuestionTwo, profileQuestionDBTypes, false, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = profileQuestionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = profileQuestionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func profileQuestionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func profileQuestionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileQuestion) error {
	*o = ProfileQuestion{}
	return nil
}

func testProfileQuestionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProfileQuestion{}
	o := &ProfileQuestion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion object: %s", err)
	}

	AddProfileQuestionHook(boil.BeforeInsertHook, profileQuestionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	profileQuestionBeforeInsertHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.AfterInsertHook, profileQuestionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	profileQuestionAfterInsertHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.AfterSelectHook, profileQuestionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	profileQuestionAfterSelectHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.BeforeUpdateHook, profileQuestionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	profileQuestionBeforeUpdateHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.AfterUpdateHook, profileQuestionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	profileQuestionAfterUpdateHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.BeforeDeleteHook, profileQuestionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	profileQuestionBeforeDeleteHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.AfterDeleteHook, profileQuestionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	profileQuestionAfterDeleteHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.BeforeUpsertHook, profileQuestionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	profileQuestionBeforeUpsertHooks = []ProfileQuestionHook{}

	AddProfileQuestionHook(boil.AfterUpsertHook, profileQuestionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	profileQuestionAfterUpsertHooks = []ProfileQuestionHook{}
}

func testProfileQuestionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProfileQuestionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(profileQuestionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProfileQuestionToManyEventPQMatchScores(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProfileQuestion
	var b, c EventPQMatchScore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventPQMatchScoreDBTypes, false, eventPQMatchScoreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ProfileQuestionID = a.ID
	c.ProfileQuestionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.EventPQMatchScores().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ProfileQuestionID == b.ProfileQuestionID {
			bFound = true
		}
		if v.ProfileQuestionID == c.ProfileQuestionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileQuestionSlice{&a}
	if err = a.L.LoadEventPQMatchScores(ctx, tx, false, (*[]*ProfileQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventPQMatchScores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EventPQMatchScores = nil
	if err = a.L.LoadEventPQMatchScores(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventPQMatchScores); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileQuestionToManyUserProfileQuestions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProfileQuestion
	var b, c UserProfileQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userProfileQuestionDBTypes, false, userProfileQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ProfileQuestionID = a.ID
	c.ProfileQuestionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserProfileQuestions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ProfileQuestionID == b.ProfileQuestionID {
			bFound = true
		}
		if v.ProfileQuestionID == c.ProfileQuestionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileQuestionSlice{&a}
	if err = a.L.LoadUserProfileQuestions(ctx, tx, false, (*[]*ProfileQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserProfileQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserProfileQuestions = nil
	if err = a.L.LoadUserProfileQuestions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserProfileQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileQuestionToManyAddOpEventPQMatchScores(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProfileQuestion
	var b, c, d, e EventPQMatchScore

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileQuestionDBTypes, false, strmangle.SetComplement(profileQuestionPrimaryKeyColumns, profileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EventPQMatchScore{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventPQMatchScoreDBTypes, false, strmangle.SetComplement(eventPQMatchScorePrimaryKeyColumns, eventPQMatchScoreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EventPQMatchScore{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEventPQMatchScores(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ProfileQuestionID {
			t.Error("foreign key was wrong value", a.ID, first.ProfileQuestionID)
		}
		if a.ID != second.ProfileQuestionID {
			t.Error("foreign key was wrong value", a.ID, second.ProfileQuestionID)
		}

		if first.R.ProfileQuestion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProfileQuestion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EventPQMatchScores[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EventPQMatchScores[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EventPQMatchScores().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProfileQuestionToManyAddOpUserProfileQuestions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProfileQuestion
	var b, c, d, e UserProfileQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileQuestionDBTypes, false, strmangle.SetComplement(profileQuestionPrimaryKeyColumns, profileQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserProfileQuestion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userProfileQuestionDBTypes, false, strmangle.SetComplement(userProfileQuestionPrimaryKeyColumns, userProfileQuestionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserProfileQuestion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserProfileQuestions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ProfileQuestionID {
			t.Error("foreign key was wrong value", a.ID, first.ProfileQuestionID)
		}
		if a.ID != second.ProfileQuestionID {
			t.Error("foreign key was wrong value", a.ID, second.ProfileQuestionID)
		}

		if first.R.ProfileQuestion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProfileQuestion != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserProfileQuestions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserProfileQuestions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserProfileQuestions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProfileQuestionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProfileQuestionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProfileQuestionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProfileQuestionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProfileQuestions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	profileQuestionDBTypes = map[string]string{`ID`: `character varying`, `Question`: `text`, `AnswerType`: `integer`, `Options`: `jsonb`, `Weight`: `double precision`, `CreatedAt`: `timestamp without time zone`}
	_                      = bytes.MinRead
)

func testProfileQuestionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(profileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(profileQuestionAllColumns) == len(profileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProfileQuestionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(profileQuestionAllColumns) == len(profileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProfileQuestion{}
	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, profileQuestionDBTypes, true, profileQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(profileQuestionAllColumns, profileQuestionPrimaryKeyColumns) {
		fields = profileQuestionAllColumns
	} else {
		fields = strmangle.SetComplement(
			profileQuestionAllColumns,
			profileQuestionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProfileQuestionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProfileQuestionsUpsert(t *testing.T) {
	t.Parallel()

	if len(profileQuestionAllColumns) == len(profileQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProfileQuestion{}
	if err = randomize.Struct(seed, &o, profileQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProfileQuestion: %s", err)
	}

	count, err := ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, profileQuestionDBTypes, false, profileQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProfileQuestion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProfileQuestion: %s", err)
	}

	count, err = ProfileQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
