// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAccessLogs(t *testing.T) {
	t.Parallel()

	query := AccessLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccessLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccessLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccessLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccessLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccessLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccessLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AccessLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AccessLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccessLogExists to return true, but got false.")
	}
}

func testAccessLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	accessLogFound, err := FindAccessLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if accessLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccessLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AccessLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAccessLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AccessLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccessLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accessLogOne := &AccessLog{}
	accessLogTwo := &AccessLog{}
	if err = randomize.Struct(seed, accessLogOne, accessLogDBTypes, false, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}
	if err = randomize.Struct(seed, accessLogTwo, accessLogDBTypes, false, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accessLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accessLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccessLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccessLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accessLogOne := &AccessLog{}
	accessLogTwo := &AccessLog{}
	if err = randomize.Struct(seed, accessLogOne, accessLogDBTypes, false, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}
	if err = randomize.Struct(seed, accessLogTwo, accessLogDBTypes, false, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accessLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accessLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accessLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func accessLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccessLog) error {
	*o = AccessLog{}
	return nil
}

func testAccessLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AccessLog{}
	o := &AccessLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accessLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AccessLog object: %s", err)
	}

	AddAccessLogHook(boil.BeforeInsertHook, accessLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accessLogBeforeInsertHooks = []AccessLogHook{}

	AddAccessLogHook(boil.AfterInsertHook, accessLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accessLogAfterInsertHooks = []AccessLogHook{}

	AddAccessLogHook(boil.AfterSelectHook, accessLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accessLogAfterSelectHooks = []AccessLogHook{}

	AddAccessLogHook(boil.BeforeUpdateHook, accessLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accessLogBeforeUpdateHooks = []AccessLogHook{}

	AddAccessLogHook(boil.AfterUpdateHook, accessLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accessLogAfterUpdateHooks = []AccessLogHook{}

	AddAccessLogHook(boil.BeforeDeleteHook, accessLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accessLogBeforeDeleteHooks = []AccessLogHook{}

	AddAccessLogHook(boil.AfterDeleteHook, accessLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accessLogAfterDeleteHooks = []AccessLogHook{}

	AddAccessLogHook(boil.BeforeUpsertHook, accessLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accessLogBeforeUpsertHooks = []AccessLogHook{}

	AddAccessLogHook(boil.AfterUpsertHook, accessLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accessLogAfterUpsertHooks = []AccessLogHook{}
}

func testAccessLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccessLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(accessLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccessLogToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AccessLog
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AccessLogSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*AccessLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccessLogToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccessLog
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accessLogDBTypes, false, strmangle.SetComplement(accessLogPrimaryKeyColumns, accessLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccessLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testAccessLogToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccessLog
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accessLogDBTypes, false, strmangle.SetComplement(accessLogPrimaryKeyColumns, accessLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AccessLogs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAccessLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccessLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccessLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccessLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccessLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accessLogDBTypes = map[string]string{`ID`: `uuid`, `Path`: `character varying`, `RequestBody`: `text`, `RequestHeaders`: `jsonb`, `ResponseBody`: `jsonb`, `ResponseHeaders`: `jsonb`, `ResponseCode`: `integer`, `ProcessingDuration`: `integer`, `UserID`: `uuid`, `IPAddress`: `character varying`, `CreatedAt`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testAccessLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(accessLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(accessLogAllColumns) == len(accessLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAccessLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accessLogAllColumns) == len(accessLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccessLog{}
	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accessLogDBTypes, true, accessLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accessLogAllColumns, accessLogPrimaryKeyColumns) {
		fields = accessLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			accessLogAllColumns,
			accessLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AccessLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAccessLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(accessLogAllColumns) == len(accessLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AccessLog{}
	if err = randomize.Struct(seed, &o, accessLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccessLog: %s", err)
	}

	count, err := AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, accessLogDBTypes, false, accessLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccessLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccessLog: %s", err)
	}

	count, err = AccessLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
