// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGameTypes(t *testing.T) {
	t.Parallel()

	query := GameTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGameTypesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameTypesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GameTypes().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameTypesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GameTypes().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGameTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GameTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GameType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GameTypeExists to return true, but got false.")
	}
}

func testGameTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gameTypeFound, err := FindGameType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gameTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGameTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GameTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGameTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GameTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGameTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gameTypeOne := &GameType{}
	gameTypeTwo := &GameType{}
	if err = randomize.Struct(seed, gameTypeOne, gameTypeDBTypes, false, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}
	if err = randomize.Struct(seed, gameTypeTwo, gameTypeDBTypes, false, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gameTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGameTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gameTypeOne := &GameType{}
	gameTypeTwo := &GameType{}
	if err = randomize.Struct(seed, gameTypeOne, gameTypeDBTypes, false, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}
	if err = randomize.Struct(seed, gameTypeTwo, gameTypeDBTypes, false, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gameTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gameTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gameTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func gameTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GameType) error {
	*o = GameType{}
	return nil
}

func testGameTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GameType{}
	o := &GameType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gameTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GameType object: %s", err)
	}

	AddGameTypeHook(boil.BeforeInsertHook, gameTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gameTypeBeforeInsertHooks = []GameTypeHook{}

	AddGameTypeHook(boil.AfterInsertHook, gameTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gameTypeAfterInsertHooks = []GameTypeHook{}

	AddGameTypeHook(boil.AfterSelectHook, gameTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gameTypeAfterSelectHooks = []GameTypeHook{}

	AddGameTypeHook(boil.BeforeUpdateHook, gameTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gameTypeBeforeUpdateHooks = []GameTypeHook{}

	AddGameTypeHook(boil.AfterUpdateHook, gameTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gameTypeAfterUpdateHooks = []GameTypeHook{}

	AddGameTypeHook(boil.BeforeDeleteHook, gameTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gameTypeBeforeDeleteHooks = []GameTypeHook{}

	AddGameTypeHook(boil.AfterDeleteHook, gameTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gameTypeAfterDeleteHooks = []GameTypeHook{}

	AddGameTypeHook(boil.BeforeUpsertHook, gameTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gameTypeBeforeUpsertHooks = []GameTypeHook{}

	AddGameTypeHook(boil.AfterUpsertHook, gameTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gameTypeAfterUpsertHooks = []GameTypeHook{}
}

func testGameTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gameTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGameTypeToManyEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GameType
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GameTypeID = a.ID
	c.GameTypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Events().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GameTypeID == b.GameTypeID {
			bFound = true
		}
		if v.GameTypeID == c.GameTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GameTypeSlice{&a}
	if err = a.L.LoadEvents(ctx, tx, false, (*[]*GameType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Events); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Events = nil
	if err = a.L.LoadEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Events); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGameTypeToManyAddOpEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GameType
	var b, c, d, e Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gameTypeDBTypes, false, strmangle.SetComplement(gameTypePrimaryKeyColumns, gameTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Event{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Event{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GameTypeID {
			t.Error("foreign key was wrong value", a.ID, first.GameTypeID)
		}
		if a.ID != second.GameTypeID {
			t.Error("foreign key was wrong value", a.ID, second.GameTypeID)
		}

		if first.R.GameType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GameType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Events[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Events[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Events().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGameTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGameTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GameTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGameTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GameTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gameTypeDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `IsCustom`: `boolean`, `DeletedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testGameTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gameTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gameTypeAllColumns) == len(gameTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGameTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gameTypeAllColumns) == len(gameTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GameType{}
	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gameTypeDBTypes, true, gameTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gameTypeAllColumns, gameTypePrimaryKeyColumns) {
		fields = gameTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			gameTypeAllColumns,
			gameTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GameTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGameTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(gameTypeAllColumns) == len(gameTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GameType{}
	if err = randomize.Struct(seed, &o, gameTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameType: %s", err)
	}

	count, err := GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gameTypeDBTypes, false, gameTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GameType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GameType: %s", err)
	}

	count, err = GameTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
