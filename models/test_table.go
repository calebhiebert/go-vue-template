// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TestTable is an object representing the database table.
type TestTable struct {
	ID   string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Data null.JSON `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`

	R *testTableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L testTableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TestTableColumns = struct {
	ID   string
	Name string
	Data string
}{
	ID:   "id",
	Name: "name",
	Data: "data",
}

var TestTableTableColumns = struct {
	ID   string
	Name string
	Data string
}{
	ID:   "test_table.id",
	Name: "test_table.name",
	Data: "test_table.data",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TestTableWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
	Data whereHelpernull_JSON
}{
	ID:   whereHelperstring{field: "\"test_table\".\"id\""},
	Name: whereHelperstring{field: "\"test_table\".\"name\""},
	Data: whereHelpernull_JSON{field: "\"test_table\".\"data\""},
}

// TestTableRels is where relationship names are stored.
var TestTableRels = struct {
	TestRelations string
}{
	TestRelations: "TestRelations",
}

// testTableR is where relationships are stored.
type testTableR struct {
	TestRelations TestRelationSlice `boil:"TestRelations" json:"TestRelations" toml:"TestRelations" yaml:"TestRelations"`
}

// NewStruct creates a new relationship struct
func (*testTableR) NewStruct() *testTableR {
	return &testTableR{}
}

// testTableL is where Load methods for each relationship are stored.
type testTableL struct{}

var (
	testTableAllColumns            = []string{"id", "name", "data"}
	testTableColumnsWithoutDefault = []string{"id", "name", "data"}
	testTableColumnsWithDefault    = []string{}
	testTablePrimaryKeyColumns     = []string{"id"}
)

type (
	// TestTableSlice is an alias for a slice of pointers to TestTable.
	// This should almost always be used instead of []TestTable.
	TestTableSlice []*TestTable
	// TestTableHook is the signature for custom TestTable hook methods
	TestTableHook func(context.Context, boil.ContextExecutor, *TestTable) error

	testTableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	testTableType                 = reflect.TypeOf(&TestTable{})
	testTableMapping              = queries.MakeStructMapping(testTableType)
	testTablePrimaryKeyMapping, _ = queries.BindMapping(testTableType, testTableMapping, testTablePrimaryKeyColumns)
	testTableInsertCacheMut       sync.RWMutex
	testTableInsertCache          = make(map[string]insertCache)
	testTableUpdateCacheMut       sync.RWMutex
	testTableUpdateCache          = make(map[string]updateCache)
	testTableUpsertCacheMut       sync.RWMutex
	testTableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var testTableBeforeInsertHooks []TestTableHook
var testTableBeforeUpdateHooks []TestTableHook
var testTableBeforeDeleteHooks []TestTableHook
var testTableBeforeUpsertHooks []TestTableHook

var testTableAfterInsertHooks []TestTableHook
var testTableAfterSelectHooks []TestTableHook
var testTableAfterUpdateHooks []TestTableHook
var testTableAfterDeleteHooks []TestTableHook
var testTableAfterUpsertHooks []TestTableHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TestTable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TestTable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TestTable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TestTable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TestTable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TestTable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TestTable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TestTable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TestTable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testTableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTestTableHook registers your hook function for all future operations.
func AddTestTableHook(hookPoint boil.HookPoint, testTableHook TestTableHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		testTableBeforeInsertHooks = append(testTableBeforeInsertHooks, testTableHook)
	case boil.BeforeUpdateHook:
		testTableBeforeUpdateHooks = append(testTableBeforeUpdateHooks, testTableHook)
	case boil.BeforeDeleteHook:
		testTableBeforeDeleteHooks = append(testTableBeforeDeleteHooks, testTableHook)
	case boil.BeforeUpsertHook:
		testTableBeforeUpsertHooks = append(testTableBeforeUpsertHooks, testTableHook)
	case boil.AfterInsertHook:
		testTableAfterInsertHooks = append(testTableAfterInsertHooks, testTableHook)
	case boil.AfterSelectHook:
		testTableAfterSelectHooks = append(testTableAfterSelectHooks, testTableHook)
	case boil.AfterUpdateHook:
		testTableAfterUpdateHooks = append(testTableAfterUpdateHooks, testTableHook)
	case boil.AfterDeleteHook:
		testTableAfterDeleteHooks = append(testTableAfterDeleteHooks, testTableHook)
	case boil.AfterUpsertHook:
		testTableAfterUpsertHooks = append(testTableAfterUpsertHooks, testTableHook)
	}
}

// One returns a single testTable record from the query.
func (q testTableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TestTable, error) {
	o := &TestTable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for test_table")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TestTable records from the query.
func (q testTableQuery) All(ctx context.Context, exec boil.ContextExecutor) (TestTableSlice, error) {
	var o []*TestTable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TestTable slice")
	}

	if len(testTableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TestTable records in the query.
func (q testTableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count test_table rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q testTableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if test_table exists")
	}

	return count > 0, nil
}

// TestRelations retrieves all the test_relation's TestRelations with an executor.
func (o *TestTable) TestRelations(mods ...qm.QueryMod) testRelationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"test_relation\".\"test_table_id\"=?", o.ID),
	)

	query := TestRelations(queryMods...)
	queries.SetFrom(query.Query, "\"test_relation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"test_relation\".*"})
	}

	return query
}

// LoadTestRelations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (testTableL) LoadTestRelations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestTable interface{}, mods queries.Applicator) error {
	var slice []*TestTable
	var object *TestTable

	if singular {
		object = maybeTestTable.(*TestTable)
	} else {
		slice = *maybeTestTable.(*[]*TestTable)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testTableR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testTableR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`test_relation`),
		qm.WhereIn(`test_relation.test_table_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load test_relation")
	}

	var resultSlice []*TestRelation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice test_relation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on test_relation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for test_relation")
	}

	if len(testRelationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TestRelations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &testRelationR{}
			}
			foreign.R.TestTable = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TestTableID) {
				local.R.TestRelations = append(local.R.TestRelations, foreign)
				if foreign.R == nil {
					foreign.R = &testRelationR{}
				}
				foreign.R.TestTable = local
				break
			}
		}
	}

	return nil
}

// AddTestRelations adds the given related objects to the existing relationships
// of the test_table, optionally inserting them as new records.
// Appends related to o.R.TestRelations.
// Sets related.R.TestTable appropriately.
func (o *TestTable) AddTestRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TestRelation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TestTableID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"test_relation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"test_table_id"}),
				strmangle.WhereClause("\"", "\"", 2, testRelationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TestTableID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &testTableR{
			TestRelations: related,
		}
	} else {
		o.R.TestRelations = append(o.R.TestRelations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &testRelationR{
				TestTable: o,
			}
		} else {
			rel.R.TestTable = o
		}
	}
	return nil
}

// SetTestRelations removes all previously related items of the
// test_table replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TestTable's TestRelations accordingly.
// Replaces o.R.TestRelations with related.
// Sets related.R.TestTable's TestRelations accordingly.
func (o *TestTable) SetTestRelations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TestRelation) error {
	query := "update \"test_relation\" set \"test_table_id\" = null where \"test_table_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TestRelations {
			queries.SetScanner(&rel.TestTableID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TestTable = nil
		}

		o.R.TestRelations = nil
	}
	return o.AddTestRelations(ctx, exec, insert, related...)
}

// RemoveTestRelations relationships from objects passed in.
// Removes related items from R.TestRelations (uses pointer comparison, removal does not keep order)
// Sets related.R.TestTable.
func (o *TestTable) RemoveTestRelations(ctx context.Context, exec boil.ContextExecutor, related ...*TestRelation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TestTableID, nil)
		if rel.R != nil {
			rel.R.TestTable = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("test_table_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TestRelations {
			if rel != ri {
				continue
			}

			ln := len(o.R.TestRelations)
			if ln > 1 && i < ln-1 {
				o.R.TestRelations[i] = o.R.TestRelations[ln-1]
			}
			o.R.TestRelations = o.R.TestRelations[:ln-1]
			break
		}
	}

	return nil
}

// TestTables retrieves all the records using an executor.
func TestTables(mods ...qm.QueryMod) testTableQuery {
	mods = append(mods, qm.From("\"test_table\""))
	return testTableQuery{NewQuery(mods...)}
}

// FindTestTable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTestTable(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TestTable, error) {
	testTableObj := &TestTable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"test_table\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, testTableObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from test_table")
	}

	if err = testTableObj.doAfterSelectHooks(ctx, exec); err != nil {
		return testTableObj, err
	}

	return testTableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TestTable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no test_table provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testTableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	testTableInsertCacheMut.RLock()
	cache, cached := testTableInsertCache[key]
	testTableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			testTableAllColumns,
			testTableColumnsWithDefault,
			testTableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(testTableType, testTableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(testTableType, testTableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"test_table\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"test_table\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into test_table")
	}

	if !cached {
		testTableInsertCacheMut.Lock()
		testTableInsertCache[key] = cache
		testTableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TestTable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TestTable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	testTableUpdateCacheMut.RLock()
	cache, cached := testTableUpdateCache[key]
	testTableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			testTableAllColumns,
			testTablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update test_table, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"test_table\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, testTablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(testTableType, testTableMapping, append(wl, testTablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update test_table row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for test_table")
	}

	if !cached {
		testTableUpdateCacheMut.Lock()
		testTableUpdateCache[key] = cache
		testTableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q testTableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for test_table")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for test_table")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TestTableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"test_table\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testTablePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in testTable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all testTable")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TestTable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no test_table provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testTableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	testTableUpsertCacheMut.RLock()
	cache, cached := testTableUpsertCache[key]
	testTableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			testTableAllColumns,
			testTableColumnsWithDefault,
			testTableColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			testTableAllColumns,
			testTablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert test_table, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(testTablePrimaryKeyColumns))
			copy(conflict, testTablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"test_table\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(testTableType, testTableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(testTableType, testTableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert test_table")
	}

	if !cached {
		testTableUpsertCacheMut.Lock()
		testTableUpsertCache[key] = cache
		testTableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TestTable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TestTable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TestTable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testTablePrimaryKeyMapping)
	sql := "DELETE FROM \"test_table\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from test_table")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for test_table")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q testTableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no testTableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from test_table")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for test_table")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TestTableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(testTableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"test_table\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testTablePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from testTable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for test_table")
	}

	if len(testTableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TestTable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTestTable(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestTableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TestTableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testTablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"test_table\".* FROM \"test_table\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testTablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TestTableSlice")
	}

	*o = slice

	return nil
}

// TestTableExists checks if the TestTable row exists.
func TestTableExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"test_table\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if test_table exists")
	}

	return exists, nil
}
