definitions:
  main.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  main.RegisterRequest:
    properties:
      email:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - login
    - name
    - password
    type: object
  modelcrud.APIAccessLog:
    properties:
      created_at:
        type: string
      id:
        description: uuid
        type: string
      ip_address:
        description: character varying
        type: string
      path:
        description: character varying
        type: string
      processing_duration:
        description: integer
        type: integer
      request_body:
        type: string
      request_headers:
        additionalProperties: true
        type: object
      request_method:
        description: character varying
        type: string
      response_body:
        additionalProperties: true
        type: object
      response_code:
        description: integer
        type: integer
      response_headers:
        additionalProperties: true
        type: object
      user_id:
        type: string
    type: object
  modelcrud.APICourse:
    properties:
      address:
        type: string
      created_at:
        description: timestamp without time zone
        type: string
      deleted_at:
        type: string
      id:
        description: uuid
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        description: character varying
        type: string
      updated_at:
        description: timestamp without time zone
        type: string
    type: object
  modelcrud.APICreateAccessLogRequest:
    properties:
      ip_address:
        type: string
      path:
        type: string
      processing_duration:
        type: integer
      request_body:
        type: string
      request_headers:
        additionalProperties: true
        type: object
      request_method:
        type: string
      response_body:
        additionalProperties: true
        type: object
      response_code:
        type: integer
      response_headers:
        additionalProperties: true
        type: object
      user_id:
        type: string
    type: object
  modelcrud.APICreateCourseRequest:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  modelcrud.APICreateEventPQMatchScoreRequest:
    properties:
      event_id:
        type: string
      num_avg:
        type: number
      profile_question_id:
        type: string
      rating_avg:
        type: integer
    type: object
  modelcrud.APICreateEventRequest:
    properties:
      course_id:
        type: string
      created_by_id:
        type: string
      event_date:
        type: string
      game_type_id:
        type: string
      name:
        type: string
      parent_id:
        type: string
      player_count:
        type: integer
      public:
        type: boolean
    type: object
  modelcrud.APICreateEventUserRequest:
    properties:
      accepted:
        type: boolean
      event_id:
        type: string
      is_owner:
        type: boolean
      user_id:
        type: string
    type: object
  modelcrud.APICreateGameTypeRequest:
    properties:
      is_custom:
        type: boolean
      name:
        type: string
    type: object
  modelcrud.APICreateGroupRequest:
    properties:
      created_by_id:
        type: string
      name:
        type: string
    type: object
  modelcrud.APICreateGroupUserRequest:
    properties:
      group_id:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APICreateImageRequest:
    properties:
      name:
        type: string
      size:
        type: integer
      type:
        type: string
    type: object
  modelcrud.APICreateInviteRequest:
    properties:
      email:
        type: string
      event_id:
        type: string
      group_id:
        type: string
      phone:
        type: string
      suggested_name:
        type: string
    type: object
  modelcrud.APICreateInviteShortcodeRequest:
    properties:
      invite_id:
        type: string
    type: object
  modelcrud.APICreateProfileQuestionRequest:
    properties:
      answer_type:
        type: integer
      options:
        additionalProperties: true
        type: object
      question:
        type: string
      weight:
        type: number
    type: object
  modelcrud.APICreateTokenIssuanceRequest:
    properties:
      ip_address:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APICreateUserProfileQuestionRequest:
    properties:
      a_days:
        type: string
      a_number:
        type: integer
      a_rating:
        type: integer
      a_text:
        type: string
      profile_question_id:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APICreateUserRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      gender_self_defined:
        type: boolean
      image:
        type: string
      location:
        type: string
      login:
        type: string
      name:
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      sub:
        type: string
    type: object
  modelcrud.APIEvent:
    properties:
      course_id:
        description: uuid
        type: string
      created_at:
        description: timestamp without time zone
        type: string
      created_by_id:
        description: uuid
        type: string
      deleted_at:
        type: string
      event_date:
        description: timestamp without time zone
        type: string
      game_type_id:
        description: uuid
        type: string
      id:
        description: uuid
        type: string
      name:
        description: character varying
        type: string
      parent_id:
        type: string
      player_count:
        description: integer
        type: integer
      public:
        description: boolean
        type: boolean
      updated_at:
        description: timestamp without time zone
        type: string
    type: object
  modelcrud.APIEventPQMatchScore:
    properties:
      event_id:
        description: uuid
        type: string
      num_avg:
        type: number
      profile_question_id:
        description: character varying
        type: string
      rating_avg:
        type: integer
    type: object
  modelcrud.APIEventUser:
    properties:
      accepted:
        description: boolean
        type: boolean
      created_at:
        description: timestamp without time zone
        type: string
      deleted_at:
        type: string
      event_id:
        description: uuid
        type: string
      is_owner:
        description: boolean
        type: boolean
      updated_at:
        description: timestamp without time zone
        type: string
      user_id:
        description: uuid
        type: string
    type: object
  modelcrud.APIGameType:
    properties:
      deleted_at:
        type: string
      id:
        description: uuid
        type: string
      is_custom:
        description: boolean
        type: boolean
      name:
        description: character varying
        type: string
    type: object
  modelcrud.APIGetAccessLogsResponse:
    properties:
      access_logs:
        items:
          $ref: '#/definitions/modelcrud.APIAccessLog'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetCoursesResponse:
    properties:
      courses:
        items:
          $ref: '#/definitions/modelcrud.APICourse'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetEventPQMatchScoresResponse:
    properties:
      event_pq_match_scores:
        items:
          $ref: '#/definitions/modelcrud.APIEventPQMatchScore'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetEventUsersResponse:
    properties:
      event_users:
        items:
          $ref: '#/definitions/modelcrud.APIEventUser'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetEventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/modelcrud.APIEvent'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetGameTypesResponse:
    properties:
      game_types:
        items:
          $ref: '#/definitions/modelcrud.APIGameType'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetGroupUsersResponse:
    properties:
      group_users:
        items:
          $ref: '#/definitions/modelcrud.APIGroupUser'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/modelcrud.APIGroup'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetImagesResponse:
    properties:
      images:
        items:
          $ref: '#/definitions/modelcrud.APIImage'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetInviteShortcodesResponse:
    properties:
      invite_shortcodes:
        items:
          $ref: '#/definitions/modelcrud.APIInviteShortcode'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetInvitesResponse:
    properties:
      invites:
        items:
          $ref: '#/definitions/modelcrud.APIInvite'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetProfileQuestionsResponse:
    properties:
      next_offset:
        type: integer
      profile_questions:
        items:
          $ref: '#/definitions/modelcrud.APIProfileQuestion'
        type: array
      total:
        type: integer
    type: object
  modelcrud.APIGetTokenIssuancesResponse:
    properties:
      next_offset:
        type: integer
      token_issuances:
        items:
          $ref: '#/definitions/modelcrud.APITokenIssuance'
        type: array
      total:
        type: integer
    type: object
  modelcrud.APIGetUserProfileQuestionsResponse:
    properties:
      next_offset:
        type: integer
      total:
        type: integer
      user_profile_questions:
        items:
          $ref: '#/definitions/modelcrud.APIUserProfileQuestion'
        type: array
    type: object
  modelcrud.APIGetUsersResponse:
    properties:
      next_offset:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/modelcrud.APIUser'
        type: array
    type: object
  modelcrud.APIGroup:
    properties:
      created_at:
        description: timestamp without time zone
        type: string
      created_by_id:
        description: uuid
        type: string
      deleted_at:
        type: string
      id:
        description: uuid
        type: string
      name:
        description: character varying
        type: string
      updated_at:
        description: timestamp without time zone
        type: string
    type: object
  modelcrud.APIGroupUser:
    properties:
      created_at:
        description: timestamp without time zone
        type: string
      deleted_at:
        type: string
      group_id:
        description: uuid
        type: string
      updated_at:
        description: timestamp without time zone
        type: string
      user_id:
        description: uuid
        type: string
    type: object
  modelcrud.APIImage:
    properties:
      created_at:
        description: timestamp without time zone
        type: string
      deleted_at:
        type: string
      id:
        description: uuid
        type: string
      name:
        description: character varying
        type: string
      size:
        description: integer
        type: integer
      type:
        description: character varying
        type: string
      updated_at:
        description: timestamp without time zone
        type: string
    type: object
  modelcrud.APIInvite:
    properties:
      created_at:
        description: timestamp without time zone
        type: string
      deleted_at:
        type: string
      email:
        type: string
      event_id:
        type: string
      group_id:
        type: string
      id:
        description: uuid
        type: string
      phone:
        type: string
      suggested_name:
        type: string
      updated_at:
        description: timestamp without time zone
        type: string
    type: object
  modelcrud.APIInviteShortcode:
    properties:
      created_at:
        description: timestamp without time zone
        type: string
      id:
        description: character varying
        type: string
      invite_id:
        description: uuid
        type: string
    type: object
  modelcrud.APIProfileQuestion:
    properties:
      answer_type:
        description: integer
        type: integer
      created_at:
        type: string
      id:
        description: character varying
        type: string
      options:
        additionalProperties: true
        type: object
      question:
        description: text
        type: string
      weight:
        description: double precision
        type: number
    type: object
  modelcrud.APITokenIssuance:
    properties:
      created_at:
        type: string
      id:
        description: uuid
        type: string
      ip_address:
        description: character varying
        type: string
      user_id:
        description: uuid
        type: string
    type: object
  modelcrud.APIUpdateAccessLogRequest:
    properties:
      ip_address:
        type: string
      path:
        type: string
      processing_duration:
        type: integer
      request_body:
        type: string
      request_headers:
        additionalProperties: true
        type: object
      request_method:
        type: string
      response_body:
        additionalProperties: true
        type: object
      response_code:
        type: integer
      response_headers:
        additionalProperties: true
        type: object
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateCourseRequest:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  modelcrud.APIUpdateEventPQMatchScoreRequest:
    properties:
      event_id:
        type: string
      num_avg:
        type: number
      profile_question_id:
        type: string
      rating_avg:
        type: integer
    type: object
  modelcrud.APIUpdateEventRequest:
    properties:
      course_id:
        type: string
      created_by_id:
        type: string
      event_date:
        type: string
      game_type_id:
        type: string
      name:
        type: string
      parent_id:
        type: string
      player_count:
        type: integer
      public:
        type: boolean
    type: object
  modelcrud.APIUpdateEventUserRequest:
    properties:
      accepted:
        type: boolean
      event_id:
        type: string
      is_owner:
        type: boolean
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateGameTypeRequest:
    properties:
      is_custom:
        type: boolean
      name:
        type: string
    type: object
  modelcrud.APIUpdateGroupRequest:
    properties:
      created_by_id:
        type: string
      name:
        type: string
    type: object
  modelcrud.APIUpdateGroupUserRequest:
    properties:
      group_id:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateImageRequest:
    properties:
      name:
        type: string
      size:
        type: integer
      type:
        type: string
    type: object
  modelcrud.APIUpdateInviteRequest:
    properties:
      email:
        type: string
      event_id:
        type: string
      group_id:
        type: string
      phone:
        type: string
      suggested_name:
        type: string
    type: object
  modelcrud.APIUpdateInviteShortcodeRequest:
    properties:
      invite_id:
        type: string
    type: object
  modelcrud.APIUpdateProfileQuestionRequest:
    properties:
      answer_type:
        type: integer
      options:
        additionalProperties: true
        type: object
      question:
        type: string
      weight:
        type: number
    type: object
  modelcrud.APIUpdateTokenIssuanceRequest:
    properties:
      ip_address:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateUserProfileQuestionRequest:
    properties:
      a_days:
        type: string
      a_number:
        type: integer
      a_rating:
        type: integer
      a_text:
        type: string
      profile_question_id:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateUserRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      gender_self_defined:
        type: boolean
      image:
        type: string
      location:
        type: string
      login:
        type: string
      name:
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      sub:
        type: string
    type: object
  modelcrud.APIUser:
    properties:
      birthday:
        type: string
      created_at:
        description: timestamp without time zone
        type: string
      deleted_at:
        type: string
      email:
        description: character varying
        type: string
      gender:
        type: string
      gender_self_defined:
        type: boolean
      id:
        description: uuid
        type: string
      image:
        type: string
      location:
        type: string
      login:
        type: string
      name:
        description: character varying
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      sub:
        type: string
      updated_at:
        description: timestamp without time zone
        type: string
    type: object
  modelcrud.APIUserProfileQuestion:
    properties:
      a_days:
        type: string
      a_number:
        type: integer
      a_rating:
        type: integer
      a_text:
        type: string
      profile_question_id:
        description: character varying
        type: string
      user_id:
        description: uuid
        type: string
    type: object
  modelcrud.DeletedCount:
    properties:
      deleted_count:
        type: integer
    type: object
  modelcrud.IDList:
    properties:
      ids:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
  license:
    name: Unknown
  title: Go Vue Template
  version: "0.1"
paths:
  /auth/loginjwt:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Exchanges a JWT from a configurable source for a signed JWT
  /auth/loginup:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Exchanges a username and password for a signed JWT
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Registers a new account using username and password as the authentication
        scheme
  /crud/accessLogs:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete accessLog
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of accessLogs by their ids
    get:
      parameters:
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by path. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.path
        type: string
      - description: 'Sort by request_body. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.request_body
        type: string
      - description: 'Sort by request_headers. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.request_headers
        type: string
      - description: 'Sort by response_body. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.response_body
        type: string
      - description: 'Sort by response_headers. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.response_headers
        type: string
      - description: 'Sort by response_code. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.response_code
        type: string
      - description: 'Sort by processing_duration. Value should be ASC or DESC. eg:
          ?sort.created_at=DESC'
        in: query
        name: sort.processing_duration
        type: string
      - description: 'Sort by request_method. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.request_method
        type: string
      - description: 'Sort by user_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.user_id
        type: string
      - description: 'Sort by ip_address. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.ip_address
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Gets a list for all entities of the AccessLog type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateAccessLogRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Creates a new AccessLog
  /crud/accessLogs/:id:
    delete:
      parameters:
      - description: AccessLog id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Soft deletes a single AccessLog entity based on their id
    get:
      parameters:
      - description: AccessLog id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetAccessLogsResponse'
      summary: Gets a single AccessLog entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateAccessLogRequest'
      - description: AccessLog id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Updates a single AccessLog entity based on their id
  /crud/courses:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete course
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of courses by their ids
    get:
      parameters:
      - description: Include deleted courses in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.name
        type: string
      - description: 'Sort by address. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.address
        type: string
      - description: 'Sort by latitude. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.latitude
        type: string
      - description: 'Sort by longitude. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.longitude
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APICourse'
      summary: Gets a list for all entities of the Course type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateCourseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APICourse'
      summary: Creates a new Course
  /crud/courses/:id:
    delete:
      parameters:
      - description: Course id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete course
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APICourse'
      summary: Soft deletes a single Course entity based on their id
    get:
      parameters:
      - description: Course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetCoursesResponse'
      summary: Gets a single Course entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateCourseRequest'
      - description: Course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APICourse'
      summary: Updates a single Course entity based on their id
  /crud/courses/:id/unDelete:
    post:
      parameters:
      - description: Course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APICourse'
      summary: Undeletes a course by id
  /crud/eventPQMatchScores:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete eventPQMatchScore
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of eventPQMatchScores by their ids
    get:
      parameters:
      - description: 'Sort by event_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.event_id
        type: string
      - description: 'Sort by profile_question_id. Value should be ASC or DESC. eg:
          ?sort.created_at=DESC'
        in: query
        name: sort.profile_question_id
        type: string
      - description: 'Sort by rating_avg. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.rating_avg
        type: string
      - description: 'Sort by num_avg. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.num_avg
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventPQMatchScore'
      summary: Gets a list for all entities of the EventPQMatchScore type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateEventPQMatchScoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventPQMatchScore'
      summary: Creates a new EventPQMatchScore
  /crud/eventPQMatchScores/:id:
    delete:
      parameters:
      - description: EventPQMatchScore id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventPQMatchScore'
      summary: Soft deletes a single EventPQMatchScore entity based on their id
    get:
      parameters:
      - description: EventPQMatchScore id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetEventPQMatchScoresResponse'
      summary: Gets a single EventPQMatchScore entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateEventPQMatchScoreRequest'
      - description: EventPQMatchScore id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventPQMatchScore'
      summary: Updates a single EventPQMatchScore entity based on their id
  /crud/eventUsers:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete eventUser
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of eventUsers by their ids
    get:
      parameters:
      - description: Include deleted eventUsers in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by user_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.user_id
        type: string
      - description: 'Sort by event_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.event_id
        type: string
      - description: 'Sort by is_owner. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.is_owner
        type: string
      - description: 'Sort by accepted. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.accepted
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventUser'
      summary: Gets a list for all entities of the EventUser type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateEventUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventUser'
      summary: Creates a new EventUser
  /crud/eventUsers/:id:
    delete:
      parameters:
      - description: EventUser id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete eventUser
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventUser'
      summary: Soft deletes a single EventUser entity based on their id
    get:
      parameters:
      - description: EventUser id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetEventUsersResponse'
      summary: Gets a single EventUser entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateEventUserRequest'
      - description: EventUser id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventUser'
      summary: Updates a single EventUser entity based on their id
  /crud/eventUsers/:id/unDelete:
    post:
      parameters:
      - description: EventUser id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEventUser'
      summary: Undeletes a eventUser by id
  /crud/events:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete event
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of events by their ids
    get:
      parameters:
      - description: Include deleted events in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by game_type_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.game_type_id
        type: string
      - description: 'Sort by event_date. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.event_date
        type: string
      - description: 'Sort by player_count. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.player_count
        type: string
      - description: 'Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.name
        type: string
      - description: 'Sort by created_by_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_by_id
        type: string
      - description: 'Sort by course_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.course_id
        type: string
      - description: 'Sort by parent_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.parent_id
        type: string
      - description: 'Sort by public. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.public
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEvent'
      summary: Gets a list for all entities of the Event type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEvent'
      summary: Creates a new Event
  /crud/events/:id:
    delete:
      parameters:
      - description: Event id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete event
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEvent'
      summary: Soft deletes a single Event entity based on their id
    get:
      parameters:
      - description: Event id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetEventsResponse'
      summary: Gets a single Event entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateEventRequest'
      - description: Event id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEvent'
      summary: Updates a single Event entity based on their id
  /crud/events/:id/unDelete:
    post:
      parameters:
      - description: Event id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIEvent'
      summary: Undeletes a event by id
  /crud/gameTypes:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete gameType
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of gameTypes by their ids
    get:
      parameters:
      - description: Include deleted gameTypes in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.name
        type: string
      - description: 'Sort by is_custom. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.is_custom
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGameType'
      summary: Gets a list for all entities of the GameType type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateGameTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGameType'
      summary: Creates a new GameType
  /crud/gameTypes/:id:
    delete:
      parameters:
      - description: GameType id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete gameType
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGameType'
      summary: Soft deletes a single GameType entity based on their id
    get:
      parameters:
      - description: GameType id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetGameTypesResponse'
      summary: Gets a single GameType entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateGameTypeRequest'
      - description: GameType id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGameType'
      summary: Updates a single GameType entity based on their id
  /crud/gameTypes/:id/unDelete:
    post:
      parameters:
      - description: GameType id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGameType'
      summary: Undeletes a gameType by id
  /crud/groupUsers:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete groupUser
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of groupUsers by their ids
    get:
      parameters:
      - description: Include deleted groupUsers in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by group_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.group_id
        type: string
      - description: 'Sort by user_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.user_id
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroupUser'
      summary: Gets a list for all entities of the GroupUser type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateGroupUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroupUser'
      summary: Creates a new GroupUser
  /crud/groupUsers/:id:
    delete:
      parameters:
      - description: GroupUser id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete groupUser
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroupUser'
      summary: Soft deletes a single GroupUser entity based on their id
    get:
      parameters:
      - description: GroupUser id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetGroupUsersResponse'
      summary: Gets a single GroupUser entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateGroupUserRequest'
      - description: GroupUser id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroupUser'
      summary: Updates a single GroupUser entity based on their id
  /crud/groupUsers/:id/unDelete:
    post:
      parameters:
      - description: GroupUser id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroupUser'
      summary: Undeletes a groupUser by id
  /crud/groups:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete group
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of groups by their ids
    get:
      parameters:
      - description: Include deleted groups in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.name
        type: string
      - description: 'Sort by created_by_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_by_id
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroup'
      summary: Gets a list for all entities of the Group type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroup'
      summary: Creates a new Group
  /crud/groups/:id:
    delete:
      parameters:
      - description: Group id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete group
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroup'
      summary: Soft deletes a single Group entity based on their id
    get:
      parameters:
      - description: Group id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetGroupsResponse'
      summary: Gets a single Group entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateGroupRequest'
      - description: Group id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroup'
      summary: Updates a single Group entity based on their id
  /crud/groups/:id/unDelete:
    post:
      parameters:
      - description: Group id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGroup'
      summary: Undeletes a group by id
  /crud/images:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete image
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of images by their ids
    get:
      parameters:
      - description: Include deleted images in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.name
        type: string
      - description: 'Sort by type. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.type
        type: string
      - description: 'Sort by size. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.size
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIImage'
      summary: Gets a list for all entities of the Image type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIImage'
      summary: Creates a new Image
  /crud/images/:id:
    delete:
      parameters:
      - description: Image id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete image
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIImage'
      summary: Soft deletes a single Image entity based on their id
    get:
      parameters:
      - description: Image id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetImagesResponse'
      summary: Gets a single Image entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateImageRequest'
      - description: Image id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIImage'
      summary: Updates a single Image entity based on their id
  /crud/images/:id/unDelete:
    post:
      parameters:
      - description: Image id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIImage'
      summary: Undeletes a image by id
  /crud/inviteShortcodes:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete inviteShortcode
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of inviteShortcodes by their ids
    get:
      parameters:
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by invite_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.invite_id
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInviteShortcode'
      summary: Gets a list for all entities of the InviteShortcode type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateInviteShortcodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInviteShortcode'
      summary: Creates a new InviteShortcode
  /crud/inviteShortcodes/:id:
    delete:
      parameters:
      - description: InviteShortcode id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInviteShortcode'
      summary: Soft deletes a single InviteShortcode entity based on their id
    get:
      parameters:
      - description: InviteShortcode id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetInviteShortcodesResponse'
      summary: Gets a single InviteShortcode entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateInviteShortcodeRequest'
      - description: InviteShortcode id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInviteShortcode'
      summary: Updates a single InviteShortcode entity based on their id
  /crud/invites:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete invite
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of invites by their ids
    get:
      parameters:
      - description: Include deleted invites in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by event_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.event_id
        type: string
      - description: 'Sort by group_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.group_id
        type: string
      - description: 'Sort by suggested_name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.suggested_name
        type: string
      - description: 'Sort by phone. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.phone
        type: string
      - description: 'Sort by email. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.email
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInvite'
      summary: Gets a list for all entities of the Invite type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateInviteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInvite'
      summary: Creates a new Invite
  /crud/invites/:id:
    delete:
      parameters:
      - description: Invite id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete invite
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInvite'
      summary: Soft deletes a single Invite entity based on their id
    get:
      parameters:
      - description: Invite id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetInvitesResponse'
      summary: Gets a single Invite entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateInviteRequest'
      - description: Invite id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInvite'
      summary: Updates a single Invite entity based on their id
  /crud/invites/:id/unDelete:
    post:
      parameters:
      - description: Invite id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIInvite'
      summary: Undeletes a invite by id
  /crud/profileQuestions:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete profileQuestion
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of profileQuestions by their ids
    get:
      parameters:
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by question. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.question
        type: string
      - description: 'Sort by answer_type. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.answer_type
        type: string
      - description: 'Sort by options. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.options
        type: string
      - description: 'Sort by weight. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.weight
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIProfileQuestion'
      summary: Gets a list for all entities of the ProfileQuestion type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateProfileQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIProfileQuestion'
      summary: Creates a new ProfileQuestion
  /crud/profileQuestions/:id:
    delete:
      parameters:
      - description: ProfileQuestion id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIProfileQuestion'
      summary: Soft deletes a single ProfileQuestion entity based on their id
    get:
      parameters:
      - description: ProfileQuestion id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetProfileQuestionsResponse'
      summary: Gets a single ProfileQuestion entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateProfileQuestionRequest'
      - description: ProfileQuestion id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIProfileQuestion'
      summary: Updates a single ProfileQuestion entity based on their id
  /crud/tokenIssuances:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete tokenIssuance
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of tokenIssuances by their ids
    get:
      parameters:
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by user_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.user_id
        type: string
      - description: 'Sort by ip_address. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.ip_address
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Gets a list for all entities of the TokenIssuance type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateTokenIssuanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Creates a new TokenIssuance
  /crud/tokenIssuances/:id:
    delete:
      parameters:
      - description: TokenIssuance id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Soft deletes a single TokenIssuance entity based on their id
    get:
      parameters:
      - description: TokenIssuance id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetTokenIssuancesResponse'
      summary: Gets a single TokenIssuance entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateTokenIssuanceRequest'
      - description: TokenIssuance id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Updates a single TokenIssuance entity based on their id
  /crud/userProfileQuestions:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete userProfileQuestion
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of userProfileQuestions by their ids
    get:
      parameters:
      - description: 'Sort by user_id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.user_id
        type: string
      - description: 'Sort by profile_question_id. Value should be ASC or DESC. eg:
          ?sort.created_at=DESC'
        in: query
        name: sort.profile_question_id
        type: string
      - description: 'Sort by a_number. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.a_number
        type: string
      - description: 'Sort by a_rating. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.a_rating
        type: string
      - description: 'Sort by a_days. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.a_days
        type: string
      - description: 'Sort by a_text. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.a_text
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUserProfileQuestion'
      summary: Gets a list for all entities of the UserProfileQuestion type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateUserProfileQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUserProfileQuestion'
      summary: Creates a new UserProfileQuestion
  /crud/userProfileQuestions/:id:
    delete:
      parameters:
      - description: UserProfileQuestion id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUserProfileQuestion'
      summary: Soft deletes a single UserProfileQuestion entity based on their id
    get:
      parameters:
      - description: UserProfileQuestion id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetUserProfileQuestionsResponse'
      summary: Gets a single UserProfileQuestion entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateUserProfileQuestionRequest'
      - description: UserProfileQuestion id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUserProfileQuestion'
      summary: Updates a single UserProfileQuestion entity based on their id
  /crud/users:
    delete:
      parameters:
      - description: List of ids to delete
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.IDList'
      - description: Hard delete user
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.DeletedCount'
      summary: Soft deletes a range of users by their ids
    get:
      parameters:
      - description: Include deleted users in the results
        in: query
        name: withDeleted
        type: string
      - description: 'Sort by id. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.id
        type: string
      - description: 'Sort by name. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.name
        type: string
      - description: 'Sort by login. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.login
        type: string
      - description: 'Sort by email. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.email
        type: string
      - description: 'Sort by sub. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.sub
        type: string
      - description: 'Sort by roles. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.roles
        type: string
      - description: 'Sort by image. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.image
        type: string
      - description: 'Sort by birthday. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.birthday
        type: string
      - description: 'Sort by gender_self_defined. Value should be ASC or DESC. eg:
          ?sort.created_at=DESC'
        in: query
        name: sort.gender_self_defined
        type: string
      - description: 'Sort by gender. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.gender
        type: string
      - description: 'Sort by location. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.location
        type: string
      - description: 'Sort by phone. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.phone
        type: string
      - description: 'Sort by created_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.created_at
        type: string
      - description: 'Sort by updated_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.updated_at
        type: string
      - description: 'Sort by deleted_at. Value should be ASC or DESC. eg: ?sort.created_at=DESC'
        in: query
        name: sort.deleted_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Gets a list for all entities of the User type
    post:
      consumes:
      - application/json
      parameters:
      - description: Creation parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APICreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Creates a new User
  /crud/users/:id:
    delete:
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete user
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Soft deletes a single User entity based on their id
    get:
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetUsersResponse'
      summary: Gets a single User entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateUserRequest'
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Updates a single User entity based on their id
  /crud/users/:id/unDelete:
    post:
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Undeletes a user by id
  /healthz:
    get:
      description: returns 200 when service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check handler
  /users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Gets information on the current user
swagger: "2.0"
