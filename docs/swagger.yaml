definitions:
  main.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  main.RegisterRequest:
    properties:
      email:
        type: string
      login:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - login
    - name
    - password
    type: object
  modelcrud.APIAccessLog:
    properties:
      created_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      path:
        type: string
      processing_duration:
        type: integer
      request_body:
        type: string
      request_headers:
        additionalProperties: true
        type: object
      request_method:
        type: string
      response_body:
        additionalProperties: true
        type: object
      response_code:
        type: integer
      response_headers:
        additionalProperties: true
        type: object
      user_id:
        type: string
    type: object
  modelcrud.APIGetAccessLogsResponse:
    properties:
      access_logs:
        items:
          $ref: '#/definitions/modelcrud.APIAccessLog'
        type: array
      next_offset:
        type: integer
      total:
        type: integer
    type: object
  modelcrud.APIGetTokenIssuancesResponse:
    properties:
      next_offset:
        type: integer
      token_issuances:
        items:
          $ref: '#/definitions/modelcrud.APITokenIssuance'
        type: array
      total:
        type: integer
    type: object
  modelcrud.APIGetUsersResponse:
    properties:
      next_offset:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/modelcrud.APIUser'
        type: array
    type: object
  modelcrud.APITokenIssuance:
    properties:
      created_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateAccessLogRequest:
    properties:
      ip_address:
        type: string
      path:
        type: string
      processing_duration:
        type: integer
      request_body:
        type: string
      request_headers:
        additionalProperties: true
        type: object
      request_method:
        type: string
      response_body:
        additionalProperties: true
        type: object
      response_code:
        type: integer
      response_headers:
        additionalProperties: true
        type: object
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateTokenIssuanceRequest:
    properties:
      ip_address:
        type: string
      user_id:
        type: string
    type: object
  modelcrud.APIUpdateUserRequest:
    properties:
      email:
        type: string
      login:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      sub:
        type: string
    type: object
  modelcrud.APIUser:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      login:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      sub:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  license:
    name: Unknown
  title: Go Vue Template
  version: "0.1"
paths:
  /admin/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/modelcrud.APIUser'
            type: array
      summary: Gets a list of all users
  /auth/loginjwt:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Exchanges a JWT from a configurable source for a signed JWT
  /auth/loginup:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Exchanges a username and password for a signed JWT
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Registers a new account using username and password as the authentication
        scheme
  /crud/accessLogs:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Gets a list for all entities of the AccessLog type
  /crud/accessLogs/:id:
    delete:
      parameters:
      - description: AccessLog id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Soft deletes a single AccessLog entity based on their id
    get:
      parameters:
      - description: AccessLog id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetAccessLogsResponse'
      summary: Gets a single AccessLog entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateAccessLogRequest'
      - description: AccessLog id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIAccessLog'
      summary: Updates a single AccessLog entity based on their id
  /crud/tokenIssuances:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Gets a list for all entities of the TokenIssuance type
  /crud/tokenIssuances/:id:
    delete:
      parameters:
      - description: TokenIssuance id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Soft deletes a single TokenIssuance entity based on their id
    get:
      parameters:
      - description: TokenIssuance id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetTokenIssuancesResponse'
      summary: Gets a single TokenIssuance entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateTokenIssuanceRequest'
      - description: TokenIssuance id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APITokenIssuance'
      summary: Updates a single TokenIssuance entity based on their id
  /crud/users:
    get:
      parameters:
      - description: Include deleted users in the results
        in: query
        name: withDeleted
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Gets a list for all entities of the User type
  /crud/users/:id:
    delete:
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      - description: Hard delete user
        in: query
        name: hardDelete
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Soft deletes a single User entity based on their id
    get:
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIGetUsersResponse'
      summary: Gets a single User entity by their id
    put:
      consumes:
      - application/json
      parameters:
      - description: Update parameters
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/modelcrud.APIUpdateUserRequest'
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Updates a single User entity based on their id
  /healthz:
    get:
      description: returns 200 when service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check handler
  /users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelcrud.APIUser'
      summary: Gets information on the current user
swagger: "2.0"
